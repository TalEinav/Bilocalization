(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    741436,      15082]
NotebookOptionsPosition[    728671,      14897]
NotebookOutlinePosition[    729494,      14922]
CellTagsIndexPosition[    729413,      14917]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell["To Do for this notebook:", "Text",
 CellChangeTimes->{{3.860378697412166*^9, 3.8603787107239704`*^9}},
 FontSize->16,
 FontWeight->"Bold",
 FontColor->RGBColor[
  0.5, 0, 0.5],ExpressionUUID->"ea6db855-6843-4b14-84d4-670c75f05f22"],

Cell["\<\
Add some simple examples of monopartite/bipartite embedding to the backgruond \
section at the top\
\>", "Item",
 CellChangeTimes->{{3.8603787033011055`*^9, 
  3.860378733817978*^9}},ExpressionUUID->"2428756b-edda-4233-9573-\
6b3c231c04a1"],

Cell["\<\
Might want to think about the naming of the algorithms...especially since MDS \
is not representative of all of them\
\>", "Item",
 CellChangeTimes->{{3.8603787033011055`*^9, 
  3.8603787622108374`*^9}},ExpressionUUID->"f2bdb3bb-98b0-448e-a9fe-\
827dfe123519"],

Cell[CellGroupData[{

Cell["Comment up all code", "Item",
 CellChangeTimes->{{3.8603787033011055`*^9, 
  3.8603787392767706`*^9}},ExpressionUUID->"30c0ca14-cd72-49dc-9fa5-\
10f5ea6066cb"],

Cell["Explain each algorithm in high level", "Subitem",
 CellChangeTimes->{{3.8603787033011055`*^9, 
  3.860378743955795*^9}},ExpressionUUID->"0db72d9c-45c2-43b0-b990-\
2e2b8d51c67e"],

Cell["Explain what all options do", "Subitem",
 CellChangeTimes->{{3.8603787033011055`*^9, 
  3.860378768609004*^9}},ExpressionUUID->"b95d726b-312b-41af-9c8e-\
ba6c69e1326b"]
}, Open  ]],

Cell["\<\
I don\[CloseCurlyQuote]t think the output of these algorithms needs to be \
commented anymore, since these are not in Init\
\>", "Item",
 CellChangeTimes->{{3.8603787033011055`*^9, 
  3.860378781047295*^9}},ExpressionUUID->"fd6505f1-2120-4b2f-9cea-\
1230929e7f88"],

Cell[CellGroupData[{

Cell["Embedding Algorithms", "Section",
 CellChangeTimes->{{3.8486800377218075`*^9, 3.848680039535396*^9}, {
  3.850270930104012*^9, 
  3.8502709309991584`*^9}},ExpressionUUID->"aeba1354-1f62-4e15-a053-\
6d48ea0fd084"],

Cell[CellGroupData[{

Cell["Background", "Subsubsection",
 CellChangeTimes->{{3.8603778416176815`*^9, 
  3.8603778424155283`*^9}},ExpressionUUID->"10ef3d19-5a26-45f3-866f-\
904f9c2b4df5"],

Cell[TextData[{
 "This notebook contains methods to embed a distance matrix into Euclidean \
space ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[DoubleStruckCapitalR]", "d"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "35adeaae-0116-47b8-850b-8603a90d1e28"],
 ". We are specifically interested in two problems:"
}], "Text",
 CellChangeTimes->{{3.860377816013255*^9, 3.860377837343866*^9}, {
  3.8603778715737123`*^9, 3.860377874655714*^9}, {3.860377980792886*^9, 
  3.8603780355237336`*^9}},ExpressionUUID->"dbfa161b-8527-4298-b2f5-\
afd71e02a9d9"],

Cell[TextData[{
 StyleBox["Monopartite embedding",
  FontWeight->"Bold"],
 " [the classic \[OpenCurlyDoubleQuote]city-city\[CloseCurlyDoubleQuote] \
problem]: Given a real symmetric distance matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["D", 
     RowBox[{"j", "\[InvisibleComma]", "k"}]], "\[Element]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", 
     RowBox[{"n", "\[Cross]", "n"}]]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "c9627dee-b642-4fe1-90bd-31b6618b3fd8"],
 " between ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "d87d0039-6f1d-4f0b-9925-3967b0f0ec65"],
 " points and the dimension ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "189bd4e2-12fa-40b2-be92-3ecfb1ee8a0a"],
 ", find the best possible configuration of ",
 Cell[BoxData[
  FormBox[
   SubsuperscriptBox[
    RowBox[{"{", 
     SubscriptBox["x", "j"], "}"}], 
    RowBox[{"j", "=", "1"}], "n"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "ffb79868-cd12-4711-b6ef-68dc98e27ca2"],
 " points in ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[DoubleStruckCapitalR]", "d"], TraditionalForm]],
  ExpressionUUID->"9805259c-47d9-4820-8ba2-4aa4502d9ea8"],
 " that matches this distance matrix with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["D", 
     RowBox[{"j", "\[InvisibleComma]", "k"}]], "\[TildeTilde]", 
    RowBox[{"\[LeftDoubleBracketingBar]", 
     RowBox[{
      SubscriptBox["x", "j"], "-", 
      SubscriptBox["x", "k"]}], "\[RightDoubleBracketingBar]"}]}], 
   TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "5477e934-6216-470f-ac34-5604fc70b5e9"]
}], "Item",
 CellChangeTimes->{{3.8603780619084444`*^9, 3.860378165994485*^9}, {
  3.860378287147758*^9, 3.860378292476206*^9}, {3.8603783475731335`*^9, 
  3.8603783863437037`*^9}},ExpressionUUID->"49760aba-4d0f-41b7-9a4a-\
c74976642cd8"],

Cell[TextData[{
 StyleBox["Bipartite embedding",
  FontWeight->"Bold"],
 " [the \[OpenCurlyDoubleQuote]antibody-virus\[CloseCurlyDoubleQuote] \
problem]: Given a real distance matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["D", 
     RowBox[{"j", "\[InvisibleComma]", "k"}]], "\[Element]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", 
     RowBox[{"m", "\[Cross]", "n"}]]}], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "21ea6005-c4db-4fd2-a305-9dae5dc4c9fb"],
 " between ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "60c08883-d994-47f5-85ae-34f97484f3d0"],
 " points of one category [antibodies] and ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "a695d7e8-3145-4ad8-853d-61d28b59a0c7"],
 " points of another [viruses], together with the dimension ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "097b3fc5-de6f-477e-9fb3-d8849ea5b4b2"],
 ", find the best possible configuration of ",
 Cell[BoxData[
  FormBox[
   SubsuperscriptBox[
    RowBox[{"{", 
     SubscriptBox["x", "j"], "}"}], 
    RowBox[{"j", "=", "1"}], "m"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "b5f9a454-586d-456f-8d95-1bb8038e8b49"],
 " and ",
 Cell[BoxData[
  FormBox[
   SubsuperscriptBox[
    RowBox[{"{", 
     SubscriptBox["y", "k"], "}"}], 
    RowBox[{"k", "=", "1"}], "n"], TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "46606167-c856-4b0d-997b-7dd144542530"],
 " points in ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["\[DoubleStruckCapitalR]", "d"], TraditionalForm]],
  ExpressionUUID->"1be14cf2-7827-4a07-a40d-68ef01674f24"],
 " that matches the distance matrix with ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["D", 
     RowBox[{"j", "\[InvisibleComma]", "k"}]], "\[TildeTilde]", 
    RowBox[{"\[LeftDoubleBracketingBar]", 
     RowBox[{
      SubscriptBox["x", "j"], "-", 
      SubscriptBox["y", "k"]}], "\[RightDoubleBracketingBar]"}]}], 
   TraditionalForm]],
  FormatType->TraditionalForm,ExpressionUUID->
  "d67cf4f5-25a7-480a-9804-aecf2348d4ce"]
}], "Item",
 CellChangeTimes->{{3.8603780619084444`*^9, 3.860378165994485*^9}, {
  3.8603782105952444`*^9, 3.860378313556342*^9}, {3.8603783777713394`*^9, 
  3.8603783844311633`*^9}},ExpressionUUID->"2f2a3f29-3942-4e70-92a7-\
316f139f9128"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Error Function", "Subsubsection",
 CellChangeTimes->{{3.8523096058726482`*^9, 
  3.852309609452547*^9}},ExpressionUUID->"d4734519-17b7-4f7e-b2f7-\
5867a330c321"],

Cell[TextData[{
 "Options ",
 Cell[BoxData[
  RowBox[{"\"\<Comparing\>\"", "\[Rule]", "\"\<Distance\>\""}]], "Input",
  ExpressionUUID->"07c22fff-c3af-40b1-bbe8-7d28da65aaa0"],
 " and ",
 Cell[BoxData[
  RowBox[{"\"\<PenalizeError\>\"", "\[Rule]", "\"\<RMSE\>\""}]], "Input",
  ExpressionUUID->"a7099361-4965-424e-b6e0-9629d49efff5"],
 " computes the RMSE"
}], "Text",
 CellChangeTimes->{{3.856828173496482*^9, 3.856828200923897*^9}, {
  3.856828247782831*^9, 3.856828247782831*^9}, {3.8586002631788983`*^9, 
  3.8586002631788983`*^9}, {3.8603777957468605`*^9, 
  3.8603778018673043`*^9}},ExpressionUUID->"c0a2c07a-be1a-4c98-afe9-\
46d367c32bfd"],

Cell[TextData[{
 "Options ",
 Cell[BoxData[
  RowBox[{"\"\<Comparing\>\"", "\[Rule]", "\"\<DistanceSquared\>\""}]], 
  "Input",ExpressionUUID->"00e86642-bd7b-4f1e-95b6-175dd4d5f69d"],
 " and ",
 Cell[BoxData[
  RowBox[{"\"\<PenalizeError\>\"", "\[Rule]", "\"\<MeanAbsoluteError\>\""}]], 
  "Input",ExpressionUUID->"4bdcd6f9-9da3-406d-ac9c-88e5192818b1"],
 " are the most similar to the error that SDP is minimizing"
}], "Text",
 CellChangeTimes->{{3.856828173496482*^9, 3.856828200923897*^9}, {
  3.856828247782831*^9, 3.856828247782831*^9}, {3.8586002631788983`*^9, 
  3.8586002631788983`*^9}},ExpressionUUID->"44473321-dd76-4f99-8981-\
4c74c92c3f79"],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "errorMDS", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "errorMDS", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<Comparing\>\"", "\[Rule]", "\"\<DistanceSquared\>\""}], ",", 
     RowBox[{
     "\"\<PenalizeError\>\"", "\[Rule]", "\"\<MeanAbsoluteError\>\""}], ",", 
     RowBox[{"\"\<Verbose\>\"", "\[Rule]", "False"}], ",", 
     RowBox[{"\"\<IgnoreEntries\>\"", "\[Rule]", 
      RowBox[{"{", "}"}]}], ",", 
     RowBox[{"\"\<ReturnMeanError\>\"", "->", "True"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"errorMDS", "[", 
   RowBox[{"coords_", ",", "distMatrixRaw_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"distMatrix", "=", "distMatrixRaw"}], ",", "belowDynamicRange", 
      ",", "aboveDynamicRange", ",", "dist", ",", "coords1", ",", "coords2", 
      ",", "slice"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"SymmetricMatrixQ", "[", "distMatrix", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"City", "-", 
         RowBox[{"city", " ", "distances"}]}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"coords1", "=", 
         RowBox[{"coords2", "=", "coords"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"slice", "=", "UpperTriangularize"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"Antibody", "-", 
         RowBox[{"virus", " ", "distances"}]}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"coords1", ",", "coords2"}], "}"}], "=", "coords"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"slice", "=", "Identity"}]}]}], "\[IndentingNewLine]", "]"}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"Positions", " ", "of", " ", 
       RowBox[{"upper", "/", "lower"}], " ", "bounds"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"belowDynamicRange", "=", 
      RowBox[{"Position", "[", 
       RowBox[{"distMatrix", ",", "_LessThan"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"aboveDynamicRange", "=", 
      RowBox[{"Position", "[", 
       RowBox[{"distMatrix", ",", "_GreaterThan"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"distMatrix", "=", 
      RowBox[{"MapAt", "[", 
       RowBox[{"First", ",", "distMatrix", ",", 
        RowBox[{"Join", "[", 
         RowBox[{"belowDynamicRange", ",", "aboveDynamicRange"}], "]"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"Compute", " ", 
         RowBox[{"error", ".", " ", "Bounded"}], " ", "values", " ", "only", 
         " ", "take", " ", "effect", " ", "when", " ", "the", " ", "bound", 
         " ", "is", " ", "not", " ", 
         RowBox[{"met", ".", " ", "For"}], " ", "city"}], "-", 
        RowBox[{"city", " ", "distances"}]}], ",", " ", 
       RowBox[{"the", " ", "matrix", " ", "is", " ", "symmetric"}], ",", " ", 
       RowBox[{
        RowBox[{"and", " ", "only", " ", "the", " ", "upper"}], "-", 
        RowBox[{
        "half", " ", "slice", " ", "needs", " ", "to", " ", "be", " ", 
         "considered"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{
       RowBox[{"OptionValue", "[", "\"\<Comparing\>\"", "]"}], ",", 
       "\[IndentingNewLine]", "\"\<Distance\>\"", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"dist", "=", 
         RowBox[{"slice", "[", 
          RowBox[{
           RowBox[{"Outer", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Sqrt", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"#1", "-", "#2"}], ")"}], ".", 
                RowBox[{"(", 
                 RowBox[{"#1", "-", "#2"}], ")"}]}], "]"}], "&"}], ",", 
             "coords1", ",", "coords2", ",", "1"}], "]"}], "-", 
           "distMatrix"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"dist", "=", 
         RowBox[{"MapAt", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "/", 
             RowBox[{"Sqrt", "[", 
              RowBox[{"1.", "+", 
               SuperscriptBox["E", 
                RowBox[{"10.", " ", "#"}]]}], "]"}]}], "&"}], ",", "dist", 
           ",", "aboveDynamicRange"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"dist", "=", 
         RowBox[{"MapAt", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "/", 
             RowBox[{"Sqrt", "[", 
              RowBox[{"1.", "+", 
               SuperscriptBox["E", 
                RowBox[{
                 RowBox[{"-", "10."}], " ", "#"}]]}], "]"}]}], "&"}], ",", 
           "dist", ",", "belowDynamicRange"}], "]"}]}]}], ",", 
       "\[IndentingNewLine]", "\"\<DistanceSquared\>\"", ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"dist", "=", 
         RowBox[{"slice", "[", 
          RowBox[{
           RowBox[{"Outer", "[", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"#1", "-", "#2"}], ")"}], ".", 
               RowBox[{"(", 
                RowBox[{"#1", "-", "#2"}], ")"}]}], "&"}], ",", "coords1", 
             ",", "coords2", ",", "1"}], "]"}], "-", 
           SuperscriptBox["distMatrix", "2"]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"dist", "=", 
         RowBox[{"MapAt", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "/", 
             RowBox[{"Sqrt", "[", 
              RowBox[{"1.", "+", 
               SuperscriptBox["E", 
                RowBox[{"10.", " ", "#"}]]}], "]"}]}], "&"}], ",", "dist", 
           ",", "aboveDynamicRange"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"dist", "=", 
         RowBox[{"MapAt", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "/", 
             RowBox[{"Sqrt", "[", 
              RowBox[{"1.", "+", 
               SuperscriptBox["E", 
                RowBox[{
                 RowBox[{"-", "10."}], " ", "#"}]]}], "]"}]}], "&"}], ",", 
           "dist", ",", "belowDynamicRange"}], "]"}]}]}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"dist", "=", 
      RowBox[{"Delete", "[", 
       RowBox[{"dist", ",", 
        RowBox[{"OptionValue", "[", "\"\<IgnoreEntries\>\"", "]"}]}], "]"}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"!", 
        RowBox[{"OptionValue", "[", "\"\<ReturnMeanError\>\"", "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"Join", "@@", 
         RowBox[{"DeleteMissing", "[", 
          RowBox[{"dist", ",", "2", ",", "All"}], "]"}]}], "]"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{
       RowBox[{"OptionValue", "[", "\"\<PenalizeError\>\"", "]"}], ",", 
       "\[IndentingNewLine]", "\"\<RMSE\>\"", ",", 
       RowBox[{"RootMeanSquare", "@", 
        RowBox[{"Flatten", "@", 
         RowBox[{"DeleteMissing", "[", 
          RowBox[{"dist", ",", "2", ",", "All"}], "]"}]}]}], ",", 
       "\[IndentingNewLine]", "\"\<MeanAbsoluteError\>\"", ",", 
       RowBox[{"Mean", "@", 
        RowBox[{"Flatten", "@", 
         RowBox[{"Abs", "@", 
          RowBox[{"DeleteMissing", "[", 
           RowBox[{"dist", ",", "2", ",", "All"}], "]"}]}]}]}], ",", 
       "\[IndentingNewLine]", "\"\<RootMeanAbsoluteError\>\"", ",", 
       RowBox[{"Sqrt", "@", 
        RowBox[{"Mean", "@", 
         RowBox[{"Flatten", "@", 
          RowBox[{"Abs", "@", 
           RowBox[{"DeleteMissing", "[", 
            RowBox[{"dist", ",", "2", ",", "All"}], "]"}]}]}]}]}], ",", 
       "\[IndentingNewLine]", "\"\<MeanSquaredError\>\"", ",", 
       RowBox[{"Mean", "@", 
        RowBox[{"Flatten", "[", 
         SuperscriptBox[
          RowBox[{"DeleteMissing", "[", 
           RowBox[{"dist", ",", "2", ",", "All"}], "]"}], "2"], "]"}]}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 CellChangeTimes->{{3.848760740086795*^9, 3.848760746517615*^9}, {
   3.8487607856812487`*^9, 3.8487608068023214`*^9}, {3.848760886250483*^9, 
   3.8487608902293377`*^9}, {3.84876123008929*^9, 3.8487612445352726`*^9}, {
   3.848761563785985*^9, 3.848761664168914*^9}, {3.8487616945484734`*^9, 
   3.8487617003587427`*^9}, {3.848761731378899*^9, 3.848761732543458*^9}, {
   3.8487617821546946`*^9, 3.848761789644469*^9}, {3.848937084329664*^9, 
   3.8489370859719863`*^9}, {3.849717461638072*^9, 3.849717495044505*^9}, {
   3.8497175509089794`*^9, 3.8497175561084332`*^9}, {3.8497175926592736`*^9, 
   3.849717600346961*^9}, {3.8497176552686915`*^9, 3.849717660826048*^9}, {
   3.849717699719594*^9, 3.8497177619516277`*^9}, {3.8497178090456104`*^9, 
   3.8497178247454634`*^9}, {3.849717861287466*^9, 3.849717929413962*^9}, {
   3.8497179663018064`*^9, 3.849718032580412*^9}, {3.849718096992293*^9, 
   3.8497181317123775`*^9}, {3.8497185691304183`*^9, 3.849718657819111*^9}, {
   3.8497186974712296`*^9, 3.849718767617345*^9}, {3.8497188233149395`*^9, 
   3.8497188543759875`*^9}, {3.849718957693745*^9, 3.8497189595479794`*^9}, {
   3.8497189971120224`*^9, 3.849719079821894*^9}, {3.84971914193165*^9, 
   3.8497191607962303`*^9}, {3.8497192676775875`*^9, 3.849719270716689*^9}, {
   3.849720161357574*^9, 3.849720246561952*^9}, {3.849790133415775*^9, 
   3.8497901890710044`*^9}, {3.8499877683983793`*^9, 3.84998777004065*^9}, {
   3.8499878060852704`*^9, 3.8499878142606387`*^9}, {3.8499879782921133`*^9, 
   3.849987983716649*^9}, {3.8499994190851126`*^9, 3.8499994271948977`*^9}, {
   3.8523092679993997`*^9, 3.8523092697876663`*^9}, {3.8523093189028034`*^9, 
   3.8523093211217537`*^9}, {3.852309361652392*^9, 3.8523093874718723`*^9}, {
   3.852309428342991*^9, 3.8523094520991125`*^9}, {3.852309667666765*^9, 
   3.8523096708341093`*^9}, {3.852310059022809*^9, 3.852310062767605*^9}, {
   3.852378687126284*^9, 3.852378693826169*^9}, {3.85682822520005*^9, 
   3.856828250046114*^9}, {3.8594004332579455`*^9, 3.8594004537121954`*^9}, {
   3.859400743880619*^9, 3.8594007920436397`*^9}, 3.860377762931883*^9, {
   3.8603778040833445`*^9, 
   3.8603778110531087`*^9}},ExpressionUUID->"f74d2172-ab49-4111-94f1-\
9977fb73d275"],

Cell[BoxData[{
 RowBox[{"ClearAll", "[", "errorActualCoords", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "errorActualCoords", "]"}], "=", 
   RowBox[{"Join", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<Verbose\>\"", "\[Rule]", "False"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Add", " ", "default", " ", "option", " ", "values", " ", "from", " ", 
       "errorMDS"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"FilterRules", "[", 
      RowBox[{
       RowBox[{"Options", "[", "errorMDS", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<Comparing\>\"", ",", "\"\<PenalizeError\>\""}], "}"}]}], 
      "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"errorActualCoords", "[", 
   RowBox[{"coordsNumeric_", ",", "coordsActual_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "level", ",", "join", ",", "coordsNumericTransformed", ",", "error"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"MatchQ", "[", 
        RowBox[{
         RowBox[{"Dimensions", "/@", "coordsActual"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", "2", "}"}], ".."}], "}"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"level", "=", "1"}], ";", "\[IndentingNewLine]", 
        RowBox[{"join", "=", "List"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"level", "=", "2"}], ";", "\[IndentingNewLine]", 
        RowBox[{"join", "=", "Join"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Apply", " ", "a", " ", "rigid", " ", "transform", " ", "to", " ", 
       "align", " ", "the", " ", "MDS", " ", "results", " ", "as", " ", 
       "closely", " ", "as", " ", "possible", " ", "to", " ", "the", " ", 
       "true", " ", "solution"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"coordsNumericTransformed", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{"transform", "[", 
         RowBox[{
          RowBox[{"join", "@@", "coordsActual"}], ",", 
          RowBox[{"join", "@@", "coordsNumeric"}]}], "]"}], ",", 
        "coordsNumeric", ",", 
        RowBox[{"{", "level", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Euclidean", " ", "distance", " ", "between", " ", "actual", " ", "and",
        " ", "numeric", " ", "coordinates"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"error", "=", 
      RowBox[{"MapThread", "[", 
       RowBox[{"EuclideanDistance", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"join", "@@", "coordsActual"}], ",", 
          RowBox[{"join", "@@", "coordsNumericTransformed"}]}], "}"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"OptionValue", "[", "\"\<Comparing\>\"", "]"}], "===", 
        "\"\<DistanceSquared\>\""}], ",", "\[IndentingNewLine]", 
       RowBox[{"error", "=", 
        SuperscriptBox["error", "2"]}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{
       RowBox[{"OptionValue", "[", "\"\<PenalizeError\>\"", "]"}], ",", 
       "\[IndentingNewLine]", "\"\<RMSE\>\"", ",", 
       RowBox[{"RootMeanSquare", "@", "error"}], ",", "\[IndentingNewLine]", 
       "\"\<MeanAbsoluteError\>\"", ",", 
       RowBox[{"Mean", "@", "error"}], ",", "\[IndentingNewLine]", 
       "\"\<RootMeanAbsoluteError\>\"", ",", 
       RowBox[{"Sqrt", "@", 
        RowBox[{"Mean", "@", "error"}]}], ",", "\[IndentingNewLine]", 
       "\"\<MeanSquaredError\>\"", ",", 
       RowBox[{"Mean", "[", 
        SuperscriptBox["error", "2"], "]"}]}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellChangeTimes->{{3.848760740086795*^9, 3.848760746517615*^9}, {
   3.8487607856812487`*^9, 3.8487608068023214`*^9}, {3.848760886250483*^9, 
   3.8487608902293377`*^9}, {3.84876123008929*^9, 3.8487612445352726`*^9}, {
   3.848761563785985*^9, 3.848761664168914*^9}, {3.8487616945484734`*^9, 
   3.8487617003587427`*^9}, {3.848761731378899*^9, 3.848761732543458*^9}, {
   3.8487617821546946`*^9, 3.848761789644469*^9}, {3.848937084329664*^9, 
   3.8489370859719863`*^9}, {3.849717461638072*^9, 3.849717495044505*^9}, {
   3.8497175509089794`*^9, 3.8497175561084332`*^9}, {3.8497175926592736`*^9, 
   3.849717600346961*^9}, {3.8497176552686915`*^9, 3.849717660826048*^9}, {
   3.849717699719594*^9, 3.8497177619516277`*^9}, {3.8497178090456104`*^9, 
   3.8497178247454634`*^9}, {3.849717861287466*^9, 3.849717929413962*^9}, {
   3.8497179663018064`*^9, 3.849718032580412*^9}, {3.849718096992293*^9, 
   3.8497181317123775`*^9}, {3.8497185691304183`*^9, 3.849718657819111*^9}, {
   3.8497186974712296`*^9, 3.849718767617345*^9}, {3.8497188233149395`*^9, 
   3.8497188543759875`*^9}, {3.849718957693745*^9, 3.8497189595479794`*^9}, {
   3.8497189971120224`*^9, 3.849719079821894*^9}, {3.84971914193165*^9, 
   3.8497191607962303`*^9}, {3.8497192676775875`*^9, 3.849719270716689*^9}, {
   3.849720161357574*^9, 3.849720246561952*^9}, {3.849790133415775*^9, 
   3.8497901890710044`*^9}, {3.8499877683983793`*^9, 3.84998777004065*^9}, {
   3.8499878060852704`*^9, 3.8499878142606387`*^9}, {3.8499879782921133`*^9, 
   3.849987983716649*^9}, {3.8499994190851126`*^9, 3.8499994271948977`*^9}, {
   3.8523092679993997`*^9, 3.8523092697876663`*^9}, {3.8523093189028034`*^9, 
   3.8523093211217537`*^9}, {3.852309361652392*^9, 3.8523093874718723`*^9}, {
   3.852309428342991*^9, 3.8523094520991125`*^9}, {3.852309667666765*^9, 
   3.8523096708341093`*^9}, {3.852310059022809*^9, 3.852310062767605*^9}, {
   3.852378687126284*^9, 3.852378693826169*^9}, {3.85682822520005*^9, 
   3.856828250046114*^9}, {3.857398183998847*^9, 3.857398234186054*^9}, {
   3.857398302218292*^9, 3.8573983150898333`*^9}, {3.8573983862562537`*^9, 
   3.8573983981043916`*^9}, {3.857398561405058*^9, 3.85739856368917*^9}, {
   3.8573987610262637`*^9, 3.857398761594652*^9}, 3.8573988350082717`*^9, {
   3.8573989767024746`*^9, 3.857399040317129*^9}, {3.857399120833887*^9, 
   3.8573992338462443`*^9}, {3.857399314612208*^9, 3.857399359952015*^9}, {
   3.857399391860753*^9, 3.8573994024846535`*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"a4954af9-9a2f-408a-b7a0-95fcf4145def"]
}, Closed]],

Cell[CellGroupData[{

Cell["Helper Functions", "Subsubsection",
 CellChangeTimes->{{3.8489653840588274`*^9, 
  3.848965385525186*^9}},ExpressionUUID->"87e46296-6fd6-42ab-9a8e-\
3b9485061632"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Centering", " ", "matrix"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"J", "[", "n_Integer", "]"}], ":=", 
   RowBox[{
    RowBox[{"IdentityMatrix", "[", "n", "]"}], "-", 
    RowBox[{"ConstantArray", "[", 
     RowBox[{
      FractionBox["1", "n"], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "n"}], "}"}]}], "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.8489649339587917`*^9, 3.848964948730598*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"8bf5dcbb-643d-4b9a-898a-7ee036406018"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Generate", " ", "'"}], 
    RowBox[{"numEntries", "'"}], " ", "points", " ", "in", " ", "2", "D", " ",
     "whose", " ", "distance", " ", "matrix", " ", "has", " ", "error", " ", 
    "\[Sigma]"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"Return", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"true", " ", "coordinates"}], ",", " ", 
      RowBox[{"noisy", " ", "distance", " ", "matrix"}]}], "}"}]}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ClearAll", "[", "exampleData", "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "exampleData", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"\"\<SeedRandom\>\"", "\[Rule]", "12345"}], ",", 
       RowBox[{"\"\<Range\>\"", "\[Rule]", "2.5"}], ",", 
       RowBox[{"\"\<FractionMissing\>\"", "->", "0"}], ",", 
       RowBox[{"\"\<FractionLessThan\>\"", "->", "0"}], ",", 
       RowBox[{"\"\<FractionGreaterThan\>\"", "->", "0"}], ",", 
       RowBox[{"\"\<MinEntriesRowCol\>\"", "->", "2"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"exampleData", "[", 
     RowBox[{
      RowBox[{"numEntries", ":", 
       RowBox[{"(", 
        RowBox[{"_Integer", "|", 
         RowBox[{"{", 
          RowBox[{"_Integer", ",", "_Integer"}], "}"}]}], ")"}]}], ",", 
      RowBox[{"\[Sigma]_", ":", "0."}], ",", 
      RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"fracMissing", "=", 
         RowBox[{"OptionValue", "[", "\"\<FractionMissing\>\"", "]"}]}], ",", 
        RowBox[{"fracLessThan", "=", 
         RowBox[{"OptionValue", "[", "\"\<FractionLessThan\>\"", "]"}]}], ",", 
        RowBox[{"fracGreaterThan", "=", 
         RowBox[{"OptionValue", "[", "\"\<FractionGreaterThan\>\"", "]"}]}], 
        ",", 
        RowBox[{"minEntries", "=", 
         RowBox[{"OptionValue", "[", "\"\<MinEntriesRowCol\>\"", "]"}]}], ",", 
        RowBox[{"cityCityQ", "=", 
         RowBox[{"MatchQ", "[", 
          RowBox[{"numEntries", ",", "_Integer"}], "]"}]}], ",", "coords", 
        ",", "coordsVirus", ",", "coordsAb", ",", "distMatrix", ",", "n", ",",
         "m", ",", "posMeasured", ",", "posWithheld", ",", "entry", ",", 
        "indices", ",", "thresholdSmall", ",", "thresholdLarge"}], "}"}], ",",
       "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"SeedRandom", "[", 
        RowBox[{"OptionValue", "[", "\"\<SeedRandom\>\"", "]"}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{"cityCityQ", ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"City", "-", 
           RowBox[{"city", " ", "distance"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"n", "=", "numEntries"}], ";", "\[IndentingNewLine]", 
          RowBox[{"coords", "=", 
           RowBox[{"RandomReal", "[", 
            RowBox[{
             RowBox[{
              FractionBox["1", "2"], 
              RowBox[{"OptionValue", "[", "\"\<Range\>\"", "]"}], 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"-", "1"}], ",", "1"}], "}"}]}], ",", 
             RowBox[{"{", 
              RowBox[{"n", ",", "2"}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"distMatrix", "=", 
           RowBox[{"Outer", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Sqrt", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"#1", "-", "#2"}], ")"}], ".", 
                RowBox[{"(", 
                 RowBox[{"#1", "-", "#2"}], ")"}]}], "]"}], "&"}], ",", 
             "coords", ",", "coords", ",", "1"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"Add", " ", "noise"}], ",", " ", 
            RowBox[{
            "but", " ", "keep", " ", "distance", " ", "matrix", " ", 
             "symmetric"}]}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"distMatrix", "=", 
           RowBox[{"distMatrix", "+", 
            RowBox[{"RandomReal", "[", 
             RowBox[{
              RowBox[{"\[Sigma]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "1"}], ",", "1"}], "}"}]}], ",", 
              RowBox[{"{", 
               RowBox[{"n", ",", "n"}], "}"}]}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"distMatrix", "=", 
           RowBox[{
            FractionBox["1", "2"], 
            RowBox[{"(", 
             RowBox[{"distMatrix", "+", 
              RowBox[{"Transpose", "@", "distMatrix"}]}], ")"}]}]}]}], ",", 
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Antibody", "-", 
           RowBox[{"virus", " ", "distance"}]}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"m", ",", "n"}], "}"}], "=", "numEntries"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"coords", "=", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"coordsVirus", ",", "coordsAb"}], "}"}], "=", 
            RowBox[{
             RowBox[{
              RowBox[{"RandomReal", "[", 
               RowBox[{
                RowBox[{
                 FractionBox["1", "2"], 
                 RowBox[{"OptionValue", "[", "\"\<Range\>\"", "]"}], 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"-", "1"}], ",", "1"}], "}"}]}], ",", 
                RowBox[{"{", 
                 RowBox[{"#", ",", "2"}], "}"}]}], "]"}], "&"}], "/@", 
             RowBox[{"{", 
              RowBox[{"m", ",", "n"}], "}"}]}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"distMatrix", "=", 
           RowBox[{"Outer", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Sqrt", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"#1", "-", "#2"}], ")"}], ".", 
                RowBox[{"(", 
                 RowBox[{"#1", "-", "#2"}], ")"}]}], "]"}], "&"}], ",", 
             "coordsVirus", ",", "coordsAb", ",", "1"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Add", " ", "noise"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"distMatrix", "=", 
           RowBox[{"distMatrix", "+", 
            RowBox[{"RandomReal", "[", 
             RowBox[{
              RowBox[{"\[Sigma]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "1"}], ",", "1"}], "}"}]}], ",", 
              RowBox[{"{", 
               RowBox[{"m", ",", "n"}], "}"}]}], "]"}]}]}]}]}], 
        "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"Withhold", " ", "values"}], ",", " ", 
         RowBox[{"labeling", " ", "them", " ", "as", " ", "Missing"}]}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"fracMissing", "==", "0."}], ",", "\[IndentingNewLine]", 
         RowBox[{"posWithheld", "=", 
          RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"minEntries", "===", "0"}], ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{
               RowBox[{
               "Randomly", " ", "select", " ", "entries", " ", "to", " ", 
                "withhold"}], " ", "-", " ", 
               RowBox[{"for", " ", 
                RowBox[{"large", " ", "'"}], 
                RowBox[{"fracMissing", "'"}], " ", "this", " ", "may", " ", 
                "lead", " ", "to", " ", 
                RowBox[{"rows", "/", "columns"}], " ", "with"}]}], " ", 
              "\[LessEqual]", 
              RowBox[{"1", " ", "measurements"}]}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"posMeasured", "=", 
              RowBox[{"Position", "[", 
               RowBox[{"distMatrix", ",", 
                RowBox[{"Except", "[", "0.", "]"}], ",", 
                RowBox[{"{", "2", "}"}], ",", 
                RowBox[{"Heads", "\[Rule]", "False"}]}], "]"}]}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"posWithheld", "=", 
              RowBox[{"RandomSample", "[", 
               RowBox[{"posMeasured", ",", 
                RowBox[{"Round", "[", 
                 RowBox[{"fracMissing", " ", 
                  RowBox[{"Length", "@", "posMeasured"}]}], "]"}]}], 
               "]"}]}]}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
            RowBox[{"If", "[", 
             RowBox[{"cityCityQ", ",", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
                RowBox[{"City", "-", 
                 RowBox[{"city", " ", 
                  RowBox[{"embedding", ":", " ", 
                   RowBox[{"Ensure", " ", "there", " ", "are", " ", "at", " ", 
                    RowBox[{"least", " ", "'"}], 
                    RowBox[{"minEntries", "'"}], " ", "measured", " ", 
                    "entires", " ", "in", " ", "each", " ", "row"}]}]}]}], 
                ",", " ", 
                RowBox[{
                "ignoring", " ", "the", " ", "zero", " ", "diagonals"}]}], 
               " ", "*)"}], "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"Echo", "[", 
                RowBox[{"\"\<Not implemented\>\"", ",", "\"\<Error!\>\""}], 
                "]"}], ";", 
               RowBox[{"Return", "[", "$Failed", "]"}]}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{"Antibody", "-", 
                RowBox[{"virus", " ", 
                 RowBox[{"embedding", ":", " ", 
                  RowBox[{"Ensure", " ", "there", " ", "are", " ", "at", " ", 
                   RowBox[{"least", " ", "'"}], 
                   RowBox[{"minEntries", "'"}], " ", "measured", " ", 
                   "entries", " ", "in", " ", "each", " ", "row", " ", "and", 
                   " ", "column"}]}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"minEntries", " ", 
                   RowBox[{"Max", "[", 
                    RowBox[{"m", " ", ",", "n"}], "]"}]}], ">", 
                  RowBox[{"m", " ", "n", 
                   RowBox[{"(", 
                    RowBox[{"1.", "-", "fracMissing"}], ")"}]}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"Echo", "[", 
                   RowBox[{
                   "\"\<MinEntriesRowCol is impossible given the large \
FractionMissing\>\"", ",", "\"\<Error!\>\""}], "]"}], ";", 
                  RowBox[{"Return", "[", 
                   RowBox[{"{", 
                    RowBox[{"$Failed", ",", "$Failed"}], "}"}], "]"}]}]}], 
                "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                 RowBox[{
                 "Build", " ", "up", " ", "the", " ", "observed", " ", 
                  "entries"}], ",", " ", 
                 RowBox[{"starting", " ", 
                  RowBox[{"with", " ", "'"}], 
                  RowBox[{"minEntries", "'"}], " ", "measurements", " ", "in",
                   " ", "each", " ", 
                  RowBox[{"row", "/", "col"}], " ", "and", " ", "then", " ", 
                  "random", " ", "sampling"}]}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"posMeasured", "=", 
                RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"While", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Length", "@", "posMeasured"}], "=!=", 
                  RowBox[{"minEntries", " ", 
                   RowBox[{"Max", "[", 
                    RowBox[{"m", " ", ",", "n"}], "]"}]}]}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{
                  RowBox[{"indices", "=", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"RandomSample", "[", 
                    RowBox[{"Join", "@@", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    RowBox[{"Range", "@", "m"}], ",", "2"}], "]"}]}], "]"}], 
                    ",", 
                    RowBox[{"RandomSample", "[", 
                    RowBox[{"Join", "@@", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    RowBox[{"Range", "@", "n"}], ",", "2"}], "]"}]}], "]"}]}],
                     "}"}]}], ";", "\[IndentingNewLine]", 
                  RowBox[{"(*", " ", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"If", " ", "m"}], "!=", "n"}], ",", " ", 
                    RowBox[{
                    "account", " ", "for", " ", "the", " ", "difference", " ",
                     "in", " ", "dimensions", " ", "for", " ", "the", " ", 
                    RowBox[{"initial", " ", "'"}], 
                    RowBox[{"minEntries", "'"}], " ", "measurements"}]}], " ",
                    "*)"}], "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Length", "@", 
                    RowBox[{"First", "@", "indices"}]}], "<", 
                    RowBox[{"Length", "@", 
                    RowBox[{"Last", "@", "indices"}]}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"indices", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"indices", "[", 
                    RowBox[{"[", "1", "]"}], "]"}], ",", 
                    RowBox[{"RandomChoice", "[", 
                    RowBox[{
                    RowBox[{"Range", "@", "m"}], ",", 
                    RowBox[{
                    RowBox[{"Length", "@", 
                    RowBox[{"Last", "@", "indices"}]}], "-", 
                    RowBox[{"Length", "@", 
                    RowBox[{"First", "@", "indices"}]}]}]}], "]"}]}], 
                    "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"If", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"Length", "@", 
                    RowBox[{"First", "@", "indices"}]}], ">", 
                    RowBox[{"Length", "@", 
                    RowBox[{"Last", "@", "indices"}]}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"indices", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"indices", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"RandomChoice", "[", 
                    RowBox[{
                    RowBox[{"Range", "@", "n"}], ",", 
                    RowBox[{
                    RowBox[{"Length", "@", 
                    RowBox[{"First", "@", "indices"}]}], "-", 
                    RowBox[{"Length", "@", 
                    RowBox[{"Last", "@", "indices"}]}]}]}], "]"}]}], 
                    "]"}]}]}], "\[IndentingNewLine]", "]"}], ";", 
                  "\[IndentingNewLine]", 
                  RowBox[{"posMeasured", "=", 
                   RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Transpose", "@", "indices"}], "]"}]}]}]}], 
                "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                "List", " ", "of", " ", "distance", " ", "matrix", " ", 
                 "measurements", " ", "to", " ", "potentially", " ", "add"}], 
                " ", "*)"}], "\[IndentingNewLine]", 
               RowBox[{"posWithheld", "=", 
                RowBox[{"Complement", "[", 
                 RowBox[{
                  RowBox[{"Tuples", "[", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Range", "@", "m"}], ",", 
                    RowBox[{"Range", "@", "n"}]}], "}"}], "]"}], ",", 
                  "posMeasured"}], "]"}]}], ";", "\[IndentingNewLine]", 
               RowBox[{"posMeasured", "=", 
                RowBox[{"Join", "[", 
                 RowBox[{"posMeasured", ",", 
                  RowBox[{"Table", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"entry", "=", 
                    RowBox[{"RandomChoice", "[", "posWithheld", "]"}]}], ";", 
                    "\[IndentingNewLine]", 
                    RowBox[{"posWithheld", "=", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{"posWithheld", ",", "entry"}], "]"}]}], ";", 
                    "\[IndentingNewLine]", "entry"}], "\[IndentingNewLine]", 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Round", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "-", "fracMissing"}], ")"}], "m", " ", "n"}],
                     "]"}], "-", 
                    RowBox[{"Length", "@", "posMeasured"}]}], "}"}]}], 
                   "]"}]}], "]"}]}]}]}], "\[IndentingNewLine]", "]"}]}], 
           "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "Check", " ", "that", " ", "there", " ", "are", " ", "at", " ", 
             RowBox[{"least", " ", "'"}], 
             RowBox[{"minEntries", "'"}], " ", "values", " ", "in", " ", 
             "each", " ", 
             RowBox[{"row", "/", 
              RowBox[{"column", ".", " ", 
               RowBox[{"Note", ":", " ", 
                RowBox[{
                "This", " ", "should", " ", "never", " ", "trigger"}]}]}]}]}],
             ",", " ", 
            RowBox[{"by", " ", "construction"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Min", "[", 
              RowBox[{
               RowBox[{"n", "-", 
                RowBox[{
                 RowBox[{"ReverseSortBy", "[", 
                  RowBox[{
                   RowBox[{"Tally", "[", 
                    RowBox[{"First", "/@", "posWithheld"}], "]"}], ",", 
                   "Last"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ",", 
                   RowBox[{"-", "1"}]}], "]"}], "]"}]}], ",", 
               RowBox[{"m", "-", 
                RowBox[{
                 RowBox[{"ReverseSortBy", "[", 
                  RowBox[{
                   RowBox[{"Tally", "[", 
                    RowBox[{"Last", "/@", "posWithheld"}], "]"}], ",", 
                   "Last"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{"1", ",", 
                   RowBox[{"-", "1"}]}], "]"}], "]"}]}]}], "]"}], "<", 
             "minEntries"}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Echo", "[", "posWithheld", "]"}], ";", 
             "\[IndentingNewLine]", 
             RowBox[{"Echo", "[", 
              RowBox[{
              "\"\<Fewer than minEntries in a row/col\>\"", ",", 
               "\"\<Error!\>\""}], "]"}], ";", "\[IndentingNewLine]", 
             RowBox[{"Return", "[", 
              RowBox[{"{", 
               RowBox[{"$Failed", ",", "$Failed"}], "}"}], "]"}]}]}], 
           "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}], 
       ";", "\[IndentingNewLine]", 
       RowBox[{"distMatrix", "=", 
        RowBox[{"ReplacePart", "[", 
         RowBox[{"distMatrix", ",", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{"cityCityQ", ",", 
             RowBox[{"Join", "[", 
              RowBox[{"posWithheld", ",", 
               RowBox[{"Reverse", "/@", "posWithheld"}]}], "]"}], ",", 
             "posWithheld"}], "]"}], "\[Rule]", 
           RowBox[{"Missing", "[", "]"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"Non", "-", 
          RowBox[{"Missing", " ", "are", " ", "sorted"}]}], ",", " ", 
         RowBox[{"and", " ", "the", " ", 
          RowBox[{"largest", " ", "'"}], 
          RowBox[{"fracGreaterThan", "'"}], " ", "and", " ", 
          RowBox[{"smallest", " ", "'"}], 
          RowBox[{"fracLessThan", "'"}], " ", "will", " ", "be", " ", 
          "represented", " ", "as", " ", "GreaterThan", " ", "and", " ", 
          "LessThan", " ", "values"}]}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"thresholdSmall", ",", "thresholdLarge"}], "}"}], "=", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", 
            RowBox[{"Round", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"fracLessThan", ",", 
                RowBox[{"1", "-", "fracGreaterThan"}]}], "}"}], 
              RowBox[{"Length", "@", "#"}]}], "]"}], "]"}], "]"}], "&"}], "[", 
         RowBox[{"Sort", "@", 
          RowBox[{"DeleteMissing", "@", 
           RowBox[{"Flatten", "@", "distMatrix"}]}]}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"distMatrix", "=", 
        RowBox[{"distMatrix", "/.", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"val_Real", "/;", 
             RowBox[{"val", "<", "thresholdSmall"}]}], "\[RuleDelayed]", 
            RowBox[{"LessThan", "[", "thresholdSmall", "]"}]}], ",", 
           RowBox[{
            RowBox[{"val_Real", "/;", 
             RowBox[{"val", ">", "thresholdLarge"}]}], "\[RuleDelayed]", 
            RowBox[{"GreaterThan", "[", "thresholdLarge", "]"}]}]}], 
          "}"}]}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", "Return", " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"coords", ",", "distMatrix"}], "}"}]}]}], 
     "\[IndentingNewLine]", "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.848679825376847*^9, 3.848679904455827*^9}, 
   3.848681029731228*^9, {3.8486952892979174`*^9, 3.8486953145186396`*^9}, 
   3.8486953835494003`*^9, 3.8486954882195735`*^9, {3.8486955537619934`*^9, 
   3.8486956006624575`*^9}, {3.8486956328796773`*^9, 3.848695651403144*^9}, 
   3.8486957502673073`*^9, {3.848965472759142*^9, 3.848965490308525*^9}, {
   3.8489655243597956`*^9, 3.848965708493078*^9}, {3.8489658046429787`*^9, 
   3.848965809082955*^9}, {3.8489710831397395`*^9, 3.848971117392863*^9}, {
   3.8489711799848347`*^9, 3.848971355218812*^9}, {3.8489737482695055`*^9, 
   3.8489737570223827`*^9}, {3.8489738694320345`*^9, 3.848973888110882*^9}, 
   3.848973920839265*^9, {3.848974251243983*^9, 3.848974251447068*^9}, {
   3.8523121831446466`*^9, 3.852312198134719*^9}, {3.852312231666889*^9, 
   3.852312296047936*^9}, {3.852312356370113*^9, 3.852312396292631*^9}, 
   3.852312506348036*^9, {3.8523127400682254`*^9, 3.8523128529633675`*^9}, {
   3.8523128959825544`*^9, 3.8523129909525633`*^9}, {3.8523131013336964`*^9, 
   3.852313242865471*^9}, {3.852317218941901*^9, 3.852317234764974*^9}, {
   3.8523901585001574`*^9, 3.852390206923238*^9}, {3.8525765538249893`*^9, 
   3.852576589508591*^9}, {3.8525766382876034`*^9, 3.8525766408730893`*^9}, {
   3.8567909648344707`*^9, 3.85679098265948*^9}, 3.8567911174511356`*^9, {
   3.8567916778065834`*^9, 3.8567917309471507`*^9}, {3.856791785568364*^9, 
   3.8567917940988026`*^9}, {3.856791861386375*^9, 3.85679196622379*^9}, {
   3.8567921550161967`*^9, 3.856792243404274*^9}, {3.8567923319461107`*^9, 
   3.8567923985934362`*^9}, {3.8567926658917665`*^9, 
   3.8567926817724648`*^9}, {3.8567927151034513`*^9, 
   3.8567927190322695`*^9}, {3.856792775789142*^9, 3.8567927789570203`*^9}, {
   3.856792896658767*^9, 3.8567929068587065`*^9}, {3.856792965512061*^9, 
   3.8567930257443795`*^9}, {3.856793126558835*^9, 3.856793185357557*^9}, {
   3.8567932220866165`*^9, 3.856793229319828*^9}, {3.8567932776611223`*^9, 
   3.856793343376774*^9}, {3.8567933754897614`*^9, 3.8567934293421097`*^9}, {
   3.856793545546936*^9, 3.856793559642099*^9}, 3.8567936019399776`*^9, {
   3.856793651809636*^9, 3.856793681645774*^9}, {3.856793778304226*^9, 
   3.8567937910561523`*^9}, {3.8567939192792172`*^9, 3.856793929128394*^9}, {
   3.8567940424693265`*^9, 3.856794072844932*^9}, {3.8567941060296483`*^9, 
   3.8567941316424675`*^9}, {3.856794177479119*^9, 3.856794182488584*^9}, {
   3.856794212764244*^9, 3.85679422284613*^9}, {3.8567942614029036`*^9, 
   3.856794335974187*^9}, {3.8567943724620876`*^9, 3.8567943971417418`*^9}, {
   3.856794456272875*^9, 3.856794458141559*^9}, {3.8567945259696813`*^9, 
   3.8567946056214533`*^9}, 3.8567947126890264`*^9, {3.856823108283427*^9, 
   3.8568231164087286`*^9}, {3.8568233750656767`*^9, 3.856823388331091*^9}, {
   3.8568236914264855`*^9, 3.8568237765733685`*^9}, {3.8568238275488815`*^9, 
   3.856823829036893*^9}, {3.856823864557627*^9, 3.8568238697744656`*^9}, {
   3.85682396595076*^9, 3.8568239730104055`*^9}, {3.8568241323822393`*^9, 
   3.856824185491353*^9}, {3.856824235142658*^9, 3.856824236331262*^9}, {
   3.8568244130626807`*^9, 3.8568245008540244`*^9}, {3.8568246434386845`*^9, 
   3.8568246909750185`*^9}, {3.856824921152135*^9, 3.856825029611278*^9}, {
   3.8568251307833624`*^9, 3.8568251398952017`*^9}, {3.856825194940707*^9, 
   3.856825290706637*^9}, {3.8568253355942388`*^9, 3.8568253604979777`*^9}, {
   3.8568254118981256`*^9, 3.856825427529814*^9}, {3.856825525318195*^9, 
   3.8568256409643555`*^9}, {3.856826001502818*^9, 3.8568260479848714`*^9}, {
   3.8568260809116*^9, 3.8568260908618574`*^9}, {3.8568261586554165`*^9, 
   3.8568261599195037`*^9}, {3.856826250453801*^9, 3.8568262592822022`*^9}, {
   3.8568264208237586`*^9, 3.8568264229657836`*^9}, {3.8568264544753404`*^9, 
   3.8568265130260987`*^9}, 3.8568265454630566`*^9, {3.858004448482971*^9, 
   3.858004465845519*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"a265cdc0-52f3-43ae-ba8a-62a365d46732"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Compare", " ", "true", " ", "coordinates", " ", "to", " ", "the", " ", 
    "MDS", " ", "results"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "analyzeMDS", "]"}], "=", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<ShowLegend\>\"", "\[Rule]", "True"}], ",", 
         RowBox[{"\"\<PlotLabelSize\>\"", "->", "12"}], ",", 
         RowBox[{"\"\<LegendLabel\>\"", "\[Rule]", "\"\<MDS\>\""}], ",", 
         RowBox[{"\"\<PlotMarkerSize\>\"", "->", "0.04"}], ",", 
         RowBox[{"\"\<AddToPlotLabel\>\"", "\[Rule]", "\"\<\>\""}], ",", 
         RowBox[{"PlotStyle", "->", "Automatic"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "170"}], ",", 
         RowBox[{"\"\<DistanceMatrix\>\"", "->", "None"}], ",", 
         RowBox[{"\"\<ShowAdjacencyGraph\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<ConnectNumericToActual\>\"", "->", "False"}], ",", 
         RowBox[{"\"\<Ignore\>\"", "->", 
          RowBox[{"{", "}"}]}], ",", 
         RowBox[{"PlotRange", "->", "Automatic"}], ",", 
         RowBox[{"\"\<ErrorLabel\>\"", "->", "\"\<Error\>\""}], ",", 
         RowBox[{"\"\<OverrideLabel\>\"", "->", "False"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Add", " ", "default", " ", "option", " ", "values", " ", "from", " ",
          "errorMDS"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"FilterRules", "[", 
        RowBox[{
         RowBox[{"Options", "[", "errorMDS", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"\"\<Comparing\>\"", ",", "\"\<PenalizeError\>\""}], 
          "}"}]}], "]"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"analyzeMDS", "[", 
      RowBox[{"coordsActual_", ",", "coordsNumeric_", ",", 
       RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "/;", 
     RowBox[{"coordsActual", "=!=", "None"}]}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"overrideLabel", "=", 
         RowBox[{"OptionValue", "[", "\"\<OverrideLabel\>\"", "]"}]}], ",", 
        RowBox[{"plotStyle", "=", 
         RowBox[{"OptionValue", "[", "PlotStyle", "]"}]}], ",", 
        RowBox[{"markerSize", "=", 
         RowBox[{"OptionValue", "[", "\"\<PlotMarkerSize\>\"", "]"}]}], ",", 
        RowBox[{"plotLabel", "=", 
         RowBox[{"OptionValue", "[", "\"\<AddToPlotLabel\>\"", "]"}]}], ",", 
        RowBox[{"connectQ", "=", 
         RowBox[{
         "OptionValue", "[", "\"\<ConnectNumericToActual\>\"", "]"}]}], ",", 
        RowBox[{"adjacencyQ", "=", 
         RowBox[{"OptionValue", "[", "\"\<ShowAdjacencyGraph\>\"", "]"}]}], 
        ",", 
        RowBox[{"plotRange", "=", 
         RowBox[{"OptionValue", "[", "PlotRange", "]"}]}], ",", 
        RowBox[{"distMatrix", "=", 
         RowBox[{"OptionValue", "[", "\"\<DistanceMatrix\>\"", "]"}]}], ",", 
        "coordsNumericTransformed", ",", "level", ",", "join", ",", "label", 
        ",", "posMissing"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"FailureQ", "[", "coordsNumeric", "]"}], "||", 
          RowBox[{
           RowBox[{"Length", "@", "coordsActual"}], "=!=", 
           RowBox[{"Length", "@", "coordsNumeric"}]}], "||", 
          RowBox[{
           RowBox[{"Length", "/@", "coordsActual"}], "=!=", 
           RowBox[{"Length", "/@", "coordsNumeric"}]}]}], ",", 
         RowBox[{
          RowBox[{"Echo", "[", 
           RowBox[{
           "\"\<Actual and numeric coordinates are not the same length\>\"", 
            ",", "\"\<Error!\>\""}], "]"}], ";", 
          RowBox[{"Return", "[", "$Failed", "]"}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"plotStyle", "===", "Automatic"}], ",", 
         RowBox[{"plotStyle", "=", 
          RowBox[{"Lighter", "/@", 
           RowBox[{
            RowBox[{"ColorData", "[", "97", "]"}], "/@", 
            RowBox[{"Range", "@", "2"}]}]}]}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"MatchQ", "[", 
          RowBox[{
           RowBox[{"Dimensions", "/@", "coordsActual"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", "2", "}"}], ".."}], "}"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"level", "=", "1"}], ";", "\[IndentingNewLine]", 
          RowBox[{"join", "=", "List"}], ";", "\[IndentingNewLine]", 
          RowBox[{"label", "=", "\"\<\>\""}]}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"level", "=", "2"}], ";", "\[IndentingNewLine]", 
          RowBox[{"join", "=", "Join"}], ";", "\[IndentingNewLine]", 
          RowBox[{"label", "=", "\"\<Virus\>\""}]}]}], "\[IndentingNewLine]", 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Apply", " ", "a", " ", "rigid", " ", "transform", " ", "to", " ", 
         "align", " ", "the", " ", "MDS", " ", "results", " ", "as", " ", 
         "closely", " ", "as", " ", "possible", " ", "to", " ", "the", " ", 
         "true", " ", "solution"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"coordsNumericTransformed", "=", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{"transform", "[", 
           RowBox[{
            RowBox[{"join", "@@", 
             RowBox[{"Delete", "[", 
              RowBox[{"coordsActual", ",", 
               RowBox[{"OptionValue", "[", "\"\<Ignore\>\"", "]"}]}], "]"}]}],
             ",", 
            RowBox[{"join", "@@", 
             RowBox[{"Delete", "[", 
              RowBox[{"coordsNumeric", ",", 
               RowBox[{"OptionValue", "[", "\"\<Ignore\>\"", "]"}]}], 
              "]"}]}]}], "]"}], ",", "coordsNumeric", ",", 
          RowBox[{"{", "level", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{
        "plotRange", ",", "\[IndentingNewLine]", "Automatic", ",", 
         "\[IndentingNewLine]", 
         RowBox[{"plotRange", "=", 
          RowBox[{"1.1", 
           RowBox[{"Max", "@", 
            RowBox[{"Abs", "@", 
             RowBox[{"Join", "[", 
              RowBox[{"coordsActual", ",", "coordsNumericTransformed"}], 
              "]"}]}]}], 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}]}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"_", ",", "_"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"plotRange", "=", 
          RowBox[{"{", 
           RowBox[{"plotRange", ",", "plotRange"}], "}"}]}], ",", 
         "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
         "plotRange"}], "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Show", "[", 
        RowBox[{
         RowBox[{"ListPlot", "[", 
          RowBox[{
           RowBox[{"coordsActual", "[", 
            RowBox[{"[", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"level", "\[Equal]", "2"}], ",", "1", ",", "All"}], 
              "]"}], "]"}], "]"}], ",", 
           RowBox[{"PlotMarkers", "\[Rule]", 
            RowBox[{"plotMarker", "[", "markerSize", "]"}]}], ",", 
           RowBox[{"PlotRange", "\[Rule]", "plotRange"}], ",", 
           RowBox[{"AspectRatio", "\[Rule]", "1"}], ",", 
           RowBox[{"ImageSize", "\[Rule]", 
            RowBox[{"OptionValue", "[", "ImageSize", "]"}]}], ",", 
           RowBox[{"PlotLabel", "\[Rule]", 
            RowBox[{"font", "[", 
             RowBox[{
              RowBox[{"Row", "[", 
               RowBox[{"{", 
                RowBox[{"plotLabel", ",", 
                 RowBox[{"OptionValue", "[", "\"\<ErrorLabel\>\"", "]"}], 
                 ",", "\"\<=\>\"", ",", 
                 RowBox[{"ToString", "@", 
                  RowBox[{"format", "[", 
                   RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"distMatrix", "=!=", "None"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    "Error", " ", "measured", " ", "against", " ", "distance",
                     " ", "matrix"}], " ", "*)"}], "\[IndentingNewLine]", 
                    RowBox[{"errorMDS", "[", 
                    RowBox[{"coordsNumeric", ",", "distMatrix", ",", 
                    RowBox[{"\"\<Comparing\>\"", "->", 
                    RowBox[{"OptionValue", "[", "\"\<Comparing\>\"", "]"}]}], 
                    ",", 
                    RowBox[{"\"\<PenalizeError\>\"", "->", 
                    RowBox[{
                    "OptionValue", "[", "\"\<PenalizeError\>\"", "]"}]}]}], 
                    "]"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"(*", " ", 
                    RowBox[{
                    "Error", " ", "given", " ", "by", " ", "the", " ", "mean",
                     " ", "distance", " ", "between", " ", "the", " ", 
                    "actual", " ", "coordinates", " ", "and", " ", 
                    "numerical", " ", "coordinates"}], " ", "*)"}], 
                    "\[IndentingNewLine]", 
                    RowBox[{"errorActualCoords", "[", 
                    RowBox[{
                    "coordsNumericTransformed", ",", "coordsActual", ",", 
                    RowBox[{"\"\<Comparing\>\"", "\[Rule]", 
                    RowBox[{"OptionValue", "[", "\"\<Comparing\>\"", "]"}]}], 
                    ",", 
                    RowBox[{"\"\<PenalizeError\>\"", "\[Rule]", 
                    RowBox[{
                    "OptionValue", "[", "\"\<PenalizeError\>\"", "]"}]}]}], 
                    "]"}]}], "\[IndentingNewLine]", "]"}], ",", "2"}], 
                   "]"}]}]}], "}"}], "]"}], ",", 
              RowBox[{"OptionValue", "[", "\"\<PlotLabelSize\>\"", "]"}]}], 
             "]"}]}], ",", 
           RowBox[{"PlotLegends", "\[Rule]", 
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"OptionValue", "[", "\"\<ShowLegend\>\"", "]"}], ",", 
              RowBox[{"PointLegend", "[", 
               RowBox[{"plotStyle", ",", 
                RowBox[{"font", "/@", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"overrideLabel", "=!=", "False"}], ",", 
                   RowBox[{"overrideLabel", "[", 
                    RowBox[{"[", 
                    RowBox[{";;", "2"}], "]"}], "]"}], ",", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"label", "<>", "\"\< (Ground Truth)\>\""}], ",", 
                    RowBox[{"label", "<>", "\"\< (Numerical)\>\""}]}], 
                    "}"}]}], "]"}]}], ",", 
                RowBox[{"LegendMarkers", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"plotMarker", "[", "markerSize", "]"}], ",", 
                   RowBox[{"plotMarker", "[", 
                    RowBox[{"0.7", " ", "markerSize"}], "]"}]}], "}"}]}]}], 
               "]"}], ",", "None"}], "]"}]}], ",", 
           RowBox[{"PlotStyle", "\[Rule]", 
            RowBox[{"First", "@", "plotStyle"}]}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"level", "==", "2"}], ",", 
           RowBox[{"ListPlot", "[", 
            RowBox[{
             RowBox[{"coordsActual", "[", 
              RowBox[{"[", "2", "]"}], "]"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"First", "@", "plotStyle"}]}], ",", 
             RowBox[{"PlotMarkers", "\[Rule]", 
              RowBox[{"plotMarker", "[", 
               RowBox[{
                RowBox[{"1.125", "markerSize"}], ",", 
                RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<Square\>\""}]}], 
               "]"}]}]}], "]"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"ListPlot", "[", 
          RowBox[{
           RowBox[{"coordsNumericTransformed", "[", 
            RowBox[{"[", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"level", "\[Equal]", "2"}], ",", "1", ",", "All"}], 
              "]"}], "]"}], "]"}], ",", 
           RowBox[{"PlotStyle", "\[Rule]", 
            RowBox[{"Last", "@", "plotStyle"}]}], ",", 
           RowBox[{"PlotMarkers", "\[Rule]", 
            RowBox[{"plotMarker", "[", 
             RowBox[{"0.7", "markerSize"}], 
             RowBox[{"(*", 
              RowBox[{",", 
               RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<Square\>\""}]}], 
              "*)"}], "]"}]}]}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"level", "\[Equal]", "2"}], ",", 
           RowBox[{"ListPlot", "[", 
            RowBox[{
             RowBox[{"coordsNumericTransformed", "[", 
              RowBox[{"[", "2", "]"}], "]"}], ",", 
             RowBox[{"PlotStyle", "\[Rule]", 
              RowBox[{"Last", "@", "plotStyle"}]}], ",", 
             RowBox[{"PlotMarkers", "\[Rule]", 
              RowBox[{"plotMarker", "[", 
               RowBox[{
                RowBox[{"0.7", " ", "1.125", "markerSize"}], ",", 
                RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<Square\>\""}]}], 
               "]"}]}], ",", 
             RowBox[{"PlotLegends", "\[Rule]", 
              RowBox[{"If", "[", 
               RowBox[{
                RowBox[{"OptionValue", "[", "\"\<ShowLegend\>\"", "]"}], ",", 
                RowBox[{"PointLegend", "[", 
                 RowBox[{"plotStyle", ",", 
                  RowBox[{"font", "/@", 
                   RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"overrideLabel", "=!=", "False"}], ",", 
                    RowBox[{"overrideLabel", "[", 
                    RowBox[{"[", 
                    RowBox[{"3", ";;", "4"}], "]"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Antibody (Ground Truth)\>\"", ",", 
                    "\"\<Antibody (Numerical)\>\""}], "}"}]}], "]"}]}], ",", 
                  RowBox[{"LegendMarkers", "\[Rule]", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"plotMarker", "[", 
                    RowBox[{
                    RowBox[{"0.7", " ", "1.125", "markerSize"}], ",", 
                    RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<Square\>\""}]}], 
                    "]"}], ",", 
                    RowBox[{"plotMarker", "[", 
                    RowBox[{
                    RowBox[{"0.7", "markerSize"}], ",", 
                    RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<Square\>\""}]}], 
                    "]"}]}], "}"}]}]}], "]"}], ",", "None"}], "]"}]}]}], 
            "]"}], ",", 
           RowBox[{"{", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{"connectQ", ",", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"Graphics", "[", 
             RowBox[{"{", 
              RowBox[{"Gray", ",", 
               RowBox[{"Line", "[", 
                RowBox[{"Transpose", "@", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"coordsActual", "[", 
                    RowBox[{"[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"level", "\[Equal]", "2"}], ",", "1", ",", 
                    "All"}], "]"}], "]"}], "]"}], ",", 
                   RowBox[{"coordsNumericTransformed", "[", 
                    RowBox[{"[", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"level", "\[Equal]", "2"}], ",", "1", ",", 
                    "All"}], "]"}], "]"}], "]"}]}], "}"}]}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"level", "==", "2"}], ",", "\[IndentingNewLine]", 
                 RowBox[{"Line", "[", 
                  RowBox[{"Transpose", "@", 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"coordsActual", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], ",", 
                    RowBox[{"coordsNumericTransformed", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "}"}]}], "]"}], ",", 
                 "\[IndentingNewLine]", 
                 RowBox[{"{", "}"}]}], "\[IndentingNewLine]", "]"}]}], 
              "\[IndentingNewLine]", "}"}], "]"}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", "}"}]}], "\[IndentingNewLine]", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"adjacencyQ", "&&", 
            RowBox[{"distMatrix", "=!=", "None"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"posMissing", "=", 
             RowBox[{"Position", "[", 
              RowBox[{"distMatrix", ",", 
               RowBox[{"Except", "[", "_Missing", "]"}], ",", 
               RowBox[{"{", "2", "}"}], ",", 
               RowBox[{"Heads", "\[Rule]", "False"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"Graphics", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"Opacity", "[", "0.5", "]"}], ",", "Blue", ",", 
                RowBox[{"Line", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"coordsActual", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "]"}], ",", 
                    RowBox[{"coordsActual", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}]}], "}"}], 
                   "&"}], "/@", "posMissing"}], "]"}], ",", "Green", ",", 
                RowBox[{"Line", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"coordsNumericTransformed", "[", 
                    RowBox[{"[", 
                    RowBox[{"1", ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "1", "]"}], "]"}]}], "]"}], "]"}], ",", 
                    RowBox[{"coordsNumericTransformed", "[", 
                    RowBox[{"[", 
                    RowBox[{"2", ",", 
                    RowBox[{"#", "[", 
                    RowBox[{"[", "2", "]"}], "]"}]}], "]"}], "]"}]}], "}"}], 
                   "&"}], "/@", "posMissing"}], "]"}]}], 
               "\[IndentingNewLine]", "}"}], "]"}], "}"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"{", "}"}]}], "\[IndentingNewLine]", "]"}]}], 
        "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "When", " ", "the", " ", "actual", " ", "coordinates", " ", "are", " ", 
     "not", " ", "known"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"analyzeMDS", "[", 
     RowBox[{"None", ",", "coordsNumeric_", ",", 
      RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"plotRange", "=", 
         RowBox[{"OptionValue", "[", "PlotRange", "]"}]}], ",", 
        RowBox[{"plotLabel", "=", 
         RowBox[{"OptionValue", "[", "\"\<AddToPlotLabel\>\"", "]"}]}], ",", 
        "coordsNumericTransformed", ",", "level", ",", "join", ",", "label"}],
        "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"FailureQ", "[", "coordsNumeric", "]"}], "||", 
          RowBox[{
           RowBox[{"OptionValue", "[", "\"\<DistanceMatrix\>\"", "]"}], "===",
            "None"}]}], ",", 
         RowBox[{"Return", "[", "$Failed", "]"}]}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{
        "plotRange", ",", "\[IndentingNewLine]", "Automatic", ",", 
         "\[IndentingNewLine]", 
         RowBox[{"plotRange", "=", 
          RowBox[{"1.1", 
           RowBox[{"Max", "@", 
            RowBox[{"Abs", "@", "coordsNumeric"}]}]}]}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"_", ",", "_"}], "}"}], ",", "\[IndentingNewLine]", 
         RowBox[{"plotRange", "=", 
          RowBox[{"{", 
           RowBox[{"plotRange", ",", "plotRange"}], "}"}]}], ",", 
         "\[IndentingNewLine]", "_", ",", "\[IndentingNewLine]", 
         "plotRange"}], "\[IndentingNewLine]", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"ListPlot", "[", 
        RowBox[{"coordsNumeric", ",", 
         RowBox[{"PlotMarkers", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"plotMarker", "[", "]"}], ",", 
            RowBox[{"plotMarker", "[", 
             RowBox[{"0.045", ",", 
              RowBox[{"\"\<Type\>\"", "\[Rule]", "\"\<Square\>\""}]}], 
             "]"}]}], "}"}]}], ",", 
         RowBox[{"PlotRange", "\[Rule]", "plotRange"}], ",", 
         RowBox[{"AspectRatio", "\[Rule]", "1"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", 
          RowBox[{"OptionValue", "[", "ImageSize", "]"}]}], ",", 
         RowBox[{"PlotLabel", "\[Rule]", 
          RowBox[{"font", "[", 
           RowBox[{"Row", "[", 
            RowBox[{"{", 
             RowBox[{"plotLabel", ",", "\"\<Error=\>\"", ",", 
              RowBox[{"ToString", "@", 
               RowBox[{"format", "[", 
                RowBox[{
                 RowBox[{"errorMDS", "[", 
                  RowBox[{"coordsNumeric", ",", 
                   RowBox[{
                   "OptionValue", "[", "\"\<DistanceMatrix\>\"", "]"}], ",", 
                   RowBox[{"\"\<Comparing\>\"", "->", 
                    RowBox[{"OptionValue", "[", "\"\<Comparing\>\"", "]"}]}], 
                   ",", 
                   RowBox[{"\"\<PenalizeError\>\"", "->", 
                    RowBox[{
                    "OptionValue", "[", "\"\<PenalizeError\>\"", "]"}]}]}], 
                  "]"}], ",", "2"}], "]"}]}]}], "}"}], "]"}], "]"}]}], ",", 
         RowBox[{"PlotLegends", "\[Rule]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"OptionValue", "[", "\"\<ShowLegend\>\"", "]"}], ",", 
            RowBox[{"font", "/@", 
             RowBox[{"{", 
              RowBox[{"\"\<Virus\>\"", ",", "\"\<Antibody\>\""}], "}"}]}], 
            ",", "None"}], "]"}]}]}], "]"}]}]}], "\[IndentingNewLine]", 
     "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.8487707807458086`*^9, 3.8487708013394623`*^9}, {
   3.848770843012311*^9, 3.848770859180224*^9}, {3.848937110712016*^9, 
   3.848937111439163*^9}, {3.848937349892858*^9, 3.8489373633356075`*^9}, {
   3.84896582382545*^9, 3.848966195379333*^9}, {3.8489663149225826`*^9, 
   3.848966315533563*^9}, {3.8489664842823267`*^9, 3.8489665137578015`*^9}, {
   3.848971689120243*^9, 3.8489717286425495`*^9}, {3.848971841060687*^9, 
   3.8489718689658623`*^9}, {3.84897194530748*^9, 3.8489719568706713`*^9}, {
   3.8489720036825027`*^9, 3.848972137984423*^9}, {3.848972185158626*^9, 
   3.8489722421102657`*^9}, 3.8489722780639706`*^9, {3.848972429653255*^9, 
   3.8489724648222837`*^9}, {3.8489741303681555`*^9, 3.848974143238717*^9}, {
   3.848974173954787*^9, 3.8489741798176756`*^9}, {3.8489748959913445`*^9, 
   3.848974937269927*^9}, {3.8490120785450363`*^9, 3.8490121276685104`*^9}, {
   3.849012205992242*^9, 3.8490122103167815`*^9}, {3.849012354106056*^9, 
   3.8490123654559107`*^9}, {3.849012408624155*^9, 3.8490124802594743`*^9}, 
   3.849018260708033*^9, 3.8496455595085773`*^9, 3.8496456739406476`*^9, {
   3.8496458103061604`*^9, 3.8496458188065305`*^9}, {3.849790519126986*^9, 
   3.8497905192018185`*^9}, {3.8497906407452602`*^9, 3.8497906743176394`*^9}, 
   3.8497907856306276`*^9, 3.84980339824807*^9, {3.84998785020696*^9, 
   3.849987867204152*^9}, {3.8500618535607853`*^9, 3.8500618596622577`*^9}, {
   3.8502460476919355`*^9, 3.8502460873385477`*^9}, {3.850246195281184*^9, 
   3.8502461991439514`*^9}, {3.850269947448035*^9, 3.8502701611132517`*^9}, {
   3.850270542412195*^9, 3.850270609062335*^9}, {3.8505642638793497`*^9, 
   3.850564287703451*^9}, {3.8505645731949005`*^9, 3.8505645794395866`*^9}, {
   3.852378329888954*^9, 3.8523784124305573`*^9}, {3.8523902192182283`*^9, 
   3.8523902195374527`*^9}, {3.8523924247802134`*^9, 
   3.8523924373925476`*^9}, {3.85316090925097*^9, 3.853160913386509*^9}, {
   3.8531609556434107`*^9, 3.853161049372548*^9}, {3.8531611221921153`*^9, 
   3.8531611502565007`*^9}, {3.853161228505155*^9, 3.853161237368253*^9}, {
   3.8531666836096*^9, 3.853166743853128*^9}, {3.853166955732767*^9, 
   3.853166971999262*^9}, {3.8531670472674456`*^9, 3.853167053427901*^9}, {
   3.85316712460306*^9, 3.8531671309518876`*^9}, {3.853769893761684*^9, 
   3.853769945079101*^9}, {3.8537701121850853`*^9, 3.8537701618710613`*^9}, {
   3.8537702069632845`*^9, 3.853770214495294*^9}, {3.8574282368817515`*^9, 
   3.8574284075229588`*^9}, {3.857428518519579*^9, 3.8574285274226136`*^9}, {
   3.8574286604779434`*^9, 3.857428685596058*^9}, {3.857428720906701*^9, 
   3.857428726153842*^9}, {3.8574287571064796`*^9, 3.857428803532173*^9}, {
   3.8574288858312197`*^9, 3.857429010042071*^9}, {3.8579995214306903`*^9, 
   3.8579996244016523`*^9}, {3.857999844217393*^9, 3.857999861438202*^9}, {
   3.857999904497736*^9, 3.8579999350650234`*^9}, {3.8579999701529503`*^9, 
   3.858000013511622*^9}, {3.858000289060144*^9, 3.858000342217148*^9}, {
   3.858000421872754*^9, 3.8580004552173615`*^9}, 3.8580004929462614`*^9, {
   3.8586034809204006`*^9, 3.858603567659549*^9}, {3.8586036532122273`*^9, 
   3.8586037021961784`*^9}, {3.858638383698089*^9, 3.858638383848796*^9}, {
   3.859484172650067*^9, 3.8594841886527042`*^9}, {3.859484317151764*^9, 
   3.8594843805083*^9}, 3.8595732991889577`*^9, 3.8595733957316647`*^9, {
   3.859573461925923*^9, 3.859573463343116*^9}, {3.8597547062343197`*^9, 
   3.8597547237298555`*^9}, {3.8598048573611813`*^9, 3.8598048876139307`*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"33af6ae7-85c5-4966-91ba-f57f19c3f45a"],

Cell["Methods to choose neighbors for local rigid embedding:", "Text",
 CellChangeTimes->{{3.8487654242863264`*^9, 3.8487654284297924`*^9}, {
  3.8487696699520807`*^9, 3.8487696704798875`*^9}, {3.8489756941243706`*^9, 
  3.8489756968189497`*^9}},ExpressionUUID->"49b878e4-35f2-40da-b617-\
a18fdae673e4"],

Cell["\<\
Choose the highly-connected neighbors (ignoring Missing and GreaterThan)\
\>", "Item",
 CellChangeTimes->{{3.8487654306279616`*^9, 3.8487654382139626`*^9}, {
  3.848765655116762*^9, 
  3.848765661211296*^9}},ExpressionUUID->"645f6879-a25e-44c3-8383-\
83f4efd739e7"],

Cell["\<\
Choose the highly-connected neighbors (ignoring Missing only)\
\>", "Item",
 CellChangeTimes->{{3.8487654306279616`*^9, 3.8487654382139626`*^9}, {
  3.848765655116762*^9, 
  3.8487656646652203`*^9}},ExpressionUUID->"24ef79e1-48b9-4c17-b590-\
b969f8bd694a"],

Cell[CellGroupData[{

Cell["\<\
Choose the nearest neighbors (doesn\[CloseCurlyQuote]t seem worthwhile, \
unless there is a benefit from having multiple nodes to \"spread the error\")\
\>", "Item",
 CellChangeTimes->{{3.8487654306279616`*^9, 3.8487654382139626`*^9}, {
  3.848765655116762*^9, 
  3.848765687910133*^9}},ExpressionUUID->"f120bda8-b796-4175-aee8-\
7968fcf7c377"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Choose", " ", "neighbors", " ", "of", " ", "a", " ", "point", " ", "to", 
    " ", "locally", " ", "embed"}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ClearAll", "[", 
    RowBox[{"neighbors", ",", "neighborsVirus", ",", "neighborsAntibody"}], 
    "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "neighbors", "]"}], "=", 
     RowBox[{
      RowBox[{"Options", "[", "neighborsVirus", "]"}], "=", 
      RowBox[{
       RowBox[{"Options", "[", "neighborsAntibody", "]"}], "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<NumNeighbors\>\"", "\[Rule]", "15"}], ",", 
         RowBox[{"Method", "\[Rule]", "\"\<HighlyConnected\>\""}]}], 
        "}"}]}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"neighbors", "[", 
     RowBox[{"index_", ",", "distMatrix_", ",", 
      RowBox[{"opts", ":", 
       RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"numNeighbors", "=", 
        RowBox[{"OptionValue", "[", "\"\<NumNeighbors\>\"", "]"}]}], "}"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"SymmetricMatrixQ", "[", "distMatrix", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Choose", " ", "neighbors", " ", "for", " ", "city"}], "-", 
          RowBox[{"city", " ", "distance"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Note", ":", " ", 
           RowBox[{"For", " ", "simplicity"}]}], ",", " ", 
          RowBox[{
           RowBox[{
           "I", " ", "only", " ", "implemented", " ", "the", " ", "Random", 
            " ", "method", " ", "of", " ", "choosing", " ", "neighbors", " ", 
            "for", " ", "city"}], "-", 
           RowBox[{"city", " ", 
            RowBox[{"distances", ".", " ", "Choosing"}], " ", "the", " ", 
            "most", " ", "highly", " ", "connected", " ", "neighbors", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"as", " ", "for", " ", "the", " ", "antibody"}], "-", 
              RowBox[{"virus", " ", "problem"}]}], ")"}], " ", "may", " ", 
            "yield", " ", "better", " ", "results"}]}], ",", " ", 
          RowBox[{"but", " ", "it", " ", "is", " ", "unnecessary"}]}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"SeedRandom", "[", 
          RowBox[{"12345", "+", "index"}], "]"}], ";", "\[IndentingNewLine]", 
         RowBox[{"RandomSample", "[", 
          RowBox[{
           RowBox[{"DeleteCases", "[", 
            RowBox[{
             RowBox[{"Join", "@@", 
              RowBox[{"Position", "[", 
               RowBox[{
                RowBox[{"distMatrix", "[", 
                 RowBox[{"[", "index", "]"}], "]"}], ",", 
                RowBox[{"Except", "[", "_Missing", "]"}], ",", 
                RowBox[{"{", "1", "}"}], ",", 
                RowBox[{"Heads", "\[Rule]", "False"}]}], "]"}]}], ",", 
             "index"}], "]"}], ",", 
           RowBox[{"UpTo", "[", "numNeighbors", "]"}]}], "]"}]}], ",", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Choose", " ", "neighbors", " ", "for", " ", "antibody"}], 
          "-", 
          RowBox[{"virus", " ", "distance"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"index", "\[LessEqual]", 
           RowBox[{"Length", "@", "distMatrix"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"neighborsVirus", "[", 
           RowBox[{"index", ",", "distMatrix", ",", "opts"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"neighborsAntibody", "[", 
           RowBox[{
            RowBox[{"index", "-", 
             RowBox[{"Length", "@", "distMatrix"}]}], ",", "distMatrix", ",", 
            "opts"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
       "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"neighborsVirus", "[", 
      RowBox[{"index_", ",", "dataCartography_", ",", 
       RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"posAbs", ",", "posViruses", ",", "posDoubleNeighbors"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"posAbs", "=", 
         RowBox[{"Position", "[", 
          RowBox[{
           RowBox[{"dataCartography", "[", 
            RowBox[{"[", "index", "]"}], "]"}], ",", 
           RowBox[{"Except", "[", 
            RowBox[{"_Missing", "|", "_GreaterThan"}], "]"}], ",", 
           RowBox[{"{", "1", "}"}], ",", 
           RowBox[{"Heads", "\[Rule]", "False"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "In", " ", "case", " ", "there", " ", "are", " ", "too", " ", "few",
            " ", "measurements"}], ",", " ", 
          RowBox[{"consider", " ", "GreaterThan", " ", "values"}]}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "@", "posAbs"}], "<", 
           RowBox[{"OptionValue", "[", "\"\<NumNeighbors\>\"", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"posAbs", "=", 
           RowBox[{"Position", "[", 
            RowBox[{
             RowBox[{"dataCartography", "[", 
              RowBox[{"[", "index", "]"}], "]"}], ",", 
             RowBox[{"Except", "[", "_Missing", "]"}], ",", 
             RowBox[{"{", "1", "}"}], ",", 
             RowBox[{"Heads", "\[Rule]", "False"}]}], "]"}]}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Choose", " ", "the", " ", "best"}], "-", 
          RowBox[{
          "connected", " ", "antibodies", " ", "and", " ", "viruses"}]}], " ",
          "*)"}], "\[IndentingNewLine]", 
        RowBox[{"posDoubleNeighbors", "=", 
         RowBox[{"Position", "[", 
          RowBox[{
           RowBox[{"Extract", "[", 
            RowBox[{
             RowBox[{"Transpose", "@", "dataCartography"}], ",", "posAbs"}], 
            "]"}], ",", 
           RowBox[{"Except", "[", 
            RowBox[{"_Missing", "|", "_GreaterThan"}], "]"}], ",", 
           RowBox[{"{", "2", "}"}], ",", 
           RowBox[{"Heads", "\[Rule]", "False"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{"OptionValue", "[", "Method", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"Chose", " ", "the", " ", "most"}], "-", 
            RowBox[{
            "connected", " ", "neighbors", " ", "to", " ", "get", " ", "a", 
             " ", "maximally"}], "-", 
            RowBox[{"rigid", " ", "graph"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", "\"\<HighlyConnected\>\"", ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"posAbs", "=", 
            RowBox[{"Sort", "@", 
             RowBox[{"Flatten", "@", 
              RowBox[{"posAbs", "[", 
               RowBox[{"[", 
                RowBox[{"First", "/@", 
                 RowBox[{
                  RowBox[{"ReverseSortBy", "[", 
                   RowBox[{
                    RowBox[{"Tally", "[", 
                    RowBox[{"First", "/@", "posDoubleNeighbors"}], "]"}], ",",
                     "Last"}], "]"}], "[", 
                  RowBox[{"[", 
                   RowBox[{";;", 
                    RowBox[{"UpTo", "@", 
                    RowBox[{
                    "OptionValue", "[", "\"\<NumNeighbors\>\"", "]"}]}]}], 
                   "]"}], "]"}]}], "]"}], "]"}]}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"posViruses", "=", 
            RowBox[{"Prepend", "[", 
             RowBox[{
              RowBox[{"Sort", "[", 
               RowBox[{"First", "/@", 
                RowBox[{
                 RowBox[{"ReverseSortBy", "[", 
                  RowBox[{
                   RowBox[{"Tally", "[", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Last", "/@", "posDoubleNeighbors"}], ",", 
                    "index"}], "]"}], "]"}], ",", "Last"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{";;", 
                   RowBox[{"UpTo", "@", 
                    RowBox[{
                    "OptionValue", "[", "\"\<NumNeighbors\>\"", "]"}]}]}], 
                  "]"}], "]"}]}], "]"}], ",", "index"}], "]"}]}]}], ",", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Random", " ", "sampling"}], " ", "*)"}], 
          "\[IndentingNewLine]", "\"\<Random\>\"", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"SeedRandom", "[", 
            RowBox[{"12345", "+", "index"}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"posAbs", "=", 
            RowBox[{"Sort", "@", 
             RowBox[{"Flatten", "@", 
              RowBox[{"RandomSample", "[", 
               RowBox[{"posAbs", ",", 
                RowBox[{"UpTo", "@", 
                 RowBox[{
                 "OptionValue", "[", "\"\<NumNeighbors\>\"", "]"}]}]}], 
               "]"}]}]}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"posViruses", "=", 
            RowBox[{"Prepend", "[", 
             RowBox[{
              RowBox[{"Sort", "@", 
               RowBox[{"RandomSample", "[", 
                RowBox[{
                 RowBox[{"Union", "@", 
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{"Last", "/@", "posDoubleNeighbors"}], ",", 
                    "index"}], "]"}]}], ",", 
                 RowBox[{"UpTo", "@", 
                  RowBox[{
                  "OptionValue", "[", "\"\<NumNeighbors\>\"", "]"}]}]}], 
                "]"}]}], ",", "index"}], "]"}]}]}], ",", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Choose", " ", "the", " ", "nearest", " ", "antibodies", " ", "or",
             " ", "viruses"}], " ", "*)"}], "\[IndentingNewLine]", 
          "\"\<Nearest\>\"", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"posAbs", "=", 
            RowBox[{"Intersection", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Ordering", "[", 
                RowBox[{"dataCartography", "[", 
                 RowBox[{"[", "index", "]"}], "]"}], "]"}], "[", 
               RowBox[{"[", 
                RowBox[{";;", 
                 RowBox[{"UpTo", "@", 
                  RowBox[{
                  "OptionValue", "[", "\"\<NumNeighbors\>\"", "]"}]}]}], 
                "]"}], "]"}], ",", 
              RowBox[{"Join", "@@", "posAbs"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"posViruses", "=", 
            RowBox[{"Prepend", "[", 
             RowBox[{
              RowBox[{"Sort", "@", 
               RowBox[{
                RowBox[{"DeleteCases", "[", 
                 RowBox[{
                  RowBox[{"Ordering", "[", 
                   RowBox[{"Min", "/@", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"dataCartography", "[", 
                    RowBox[{"[", 
                    RowBox[{"All", ",", "posAbs"}], "]"}], "]"}], ",", 
                    RowBox[{"_Missing", "|", "_GreaterThan"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], ",", "index"}],
                  "]"}], "[", 
                RowBox[{"[", 
                 RowBox[{";;", 
                  RowBox[{"UpTo", "@", 
                   RowBox[{
                   "OptionValue", "[", "\"\<NumNeighbors\>\"", "]"}]}]}], 
                 "]"}], "]"}]}], ",", "index"}], "]"}]}]}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"posViruses", ",", "posAbs"}], "}"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"neighborsAntibody", "[", 
      RowBox[{"index_", ",", "dataCartography_", ",", 
       RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"posAbs", ",", "posViruses", ",", "posDoubleNeighbors"}], 
        "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"posViruses", "=", 
         RowBox[{"Position", "[", 
          RowBox[{
           RowBox[{"dataCartography", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "index"}], "]"}], "]"}], ",", 
           RowBox[{"Except", "[", 
            RowBox[{"_Missing", "|", "_GreaterThan"}], "]"}], ",", 
           RowBox[{"{", "1", "}"}], ",", 
           RowBox[{"Heads", "\[Rule]", "False"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "In", " ", "case", " ", "there", " ", "are", " ", "too", " ", "few",
            " ", "measurements"}], ",", " ", 
          RowBox[{"consider", " ", "GreaterThan", " ", "values"}]}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "@", "posViruses"}], "<", 
           RowBox[{"OptionValue", "[", "\"\<NumNeighbors\>\"", "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"posViruses", "=", 
           RowBox[{"Position", "[", 
            RowBox[{
             RowBox[{"dataCartography", "[", 
              RowBox[{"[", 
               RowBox[{"All", ",", "index"}], "]"}], "]"}], ",", 
             RowBox[{"Except", "[", "_Missing", "]"}], ",", 
             RowBox[{"{", "1", "}"}], ",", 
             RowBox[{"Heads", "\[Rule]", "False"}]}], "]"}]}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Choose", " ", "the", " ", "best"}], "-", 
          RowBox[{
          "connected", " ", "antibodies", " ", "and", " ", "viruses"}]}], " ",
          "*)"}], "\[IndentingNewLine]", 
        RowBox[{"posDoubleNeighbors", "=", 
         RowBox[{"Position", "[", 
          RowBox[{
           RowBox[{"Extract", "[", 
            RowBox[{"dataCartography", ",", "posViruses"}], "]"}], ",", 
           RowBox[{"Except", "[", 
            RowBox[{"_Missing", "|", "_GreaterThan"}], "]"}], ",", 
           RowBox[{"{", "2", "}"}], ",", 
           RowBox[{"Heads", "\[Rule]", "False"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Switch", "[", 
         RowBox[{
          RowBox[{"OptionValue", "[", "Method", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"Chose", " ", "the", " ", "most"}], "-", 
            RowBox[{
            "connected", " ", "neighbors", " ", "to", " ", "get", " ", "a", 
             " ", "maximally"}], "-", 
            RowBox[{"rigid", " ", "graph"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", "\"\<HighlyConnected\>\"", ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"posViruses", "=", 
            RowBox[{"Sort", "@", 
             RowBox[{"Flatten", "@", 
              RowBox[{"posViruses", "[", 
               RowBox[{"[", 
                RowBox[{"First", "/@", 
                 RowBox[{
                  RowBox[{"ReverseSortBy", "[", 
                   RowBox[{
                    RowBox[{"Tally", "[", 
                    RowBox[{"First", "/@", "posDoubleNeighbors"}], "]"}], ",",
                     "Last"}], "]"}], "[", 
                  RowBox[{"[", 
                   RowBox[{";;", 
                    RowBox[{"UpTo", "@", 
                    RowBox[{
                    "OptionValue", "[", "\"\<NumNeighbors\>\"", "]"}]}]}], 
                   "]"}], "]"}]}], "]"}], "]"}]}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"posAbs", "=", 
            RowBox[{"Prepend", "[", 
             RowBox[{
              RowBox[{"Sort", "[", 
               RowBox[{"First", "/@", 
                RowBox[{
                 RowBox[{"ReverseSortBy", "[", 
                  RowBox[{
                   RowBox[{"Tally", "[", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Last", "/@", "posDoubleNeighbors"}], ",", 
                    "index"}], "]"}], "]"}], ",", "Last"}], "]"}], "[", 
                 RowBox[{"[", 
                  RowBox[{";;", 
                   RowBox[{"UpTo", "@", 
                    RowBox[{
                    "OptionValue", "[", "\"\<NumNeighbors\>\"", "]"}]}]}], 
                  "]"}], "]"}]}], "]"}], ",", "index"}], "]"}]}]}], ",", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Random", " ", "sampling"}], " ", "*)"}], 
          "\[IndentingNewLine]", "\"\<Random\>\"", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"SeedRandom", "[", 
            RowBox[{"12345", "+", "index"}], "]"}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"posViruses", "=", 
            RowBox[{"Sort", "@", 
             RowBox[{"Flatten", "@", 
              RowBox[{"RandomSample", "[", 
               RowBox[{"posViruses", ",", 
                RowBox[{"UpTo", "@", 
                 RowBox[{
                 "OptionValue", "[", "\"\<NumNeighbors\>\"", "]"}]}]}], 
               "]"}]}]}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"posAbs", "=", 
            RowBox[{"Prepend", "[", 
             RowBox[{
              RowBox[{"Sort", "@", 
               RowBox[{"RandomSample", "[", 
                RowBox[{
                 RowBox[{"Union", "@", 
                  RowBox[{"DeleteCases", "[", 
                   RowBox[{
                    RowBox[{"Last", "/@", "posDoubleNeighbors"}], ",", 
                    "index"}], "]"}]}], ",", 
                 RowBox[{"UpTo", "@", 
                  RowBox[{
                  "OptionValue", "[", "\"\<NumNeighbors\>\"", "]"}]}]}], 
                "]"}]}], ",", "index"}], "]"}]}]}], ",", 
          "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Choose", " ", "the", " ", "nearest", " ", "antibodies", " ", "or",
             " ", "viruses"}], " ", "*)"}], "\[IndentingNewLine]", 
          "\"\<Nearest\>\"", ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"posViruses", "=", 
            RowBox[{"Intersection", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Ordering", "[", 
                RowBox[{"dataCartography", "[", 
                 RowBox[{"[", 
                  RowBox[{"All", ",", "index"}], "]"}], "]"}], "]"}], "[", 
               RowBox[{"[", 
                RowBox[{";;", 
                 RowBox[{"UpTo", "@", 
                  RowBox[{
                  "OptionValue", "[", "\"\<NumNeighbors\>\"", "]"}]}]}], 
                "]"}], "]"}], ",", 
              RowBox[{"Join", "@@", "posViruses"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"posAbs", "=", 
            RowBox[{"Prepend", "[", 
             RowBox[{
              RowBox[{"Sort", "@", 
               RowBox[{
                RowBox[{"DeleteCases", "[", 
                 RowBox[{
                  RowBox[{"Ordering", "[", 
                   RowBox[{"Min", "/@", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "@", 
                    RowBox[{"dataCartography", "[", 
                    RowBox[{"[", "posViruses", "]"}], "]"}]}], ",", 
                    RowBox[{"_Missing", "|", "_GreaterThan"}], ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], ",", "index"}],
                  "]"}], "[", 
                RowBox[{"[", 
                 RowBox[{";;", 
                  RowBox[{"UpTo", "@", 
                   RowBox[{
                   "OptionValue", "[", "\"\<NumNeighbors\>\"", "]"}]}]}], 
                 "]"}], "]"}]}], ",", "index"}], "]"}]}], ";"}]}], 
         "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"posViruses", ",", "posAbs"}], "}"}]}]}], 
      "\[IndentingNewLine]", "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"posViruses", ",", "posAbs"}], "}"}], "=", 
     RowBox[{
      RowBox[{"neighborsAntibody", "[", "1", "]"}], "\[IndentingNewLine]", 
      RowBox[{"ArrayPlot", "[", 
       RowBox[{
        RowBox[{"dataCartography", "[", 
         RowBox[{"[", 
          RowBox[{"posViruses", ",", "posAbs"}], "]"}], "]"}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "Small"}]}], "]"}]}]}], 
    "*)"}]}]}]], "Input",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQAWIQbfVBtvzDmjeONT79lSBaS/DaBRB995HwZRD96uqc
pyCaw6D8DYhe9MzX8yOQ1i6QDAbRD85ejgXRDb2Xs0H0sovzC0G0vIpbFYiW
25M/BURPez1jDohe9/T7IhDde99uMYhWMDPcAKL/xvBuBtFun2VOgOgVF6+c
AtE7io3ugcWfGLwB0aqZXp9B9JVnm7+BaCWj6D8gmnPB6X8g+sf2hy4ua4H2
WnYEgOhd7CrZILrHORFMp27UuBQBpP955t0B0R92bHoIop+++PYFRHNMOf8H
RMvoCjJGAmmt6oLjmSD+qTowPcO1pSwbSN/QnFQHogFpbr9I
  "],
 CellLabel->"In[15]:=",ExpressionUUID->"a3a51d0a-29c2-494f-b8ee-83207f3f6730"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "symmetricMatrix", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"symmetricMatrix", "[", 
   RowBox[{"var_", ",", "size_"}], "]"}], ":=", 
  RowBox[{"Normal", "@", 
   RowBox[{"SymmetrizedArray", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"j_", ",", "k_"}], "}"}], "\[RuleDelayed]", 
      RowBox[{"Indexed", "[", 
       RowBox[{"var", ",", 
        RowBox[{"{", 
         RowBox[{"j", ",", "k"}], "}"}]}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"size", ",", "size"}], "}"}], ",", 
     RowBox[{"Symmetric", "[", 
      RowBox[{"{", 
       RowBox[{"1", ",", "2"}], "}"}], "]"}]}], "]"}]}]}]}], "Input",
 CellLabel->"In[20]:=",ExpressionUUID->"7b12046f-6561-47ed-a106-9d2365fa6fc0"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Metric Multidimensional Scaling (mMDS)", "Subsubsection",
 CellChangeTimes->{{3.848680040912554*^9, 3.8486800422742357`*^9}, {
   3.8489757391797156`*^9, 3.848975748037483*^9}, {3.848975935994113*^9, 
   3.8489759388671556`*^9}, 3.8497543106762714`*^9, 
   3.8505625843363543`*^9},ExpressionUUID->"fe5a359c-15c6-4074-8c5b-\
1c8f559e37ba"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "If", " ", "the", " ", "distance", " ", "matrix", " ", "is", " ", 
     "symmetric"}], ",", " ", 
    RowBox[{"use", " ", "original", " ", "formulation", " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"city", "-", 
        RowBox[{"city", " ", "distance"}]}], ")"}], ".", " ", "Otherwise"}]}],
     ",", " ", 
    RowBox[{
    "assume", " ", "the", " ", "bipartite", " ", "graph", " ", "problem", " ", 
     RowBox[{"(", 
      RowBox[{"antibody", "-", 
       RowBox[{"virus", " ", "data"}]}], ")"}]}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ClearAll", "[", 
    RowBox[{"metricMDS", ",", "metricCityCity", ",", "metricAbVirus"}], "]"}],
    "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "metricMDS", "]"}], "=", 
     RowBox[{
      RowBox[{"Options", "[", "metricCityCity", "]"}], "=", 
      RowBox[{
       RowBox[{"Options", "[", "metricAbVirus", "]"}], "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<Dimensions\>\"", "\[Rule]", "2"}], ",", 
           RowBox[{"\"\<Verbose\>\"", "\[Rule]", "False"}], ",", 
           RowBox[{"\"\<SearchPoints\>\"", "\[Rule]", "25"}], ",", 
           RowBox[{
           "\"\<SearchMethod\>\"", "\[Rule]", "\"\<RandomSearch\>\""}], ",", 
           RowBox[{"\"\<InitialPoints\>\"", "\[Rule]", "False"}]}], "}"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Add", " ", "default", " ", "option", " ", "values", " ", "from", 
           " ", "errorMDS"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"FilterRules", "[", 
          RowBox[{
           RowBox[{"Options", "[", "errorMDS", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"\"\<Comparing\>\"", ",", "\"\<PenalizeError\>\""}], 
            "}"}]}], "]"}]}], "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"metricMDS", "[", 
     RowBox[{"distMatrix_", ",", 
      RowBox[{"opts", ":", 
       RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
    "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"SymmetricMatrixQ", "[", "distMatrix", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"metricCityCity", "[", 
       RowBox[{"distMatrix", ",", "opts"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"metricAbVirus", "[", 
       RowBox[{"distMatrix", ",", "opts"}], "]"}]}], "\[IndentingNewLine]", 
     "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.6341415938397913`*^9, 3.634141608886338*^9}, {
   3.641151901348711*^9, 3.6411519085043297`*^9}, 3.6411573862906446`*^9, {
   3.641157431493928*^9, 3.6411574345421352`*^9}, {3.6413245518239803`*^9, 
   3.641324580868143*^9}, {3.837531250069418*^9, 3.8375313042031975`*^9}, {
   3.8486800910355268`*^9, 3.8486801266801977`*^9}, {3.848965024178857*^9, 
   3.848965074774905*^9}, {3.8489652353323727`*^9, 3.848965370445981*^9}, {
   3.848966870806734*^9, 3.848966871157892*^9}, {3.8489670332627993`*^9, 
   3.8489672438461647`*^9}, {3.8489706053810835`*^9, 3.848970605521387*^9}, {
   3.8489723802529416`*^9, 3.84897239215905*^9}, 3.8489724223126974`*^9, {
   3.848975912041444*^9, 3.848975912260115*^9}, {3.848975957444987*^9, 
   3.848975998046653*^9}, {3.8490110075620904`*^9, 3.8490110699244175`*^9}, {
   3.8523094806318817`*^9, 3.8523094840484715`*^9}, {3.852378440063507*^9, 
   3.8523784457588406`*^9}},
 CellLabel->"In[22]:=",
 CellID->771793147,ExpressionUUID->"cfe75671-9fad-4480-83aa-bd685d33826e"],

Cell[TextData[{
 StyleBox["Metric MDS Algorithm",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 " (",
 StyleBox["City-City Distances",
  FontSlant->"Italic"],
 ")\nInput: \n(1) Distance matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{"D", 
    StyleBox["\[Element]",
     FontWeight->"Plain"], 
    StyleBox[
     SuperscriptBox["\[DoubleStruckCapitalR]", 
      RowBox[{"n", "\[Cross]", "n"}]],
     FontWeight->"Plain"]}], TraditionalForm]],
  FontWeight->"Bold",ExpressionUUID->"61786c30-3cac-4208-b639-66a79d77e276"],
 " between ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "f0610a01-8019-404b-bc2f-3a6f5bb90b8b"],
 " cities. Values can be missing or expressed as GreaterThan or LessThan\n(2) \
The dimension ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "d7cb2c72-be33-4d0b-acf7-35087116acf0"],
 " of the final coordinates (usually ",
 Cell[BoxData[
  FormBox[
   RowBox[{"d", "=", "2"}], TraditionalForm]],ExpressionUUID->
  "b6e410d9-6d31-455b-ad42-b574359f2b48"],
 ")"
}], "Text",
 CellChangeTimes->{{3.848967272680441*^9, 3.8489672765157146`*^9}, {
   3.8489676366440783`*^9, 3.848967686587202*^9}, {3.8489681543553314`*^9, 
   3.8489681594450164`*^9}, {3.8489683445288877`*^9, 3.848968349281577*^9}, {
   3.848969107404827*^9, 3.8489691159494877`*^9}, {3.8489692043945913`*^9, 
   3.8489692103791137`*^9}, 3.848969249356746*^9, {3.849011083725316*^9, 
   3.8490110842099037`*^9}, {3.849753493130872*^9, 
   3.8497534987199574`*^9}},ExpressionUUID->"53936edd-cf46-46df-8d7b-\
ac557fe7dabe"],

Cell[TextData[{
 "Initialize points in ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "9ab581c0-4e93-4fa0-9752-b57f63d5beee"],
 " dimensions representing each city"
}], "Item",
 CellChangeTimes->{{3.848678399157098*^9, 3.8486784734446907`*^9}, {
  3.8486785114187984`*^9, 3.8486785114187984`*^9}, {3.8489772008160677`*^9, 
  3.848977222498923*^9}, {3.849028942501647*^9, 3.8490289475273232`*^9}, {
  3.849753541216357*^9, 
  3.8497535532808385`*^9}},ExpressionUUID->"3aafc204-1fde-4899-8d0e-\
b997aa98dcd6"],

Cell[CellGroupData[{

Cell[TextData[{
 "Numerically minimize their location to match the distance matrix, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[CapitalDelta]", "\[InvisibleComma]", 
    RowBox[{"d", "=", 
     RowBox[{
      RowBox[{"map", " ", "distance"}], "-", 
      RowBox[{"measured", " ", "distance"}]}]}]}], TraditionalForm]],
  ExpressionUUID->"a6112587-9ec4-43a7-9ed6-dedaf7eaa610"]
}], "Item",
 CellChangeTimes->{{3.848678399157098*^9, 3.8486784734446907`*^9}, {
  3.8486785114187984`*^9, 3.8486785114187984`*^9}, {3.8489772008160677`*^9, 
  3.848977222498923*^9}, {3.849028942501647*^9, 3.8490289475273232`*^9}, {
  3.849753541216357*^9, 3.849753575874505*^9}, {3.849753612987117*^9, 
  3.8497536183948*^9}, {3.8497537831728935`*^9, 
  3.8497537884887094`*^9}},ExpressionUUID->"3196342b-bf9e-448e-b54e-\
4c28a5ec7b14"],

Cell[TextData[{
 "For concrete values, minimize ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[CapitalDelta]", "\[InvisibleComma]", 
    SuperscriptBox["d", "2"]}], TraditionalForm]],ExpressionUUID->
  "99a18b7b-9216-41ad-867a-4e8ad69c6279"]
}], "Subitem",
 CellChangeTimes->{{3.848678399157098*^9, 3.8486784734446907`*^9}, {
  3.8486785114187984`*^9, 3.8486785114187984`*^9}, {3.8489772008160677`*^9, 
  3.848977222498923*^9}, {3.849028942501647*^9, 3.8490289475273232`*^9}, {
  3.849753541216357*^9, 3.849753575874505*^9}, {3.849753612987117*^9, 
  3.8497536910388947`*^9}, {3.8497537967052364`*^9, 
  3.8497537967052364`*^9}},ExpressionUUID->"f70466c2-3ddb-4bd8-ad3e-\
408eccf025c0"],

Cell[TextData[{
 "For GreaterThan values, minimize ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"\[CapitalDelta]", "\[InvisibleComma]", 
     SuperscriptBox["d", "2"]}], 
    RowBox[{"1", "+", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{"10", "\[CapitalDelta]"}], "\[InvisibleComma]", "d"}]]}]], 
   TraditionalForm]],ExpressionUUID->"3fe79791-d5c3-4e62-8586-c4e7e37087e1"],
 " so that larger map distances will not contribute to error"
}], "Subitem",
 CellChangeTimes->{{3.848678399157098*^9, 3.8486784734446907`*^9}, {
  3.8486785114187984`*^9, 3.8486785114187984`*^9}, {3.8489772008160677`*^9, 
  3.848977222498923*^9}, {3.849028942501647*^9, 3.8490289475273232`*^9}, {
  3.849753541216357*^9, 3.849753575874505*^9}, {3.849753612987117*^9, 
  3.8497536211767426`*^9}, {3.849753664281393*^9, 3.8497536970865636`*^9}, {
  3.849753737060968*^9, 3.8497537402250767`*^9}, {3.849753775033639*^9, 
  3.8497538124546614`*^9}},ExpressionUUID->"4c959860-5942-45fa-a1cb-\
2efdb4e39099"],

Cell[TextData[{
 "For LessThan values, minimize ",
 Cell[BoxData[
  FormBox[
   FractionBox[
    RowBox[{"\[CapitalDelta]", "\[InvisibleComma]", 
     SuperscriptBox["d", "2"]}], 
    RowBox[{"1", "+", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "10"}], "\[CapitalDelta]"}], "\[InvisibleComma]", 
       "d"}]]}]], TraditionalForm]],ExpressionUUID->
  "47464be2-74e6-48c0-9fd3-adde60a3a602"],
 " so that smaller map distances will not contribute to error"
}], "Subitem",
 CellChangeTimes->{{3.848678399157098*^9, 3.8486784734446907`*^9}, {
  3.8486785114187984`*^9, 3.8486785114187984`*^9}, {3.8489772008160677`*^9, 
  3.848977222498923*^9}, {3.849028942501647*^9, 3.8490289475273232`*^9}, {
  3.849753541216357*^9, 3.849753575874505*^9}, {3.849753612987117*^9, 
  3.8497536211767426`*^9}, {3.849753664281393*^9, 3.8497536970865636`*^9}, {
  3.849753737060968*^9, 3.8497537402250767`*^9}, {3.849753775033639*^9, 
  3.849753822311016*^9}, {3.8497903549306917`*^9, 
  3.8497903549459877`*^9}},ExpressionUUID->"e596f961-4443-4b70-812f-\
a5bf3f17e894"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Removing some degrees of freedom (i.e. setting point #1 to the origin and \
point #2 to the ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "628af480-9405-4a4c-9120-d7347e83c01d"],
 "-axis) makes little difference here, but it highly disrupts the Local Rigid \
Embedding algorithm"
}], "Item",
 CellChangeTimes->{{3.848678399157098*^9, 3.8486784734446907`*^9}, {
  3.8486785114187984`*^9, 3.8486785114187984`*^9}, {3.8489772008160677`*^9, 
  3.848977222498923*^9}, {3.849028942501647*^9, 3.8490289475273232`*^9}, {
  3.849753541216357*^9, 3.849753575874505*^9}, {3.849753612987117*^9, 
  3.8497536211767426`*^9}, {3.849753664281393*^9, 3.8497536970865636`*^9}, {
  3.849753737060968*^9, 3.8497537402250767`*^9}, {3.849753775033639*^9, 
  3.849753822311016*^9}, {3.8497903561275587`*^9, 
  3.8497904000484896`*^9}},ExpressionUUID->"f4852339-2a84-4bca-8d83-\
029073f6f5e1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"metricCityCity", "[", 
   RowBox[{"distMatrixRaw_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"distMatrix", "=", "distMatrixRaw"}], ",", 
      RowBox[{"dim", "=", 
       RowBox[{"OptionValue", "[", "\"\<Dimensions\>\"", "]"}]}], ",", "pnts",
       ",", "p", ",", "minVar", ",", "mapDist", ",", "stress", ",", "minSol", 
      ",", "coords"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"pnts", "=", 
      RowBox[{"Array", "[", 
       RowBox[{"p", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Length", "@", "distMatrix"}], ",", "dim"}], "}"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Minimize", " ", "map", " ", "distances", " ", "as", " ", "per", " ", 
       "the", " ", "distance", " ", "matrix"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"stress", "=", 
      RowBox[{"errorMDS", "[", 
       RowBox[{"pnts", ",", "distMatrix", ",", 
        RowBox[{"\"\<Comparing\>\"", "\[Rule]", 
         RowBox[{"OptionValue", "[", "\"\<Comparing\>\"", "]"}]}], ",", 
        RowBox[{"\"\<PenalizeError\>\"", "->", 
         RowBox[{"OptionValue", "[", "\"\<PenalizeError\>\"", "]"}]}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"minSol", "=", 
      RowBox[{"NMinimize", "[", 
       RowBox[{"stress", ",", 
        RowBox[{"Flatten", "@", "pnts"}], ",", 
        RowBox[{"Method", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"OptionValue", "[", "\"\<SearchMethod\>\"", "]"}], ",", 
           RowBox[{"\"\<SearchPoints\>\"", "\[Rule]", 
            RowBox[{"OptionValue", "[", "\"\<SearchPoints\>\"", "]"}]}], ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"OptionValue", "[", "\"\<InitialPoints\>\"", "]"}], "=!=",
               "False"}], ",", "\[IndentingNewLine]", 
             RowBox[{"\"\<InitialPoints\>\"", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"Flatten", "@", 
                RowBox[{"OptionValue", "[", "\"\<InitialPoints\>\"", "]"}]}], 
               "}"}]}], ",", "\[IndentingNewLine]", "Nothing"}], 
            "\[IndentingNewLine]", "]"}]}], "}"}]}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"pnts", "/.", 
      RowBox[{"Last", "@", "minSol"}]}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.6341415938397913`*^9, 3.634141608886338*^9}, {
   3.641151901348711*^9, 3.6411519085043297`*^9}, 3.6411573862906446`*^9, {
   3.641157431493928*^9, 3.6411574345421352`*^9}, {3.6413245518239803`*^9, 
   3.641324580868143*^9}, {3.837531250069418*^9, 3.8375313042031975`*^9}, {
   3.848680074584319*^9, 3.8486800758396034`*^9}, {3.8486801220429077`*^9, 
   3.8486801954570627`*^9}, {3.8486802705548043`*^9, 
   3.8486802965657887`*^9}, {3.8486803443150578`*^9, 
   3.8486803685892167`*^9}, {3.848680436916373*^9, 3.848680439746497*^9}, {
   3.8486804922290277`*^9, 3.848680741444861*^9}, {3.8486808274359565`*^9, 
   3.8486808334180803`*^9}, {3.848681009327726*^9, 3.8486810215653524`*^9}, {
   3.849010959921844*^9, 3.8490109637644644`*^9}, {3.8490111133451877`*^9, 
   3.8490111161131587`*^9}, {3.849011150234836*^9, 3.8490111542600975`*^9}, {
   3.8490113909691935`*^9, 3.8490113954650307`*^9}, {3.8490114291675863`*^9, 
   3.849011446072254*^9}, {3.8490115145301666`*^9, 3.849011540175786*^9}, 
   3.849016075619601*^9, {3.8490162230461626`*^9, 3.8490162244051876`*^9}, {
   3.8490162825930653`*^9, 3.84901630997512*^9}, {3.849016371538166*^9, 
   3.8490164127867317`*^9}, {3.849016557812749*^9, 3.84901656608335*^9}, {
   3.8490171794983697`*^9, 3.8490171843142753`*^9}, {3.849017247179249*^9, 
   3.8490173082859373`*^9}, 3.849017392271714*^9, {3.8490175077141385`*^9, 
   3.849017513529456*^9}, {3.8497539324777155`*^9, 3.8497539724791937`*^9}, {
   3.8497540247977557`*^9, 3.849754025949812*^9}, 3.8497542162688103`*^9, {
   3.84975446191931*^9, 3.84975450178988*^9}, {3.849754628226165*^9, 
   3.8497546596145844`*^9}, {3.849787914075388*^9, 3.849787935116577*^9}, {
   3.849787969372688*^9, 3.849788006929878*^9}, {3.8497881429879184`*^9, 
   3.8497881446521006`*^9}, 3.8497883142398167`*^9, {3.849788448241988*^9, 
   3.849788465653835*^9}, {3.849789431554885*^9, 3.8497894470091896`*^9}, {
   3.849790311131694*^9, 3.8497903174092646`*^9}, {3.8497904037676*^9, 
   3.849790421449585*^9}, {3.84979447642572*^9, 3.8497944774116216`*^9}, 
   3.8502447550890856`*^9, 3.850249260421506*^9, 3.852309524152108*^9},
 CellLabel->"In[25]:=",
 CellID->778694050,ExpressionUUID->"88de1e2d-4221-41ea-a496-ae044711107d"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Example", ":", " ", "n"}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{"15", " ", "points", " ", "with", " ", "entry"}], "-", 
      RowBox[{"wise", " ", "error", " ", "\[Sigma]"}]}], "=", 
     RowBox[{"1", " ", "in", " ", "the", " ", "distance", " ", "matrix"}]}]}],
    " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"coords", ",", "distMatrix"}], "}"}], "=", 
     RowBox[{"exampleData", "[", 
      RowBox[{"15", ",", "1"}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"coordsMDS", "=", 
     RowBox[{"metricMDS", "[", "distMatrix", "]"}]}], ";"}], "\n", 
   RowBox[{"analyzeMDS", "[", 
    RowBox[{"coords", ",", "coordsMDS"}], "]"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.8489656480199227`*^9, 3.848965660278557*^9}, 
   3.848965718068469*^9, {3.8489662151325035`*^9, 3.848966244183281*^9}, {
   3.8489662828426886`*^9, 3.848966289898882*^9}, {3.848966385323944*^9, 
   3.84896638591742*^9}, {3.8489664208210487`*^9, 3.848966421123945*^9}, {
   3.8489664935911584`*^9, 3.8489665332272167`*^9}, {3.8489665644235835`*^9, 
   3.848966592322567*^9}, {3.8489672547383146`*^9, 3.8489672573369265`*^9}, {
   3.8489723343649836`*^9, 3.8489723348560743`*^9}, {3.849753855173088*^9, 
   3.8497538856998653`*^9}, {3.8497539911104755`*^9, 
   3.8497540107210426`*^9}, {3.849754097675316*^9, 3.8497541044988184`*^9}, {
   3.849754470261654*^9, 3.8497544882862926`*^9}, 3.849754530779436*^9, {
   3.8497546033400393`*^9, 3.8497546159865146`*^9}, 3.8497908384118958`*^9, 
   3.849791146526827*^9, 3.849794344297086*^9},
 CellLabel->"In[26]:=",ExpressionUUID->"b05f7275-2eed-4e20-b81b-f1aa6b0da968"]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt3V9QXOeZ53F292YvV3d7sbYs4amZlHdmtlJar3a9VVPK1IQxI0coIsK2
ZOQISYhYUrD+mICZjrHw4kZIIGAQjsEajERjyRoYZWHiSBpvqjfJWFOqJlUR
tTVCNZXqO8KN7vqu9wlP/NTxOd2nm+6mT//5fqqLak6/fc57Wuj8+n3Pe96z
7fD3v33s39bU1Jz59/Lj29/t2HX69Hc79/0H+eU7p860tZ46euTFU2ePth49
vfPwv5OFw/+mpuY1Kf+750kAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAKMjEx
8V4WfvzjHwdd01z8/Oc/HxgYkPrLbj569Gijb79z54683b/M6Oio67OSjeZa
XwBAwGKxmBz8u7u7j627efPmz79KAvHkyZPT09NB13TDJLCk5rpHkm7yXHY2
y/fKXp87d04/E59isuZjXyVb+e1vf1uI6gMAAiPJqEf1lC0dWSiNoOLXKh/S
PJTdcTZyZReyTEb9PqBr8I9FiU4pNu0gn2QBag8ACJS1etJ1AGbsSywpjx49
kn2RzHIu1OjPPt/tM0lXQDK37L4tAACykTEWczgxF6DR0VHZF/npWq77mGVX
asZYlNjt7u6WFmL2fbMAgLLgE4uyxHXYl4iULJiYmEiuN8F0QIu+JCUljLTr
Usp4x+rIrzoGRn7Kc+9pOB3lIuuRl3Q0Sw6hc/LkSdkX7/lQPYWa5XlS/1iU
yjtPKeZWTwBAafKJRQkRWyiBaGfcNPIsF6ampiTO9Lm8RdtrzliRmOteJ8En
K9QC0uCyNLl586asU9/iHAW00Y5K7UFNuS+6/iw7hDPGog7idYZjmY7XBQC4
pItFyTJJLtdCTUYdbaJtOnmuvayaZfJTAkLyTi9Y0HfJQinmbB5Keup6bKE8
cTa+JBzl1Y0OgvWJeE2xLHM2Yyeq1VlqqO3T7HtoAQClzCJAwst5CZ4e7V35
4o0zk645Ji3BY+tXf7iW60UQzuDTanhLutplKWneFTkWlaShflYMwgGACmAR
4LpuUX6Vo33KWEx5/Nfc8bbvNP68OWUNT1uSLtGk+TmdifZhBhKLzvLlNTwJ
AOCV5blFW7LRWPQJO1f0pCtZkH3Z1FhMrl/GkmflAQClwCdKfrvOuaSAseiN
nvxj0U5Qeleipz5t3Ky/HGJRPxliEQDKXcbrFp1yjkXvct3uyZMnXSXzTJZ0
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
NVjZ38/x+uytoCtbiohFFFk8Hq8/cDbLTJRvvPKd9tfL/y+3bdl19Clvk6Gt
HmcQWLvJGQTazsqhmPeSDaPHf01GfXVhYcGabPJGWei9QMO7CRdNEO9yPavo
02q2Kw1dXyG0farLtcdVTwV636g3trBWpL5Rfq6t0yv9LXm1Jrq/Wkb2Vy+o
rFnvtpUMtd1MeTGjfbwleN1i4LK/n+OpDqZdTYFYRPHdXvjpNw9mHpIq/213
H3n/xly+V3vpVQl6bJdDrh7em9Z5k0IOyHpwloO/zT/jPSZnLOac1yXlLZws
GZWsxyY2l8IWi7YJnUsnm/tiuGbVtmjTE4vejHZOyGOfkr5kPbfOeqYcmVPz
1fOeNleqsxFqbU+toQVlzZfXodgECLoVWWJbt4/F9QGW4Cw3gcv+fo4tJ7uD
rmwpIhYRiJt/92NpM/p09TSemXrpUKcUK9RIcj3q2hxlGSfT1pI6E2kOxbwj
W7xvtylVNSbkpzNY9b7JtomUieaik+04o1OvDXRKGYv+tbV6pjs1qdO9uj4B
27Rt0TWlavLLD9Deq6ty9tD6VL5k50QNXPb3c/zBu0NBV7YUEYsIyurq6pnu
/oZj7+n9FrV5KE92t41II1H+w+bcd1rNdPru0ry1RAFpn3PF72Zusr+f4+T0
p0FXthQRiwjW8vLy7NxnvQMftJzsbj3d89d9V27MLT6I/YrLjXMmrS3/OeLK
nTaKS/Z+i0UQj8cjH/ZNhlvHeltuTQ247rWR/f0cmfEmJWIRqDySjP5nIcuX
Ds6p5kx8cD96+eyuxdBTscFtD0e33z3/tPwai8WcZbifYz64sRRQkZbWBV2L
wtMhr0HXIjDSMJQQfDRe67o9x1D7Tmcx7ueYj4pMw1//6v7Vy51DoeZPJ8+7
vkQBQPlKdzNHWegqyf0cc1Z5sSh/Nj9687nY4Db5BhXt23r1dO3UBxeCrhQA
FMBYb8vD0e3eWJTDXdBVqxwVFosP7kenutw3AJVkpM0IoAIQi0VQYbH46eR5
aSF6/2CGQs1BVw0A8pWuE1WOe0FXrXJUWCxK/LlORuvjnRN/xb04AZS7eDze
/4a7Q0wOemPnXgi6apWjwmLx6uXO2OA219+MLGn61v/kXpwAKsAvovckGbXN
KIH4xYVnhtp3fn433zkSYSosFh/cj/7ozedcsTjZvvVbR857BypzL04A5Wh1
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
xs0YUHRtdn7PiXH/TJTH3vaJwm5XDrM2x1EF/KslKzoW5T+djYqvpFjUI48c
x5xfOPUIU16nY+Zv/u14239MmYnX33pWmpN5rj/704saNNa16D1k6RgbG0Sa
TbFkpk7UGs+QG++5RWcBO/iku+RE/wayjMWk47pO/X7lfSnny/nl79BZc1mY
ritDy6eMxYwXnJY4HTjk/S/p/+0lH+HhqxJ5GWNRmpMF3Kj8y+r3T+srLuDK
g1KpsWhHnsJOv1wKXMde4zOXSGlKJBKLn078zZtfv3v+ab2cX35G+7aOnXth
9upQQYbM6fci11cIl8g6fa7tOO8BWdbjHKCSZbF0sWjB6hpW6m1suhIw4xHV
p3XsjUWrnndWmdxi0brRvCGb7i36D+T6o9XPp9z/z8pedK1zLd+8WDzV0Zux
B1UfBdyo7IjN4EcslriaL0+3bd4fYVDkmCOHU29PWtnFolpdXb01NTAZbh3s
apKfczNj+Vyu6GK96ClvkyGvylHLeQxPebW7XiOfQzHvJRtGv9toMuqr9q1b
q6pjF10r9G7CxWfMg3wO3mZmusZauv7nbKYK91ZP3yUFXOFrkxW4yuuOV+p1
i/rVYjOm8XlvYGx/x0zGTJQyBdyo/DPZn3clxWJl3DzIRSf0SG7md7OSYgdq
5gbxsuFJdmMjvbeR8Gal9b1r80rnn/Ee6jMWswlIdbve6LFktG4Nm9hcClss
2iZ0Lp10VzQoDRrvBYPO21u4puJxNhV1qjrXMNHsbywlBVL++Wn95S3ON+qn
l3J3KniWGxuEsxlfXz+7c29320jGWNxzYrO+b1RSLAZdhc1VJbGYbnAjjI5N
silM/Y+6OlenzUSaQ7Gwh/ftNqWqHiTlpzNY9b7JtgnNSv991Ml2vNfp+9TE
edZPYzFl+ZTLlXyq/gd5e1Wq57wTcbrdqdQ5Ua3vwv+7Tc7i8Xjdq29lPLHY
2Nq7GVtPEovloxpiUdsIrnEOqE564UP53oFCO5PLt/7p2P0lNzXxr0zO1B+9
5BOL0pwcGp/epK0Ti+Wi4mNRJ970GbePaqNnn4OuRS60tVvif8k1vtJ1C/jM
0F5AiUSi653+lMko7cS6w+HOnosZb9yWww4631jofQoAsZiD0pmG1y7KLvEj
CYpMknGTeuo2j04NV/p/yXW+vKehbTBVcf5FJBmvzc7XN78tDUOdE1V+7m2f
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
    "], {{0, 241.2}, {363., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->120.],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
    Automatic],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->270,
  ImageSizeRaw->{363., 241.2},
  PlotRange->{{0, 363.}, {0, 241.2}}]], "Text",
 CellChangeTimes->{{3.8497911301631336`*^9, 3.849791144560424*^9}},
 CellLabel->
  "Out[510]=",ExpressionUUID->"b5989b40-bd8b-4753-8a33-fc9814df36a5"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Example", ":", " ", "n"}], "=", 
    RowBox[{
     RowBox[{
     "30", " ", "points", " ", "with", " ", "small", " ", "error", " ", 
      "\[Sigma]"}], "=", 
     RowBox[{
     "0.1", "\[IndentingNewLine]", "Can", " ", "handle", " ", "Missing", " ", 
      "values", " ", "as", " ", "well", " ", "as", " ", 
      RowBox[{"GreaterThan", "/", "LessThan"}], " ", "bounds"}]}]}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"coords", ",", "distMatrix"}], "}"}], "=", 
      RowBox[{"exampleData", "[", 
       RowBox[{"30", ",", "0.1"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{"'", 
      RowBox[{"fracMissing", "'"}], " ", "values", " ", "will", " ", "be", 
      " ", "Missing"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"SeedRandom", "[", "12345", "]"}], ";"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"fracMissing", "=", "0.3"}], ";"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"posMeasured", "=", 
      RowBox[{"Position", "[", 
       RowBox[{
        RowBox[{"UpperTriangularize", "@", "distMatrix"}], ",", 
        RowBox[{"Except", "[", "0.", "]"}], ",", 
        RowBox[{"{", "2", "}"}], ",", 
        RowBox[{"Heads", "\[Rule]", "False"}]}], "]"}]}], ";"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"posWithheld", "=", 
      RowBox[{"RandomSample", "[", 
       RowBox[{"posMeasured", ",", 
        RowBox[{"Round", "[", 
         RowBox[{"fracMissing", " ", 
          RowBox[{"Length", "@", "posMeasured"}]}], "]"}]}], "]"}]}], ";"}], 
    "\n", 
    RowBox[{
     RowBox[{"distMatrix", "=", 
      RowBox[{"ReplacePart", "[", 
       RowBox[{"distMatrix", ",", 
        RowBox[{
         RowBox[{"Join", "[", 
          RowBox[{"posWithheld", ",", 
           RowBox[{"Reverse", "/@", "posWithheld"}]}], "]"}], "\[Rule]", 
         RowBox[{"Missing", "[", "]"}]}]}], "]"}]}], ";"}], "\n", 
    RowBox[{"(*", " ", 
     RowBox[{"'", 
      RowBox[{"fracGreaterThan", "'"}], " ", "largest", " ", "values", " ", 
      "will", " ", "be", " ", "GreaterThan"}], " ", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{"'", 
      RowBox[{"fracLessThan", "'"}], " ", "largest", " ", "values", " ", 
      "will", " ", "be", " ", "GreaterThan"}], " ", "*)"}], "\n", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"fracLessThan", ",", "fracGreaterThan"}], "}"}], "=", 
      RowBox[{"{", 
       RowBox[{"0.3", ",", "0.3"}], "}"}]}], ";"}], "\n", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"thresholdSmall", ",", "thresholdLarge"}], "}"}], "=", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", 
          RowBox[{"Round", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"fracLessThan", ",", 
              RowBox[{"1", "-", "fracGreaterThan"}]}], "}"}], 
            RowBox[{"Length", "@", "#"}]}], "]"}], "]"}], "]"}], "&"}], "[", 
       RowBox[{"Sort", "@", 
        RowBox[{"DeleteMissing", "@", 
         RowBox[{"Flatten", "@", "distMatrix"}]}]}], "]"}]}], ";"}], "\n", 
    RowBox[{"distMatrix", "=", 
     RowBox[{"distMatrix", "/.", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"val_Real", "/;", 
          RowBox[{"val", "<", "thresholdSmall"}]}], "\[RuleDelayed]", 
         RowBox[{"LessThan", "[", "thresholdSmall", "]"}]}], ",", 
        RowBox[{
         RowBox[{"val_Real", "/;", 
          RowBox[{"val", ">", "thresholdLarge"}]}], "\[RuleDelayed]", 
         RowBox[{"GreaterThan", "[", "thresholdLarge", "]"}]}]}], "}"}]}]}]}],
    ";", "\n", 
   RowBox[{"coordsMDS", "=", 
    RowBox[{"metricMDS", "[", "distMatrix", "]"}]}], ";", 
   "\[IndentingNewLine]", 
   RowBox[{"analyzeMDS", "[", 
    RowBox[{"coords", ",", "coordsMDS"}], "]"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.8490122353191924`*^9, 3.849012254481*^9}, {
   3.8490131351956234`*^9, 3.8490131824468737`*^9}, {3.8490134127272205`*^9, 
   3.849013443375121*^9}, {3.849013495653434*^9, 3.8490135066575756`*^9}, {
   3.8490136000566373`*^9, 3.8490136036361527`*^9}, {3.849013653247308*^9, 
   3.8490136548609133`*^9}, {3.849013882683123*^9, 3.849013901909738*^9}, {
   3.849014130060865*^9, 3.84901419250073*^9}, {3.8490143968074*^9, 
   3.849014402058319*^9}, {3.849014520220711*^9, 3.849014548401412*^9}, {
   3.849014883764529*^9, 3.8490149573646755`*^9}, {3.8490151744050446`*^9, 
   3.8490151906651106`*^9}, {3.849015223640381*^9, 3.8490152514204535`*^9}, {
   3.849015307996291*^9, 3.8490153405105476`*^9}, {3.849015394577076*^9, 
   3.849015404475035*^9}, {3.849015439707387*^9, 3.849015445633521*^9}, {
   3.849017710109696*^9, 3.8490177141741915`*^9}, 3.849017860318268*^9, {
   3.8490181054421325`*^9, 3.849018160427604*^9}, 3.849018209375128*^9, 
   3.849649870226945*^9, 3.84975266998937*^9, 3.849788495789372*^9, {
   3.8497885532201223`*^9, 3.8497886247377405`*^9}, {3.8497912077414246`*^9, 
   3.849791271740226*^9}, {3.849791417000558*^9, 3.8497914286212735`*^9}},
 CellLabel->"In[27]:=",ExpressionUUID->"d8d3637d-b046-4050-807e-6cc05fb6b564"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt3WtQXOed53F2t3Z3ZnZejGtrZiczsWUbJ1nHUZzxKFnPJGOPnERYBBkw
BBCXRgJJCAlpiJCFhZjWDbndCEkYKRLegDWyZF3tiHEWxo4sz6SIc3HKhVK1
prbGqKZS7VeM3vgd79i/+MuPj86tm76d7ub7qS4Kuk+f85wGzu885zyXB1r+
7tlN/7GoqKjr9+TLs+u7V+7YsX531R/JD9/f3tXetn3jhtXbd25s27jj8Zb/
JE8O/YeioiZZ/vb38wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAVkZGTkUAJ+
8pOfBF3SZLz33nsDAwNSftnNjz76KPE3/vu///vZs2fljfJ2/30/ceKE7bOS
jaZccABAMKampq5du9bb27tpwZUrV967m4TCtm3bJCOCLumiSWBJyXWPJN3k
e9nZRN4oi8nCGnC6+7Iq1yVlgU13k4UlUtO6HwCAbJNk1KO6a01HnpSMyH6p
UiHVQ9kda0VPdiGRZJRKpSz23HPPmWc0+1yTURaTDZ21kE8yXbsAAAiKqfV4
XQCU2laWi5QKiTbZF2u0zX8a/XHzXeLPlqdCa9O2D0eWybuzBQBAIuLG4qJu
zAVOo81Zv9N99Kkwap4K2/5KNVCetJ0bSOxKXMpLCV6bBQDkC59YlGdsh32J
DMmCkZGR+YUqmDZo0ZdkSQkjrWppkxVbtUt+1DYw2pTFeRtOVigvyXrkJW3N
kkTobNu2TfbFeT9UK30+90mvXLmin4OzVLbnpfDWW4rJlRMAkJt8YlFCxDwp
gaj37DQIrNFw5swZiTP9Xt6i9TVrlEjM9S6QiJEV6gJS4TJpIpEk69S3WFsB
LfZCpanxOfdF1+9zQVhL5dyi+XxMaWXftRGvNRzztL0uAMDGKxYlyyS5bE9q
MmprE63Tyfd61VGzTL5KQEiCaIcFfZc8KYtZq4d6ZdL6pHxjrXxJOMqri20E
6xPxmmI+Oeu1gM86tSuH1k/9r9ACAPKFOexLeFm74OnR3pYFzjgzvKpjenFS
vtqel5XYrmpqMZxL2uplrjTOshyLSvt0JFG3BQDkIHPYt/VblB/laO8ai67H
f40VZ/1O48+ZKabiaZ7xSh+pfp6NR69hBhKL1mXyq3kSAMApwXuL5pnFxqJP
2OlLcZdMy75kNBbnF7qxpFh4AEAu8L93ZrtYmsZYNNuNu2TizA1K50r01qdp
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
9IpFvVjqGqnmbqmtj6fGtzxpq0XKj3HvnybypG7Uuo9JxGJGx53Ld5KJW3bs
/bsal8Yh/ev+5I3nP7+18qGnWw9zI8zGPxa3d/dVdo56zWtvbVKYtQIjr8n/
aUd3xDlvjs9DFpa3JLc5M5CLT5f8Cwv0exMEzvVYrzEmuJhXZJhgtTUrdVY2
bQkYtz7oUzv27/zueivWlN/2Rh0KwH8fnSckzg4aznMDPa9IMBb1YyyMlqgZ
cvnqRGl5tVfjkFe2f06O5F21X7jdeJIbYRb+sXho4KR8Yv7z2ocYrw+LEYvF
Sht2Jt4GVf5h/+/0/0tuW6Yfves0GVrrsQaBqTdZg0DrWUks5uyyYejxX5NR
Xx0fHzdVNnmjPOnsoOHchI0miPN5vavoU2s2PQ1tpxBaP9Xn9Yqr3gp0vlEn
tjC1SH2jfL21QHv6m+TVkuj+6jKyv9qhsmjhsq1kqNlN186M5uMtgH6LGaIz
OTbVlHjdBXuh6Y9N40luhFn5x+Lb167rYM63u9I0NtZXPFFfvaqifrOt6xnj
9WFR3hz/6arG+E1SJRPLNrwoZ7wpbk57JeixXQ65enivXeBMCjkg68FZDv5m
/BnnMTnuYtZxXVyncDLJqGQ9ZmBzWdjEotmEjqWTyLwYtlG1TbTpjUVnRlsH
5DGfkr5krtxay+naMqfo7vueZqxUayXU1D21hCYoiz7th2IGQNCtyDNm6+Zj
sX2A+T7KTeacuzh2+z5+3Wr/WNRWItwIs4o7uE1J/a64xy7G68NiXfnxT6TO
6NP8prrrzJrm3bJYuprJ6VHXjFEWdzBtXVJHIk1iMWfLFufbzZCqGhPy1Rqs
Om+y2YRrotnoYDvW6NS+gVausehfWlNOr1uTOtyr7RMwmzZbtA2pOv/pB2je
q6uyXqH1KXxhjImaOdGh01J/kZqgV+OQ4fY/tTaeDLq8OSRuv8VTo+dd57U3
D8brQ3JmZ2e7evsrNh3S+RbvnGJ1nZG/KKkkPn9gMOlrp0uZDt9dAFNL+NNr
zgW/m6nY3t2n/1CujUOGNv4PSUbTeJIbYVZxY1HO1Xv29bsmI+P1IXXT09MX
r77dN/By67beth37/z5y6vLViQ+mfktfqqRJbct/jLh8p5XiwphvMXO0ZYgc
qJ2NQwbW/8nlXX+uP+5pXi6VSm6EWSUyJirj9QH5RZLR/y5k/tLGOWRiXKZl
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
N4yRKmdTTUncWMz3q17EYnbEYrGS+l3+mSh/wNVtfUGXNEtO9rW6/nNZ/8uO
9fhFgD8Ti4l3vjB54XxJa4KaIwkuNm+JRdtiprWna5lNHOh1YFODM+v0Kr9u
Lm4szn+aXNaWLdaq4nxmYlH3yFptdEazocXz2Upe03vEInMXii9fnZBM9Dna
JNcw5tDAyfK6DV4t6s3KV62P5PU18MKOxZzqICx/hHKS5vOHKtXJweGz/ivR
/6YCaMGetVhMfCw1rxSbX6ijmThIcDGfJb3Cxfm8CZG4Fx7nFxOL5sareUY+
JWtMp+UiqtdfqWnSo1zvcnp9wvlO+2ZaTwx8as1Jm5mZqdrQG7cxQxINY96+
dv07oYNeLep1tU+39hct8uZFringWNR/4RzpqT2/cFmjZ1+/azLKH7CcvO3e
f8Snb4LtGpRUTHKkt11y/s/FIddzTuvJ5+ujB5Nev96fWtS/p0/eWeMgwcV8
lrRdLPV6u9kR099QksvnEJp4LM47KoyyCev5Q+pNbqx1Pdf/Qf+BdwoyFk3L
Kzl9kl+r7LXpV5veZDx3cay8YzjuLZskGsboVS+fFvVr2k/8l9/7Q2IxN2mT
vJyKxfmFZLzdlCu0RyqGehNcvt7uuNEa7h8a9bnUrwcx+Z/S8SfN8Cz5O6y0
nNAe6/iaT1Xxf//gkQ/eT+l3px+R81qlF5NizmOUayz6LzYfLxbjXkS1kl+0
hqPPIXRRsWha+Mjfkq7ctnBysWh22VoH9FrelMF5CC3IWNRPz3Z3WNtl+d8y
XvSGhk4/veFwTWOLs7u97Ww8iZX7XPX6duO+//L7f7jY09EcVJCxaC6g5Vos
JkcPNXLgsl4Q1kNKXt9/GbvyD8Ptf+qaia/tekiqkymuP/Hbixo05tKisw2k
ntWbRqSJLDYf7yJqkaPJjfPeonUB+e2boUS99iLxWJy39OvU0y3nS0l355c/
S2vJ5UmvKxu6vGssxu1wmne0qug8q0n7OUBzyyaf7vYpNoxxvepV233x/q88
IXvxn//r73/uz+4lFnOK/Mnp3572CCuMWLQdbA2fwUPygvx/Tbw+8sMfPCb/
ttqdX75ORpadfO6bF08PpmVkRfPH4HOL+cIC/V7rcc4DsqzH2kAlwcW8YtEE
q62O4Kxs2hLQvz44v3CA9aodO2PRFM85qkxysWjumjlD1ust+guy/Q3r51N4
LVG9+tekNxZnZ2d7Qsv9u9un2B3MedXrqYa9sgt/8vniH3Tv279/fwHEYmHM
kqD031b+PbW3dV6nhiEHGTl+Ok8yC2MH5b/4jTMDo9G2Yz218vXq+ZOpdFe0
MXdzXKfJkFfllMN6DHft7a4X5JNYzNllw9BTHU1GfVXqU7pOLao86eyg4dyE
jf5JuL4kn4OzmulVWfO6/pzIUOHO4um7ZAFb+JrBCmzL644vkX6L5lpQulbo
M4Fd5rqDydHJ/N71IJzvsRh0EdJJb2Tr94WRGl7MkTmvG0Jnh2mtZCY20rmN
hPPPw1xw0OqVjj/jPNTHXcwMQKrbdR4lTDIqWY9pgCELm1g0m9CxdLx6NCgN
GmeHQev0FraheKxVRR2qztZMNPGJpWQB179GLb+8xfpG/fRcd2fpjHJjTtvS
GCJebbxt/Qoz1x2MWMxlhR2LXq0Z4UWbKpkhTP2PujpWpxmJNInFog7Ot5sh
VfWvVL5ag1XnTTab0Kz030cdbMfZT9+nJNa7fhqLrsu7Pq/kU/X/LzOvSvGs
MxF77c7SGRPVq/FVKhKMxUS6gyWHWMxlBRyLWimwNWwA5j/t+JA73XUXSy8m
52/5E2Q6MLqOoJ4Kr4uoprt9It3BUkEs5rL0xmLuTEWtLbrT3tcJBUNvRgdd
imRobTe//rCt15ydnnzySedxw1w7TXsmzi8cqfq3fsOlu/26rybYHUxFLe35
Xfm/kVjMTemKRTPi7lP1e5+tqV9f/721lSvLq6pLav8u+1NRm17Y+XXoQJZJ
MvrfhcxBOjRc3v1hy+dc4ua73/3u8kcf++Kj37KN1P3kmtYHHnxI74BkqFL8
i8nrkozW7vaDnY//8zsTi1qJTgHjw+uNxGIuS0ssmhF3KzZHnF2BvvVsV9am
ojbd1vLudBqBuLEg6FIsQk4N1Zgir5G6bw8Cs9Dh/Wt/+XhGjxuzs7OvnQq/
uLNqMBy6eHowja274yIWc1laYlFH3JWTPa+ZN7MzFXVGr7oASC/Xkbpruy9q
Jn7p698rgCnsvRCLuSz1WDQj7laFOny6ApWG9mT6ZKzEe35zADnFa6RuHQdG
viY9UndeIBZzWeqx+NmIu3Wrfdo8V3aOvHbxjTSW3Ebb2PgP1QIgR7iO1F3Z
OZpcC5a8QyzmstRjMTp0WiIvbizKaeH27gzOk2h6hbsqyB4oQP767Lhx913F
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
qg==
    "], {{0, 241.2}, {363., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->120.],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
    Automatic],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->270,
  ImageSizeRaw->{363., 241.2},
  PlotRange->{{0, 363.}, {0, 241.2}}]], "Text",
 CellChangeTimes->{{3.849791310417533*^9, 3.849791318502439*^9}},
 CellLabel->
  "Out[537]=",ExpressionUUID->"754fdcc8-0b2f-4ff5-a3c6-62c01c85710f"],

Cell[TextData[{
 StyleBox["Metric MDS Algorithm",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 " (",
 StyleBox["Antibody-Virus Distances",
  FontSlant->"Italic"],
 ")\nInput: \n(1) Distance matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{"D", 
    StyleBox["\[Element]",
     FontWeight->"Plain"], 
    StyleBox[
     SuperscriptBox["\[DoubleStruckCapitalR]", 
      RowBox[{"m", "\[Cross]", "n"}]],
     FontWeight->"Plain"]}], TraditionalForm]],
  FontWeight->"Bold",ExpressionUUID->"ace857c0-957d-4a4f-9653-4ff65c6e8b47"],
 " giving the Euclidean distance between ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "2782e742-1913-49db-a4f5-e25029a234cc"],
 " viruses and ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "1cfa2c99-0f72-491b-8575-4e8b71e4fc6f"],
 " antibodies\n(2) The dimension ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "673f6b2f-1b83-4faf-b506-2d575e306f89"],
 " of the final coordinates (usually ",
 Cell[BoxData[
  FormBox[
   RowBox[{"d", "=", "2"}], TraditionalForm]],ExpressionUUID->
  "bba479b7-1a37-4488-a59b-cefee473d44f"],
 ")"
}], "Text",
 CellChangeTimes->{{3.848967272680441*^9, 3.8489672765157146`*^9}, {
   3.8489676366440783`*^9, 3.848967686587202*^9}, {3.84896814556619*^9, 
   3.848968207683409*^9}, {3.8489682745173073`*^9, 3.8489682771112633`*^9}, {
   3.848968434865632*^9, 3.84896843639318*^9}, {3.8489690255455055`*^9, 
   3.8489691010338016`*^9}, {3.848969183328517*^9, 3.8489692182741203`*^9}, 
   3.8489692740637407`*^9, {3.848969814784196*^9, 3.8489698172274437`*^9}, {
   3.849011373459163*^9, 3.8490113758647623`*^9}, {3.8497540671651497`*^9, 
   3.8497540674271655`*^9}},ExpressionUUID->"ddd1cf63-b1f2-4be9-9956-\
acc7eab7d419"],

Cell[CellGroupData[{

Cell["\<\
As in the city-city example, except that now only antibody-virus distance is \
considered\
\>", "Item",
 CellChangeTimes->{{3.848678399157098*^9, 3.8486784734446907`*^9}, {
  3.8486785114187984`*^9, 3.8486785114187984`*^9}, {3.8489772008160677`*^9, 
  3.848977222498923*^9}, {3.849028942501647*^9, 3.8490289475273232`*^9}, {
  3.849753541216357*^9, 3.8497535532808385`*^9}, {3.8497540693061237`*^9, 
  3.8497540849998274`*^9}},ExpressionUUID->"2c4b5506-da10-4f83-a292-\
4c00e525e6d2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"metricAbVirus", "[", 
   RowBox[{"distMatrixRaw_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"distMatrix", "=", "distMatrixRaw"}], ",", "belowDynamicRange", 
      ",", "aboveDynamicRange", ",", "searchPoints", ",", 
      RowBox[{"dimensions", "=", 
       RowBox[{"OptionValue", "[", "\"\<Dimensions\>\"", "]"}]}], ",", "pnts",
       ",", "pVirus", ",", "pAb", ",", "mapDist", ",", "stress", ",", 
      "minSol", ",", "coords", ",", "pntsVirus", ",", "pntsAb"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"pntsVirus", "=", 
      RowBox[{"Array", "[", 
       RowBox[{"pVirus", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"First", "@", 
           RowBox[{"Dimensions", "@", "distMatrix"}]}], ",", "dimensions"}], 
         "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"pntsAb", "=", 
      RowBox[{"Array", "[", 
       RowBox[{"pAb", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Last", "@", 
           RowBox[{"Dimensions", "@", "distMatrix"}]}], ",", "dimensions"}], 
         "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Minimize", " ", "map", " ", "distances", " ", "as", " ", "per", " ", 
       "the", " ", "distance", " ", "matrix"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"stress", "=", 
      RowBox[{"errorMDS", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"pntsVirus", ",", "pntsAb"}], "}"}], ",", "distMatrix", ",", 
        RowBox[{"\"\<Comparing\>\"", "\[Rule]", 
         RowBox[{"OptionValue", "[", "\"\<Comparing\>\"", "]"}]}], ",", 
        RowBox[{"\"\<PenalizeError\>\"", "->", 
         RowBox[{"OptionValue", "[", "\"\<PenalizeError\>\"", "]"}]}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"minSol", "=", 
      RowBox[{"NMinimize", "[", 
       RowBox[{"stress", ",", 
        RowBox[{"Flatten", "@", 
         RowBox[{"{", 
          RowBox[{"pntsVirus", ",", "pntsAb"}], "}"}]}], ",", 
        RowBox[{"Method", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"OptionValue", "[", "\"\<SearchMethod\>\"", "]"}], ",", 
           RowBox[{"\"\<SearchPoints\>\"", "\[Rule]", 
            RowBox[{"OptionValue", "[", "\"\<SearchPoints\>\"", "]"}]}], ",", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"OptionValue", "[", "\"\<InitialPoints\>\"", "]"}], "=!=",
               "False"}], ",", "\[IndentingNewLine]", 
             RowBox[{"\"\<InitialPoints\>\"", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"Flatten", "@", 
                RowBox[{"OptionValue", "[", "\"\<InitialPoints\>\"", "]"}]}], 
               "}"}]}], ",", "\[IndentingNewLine]", "Nothing"}], 
            "\[IndentingNewLine]", "]"}]}], "}"}]}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"pntsVirus", ",", "pntsAb"}], "}"}], "/.", 
      RowBox[{"Last", "@", "minSol"}]}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.6341415938397913`*^9, 3.634141608886338*^9}, {
   3.641151901348711*^9, 3.6411519085043297`*^9}, 3.6411573862906446`*^9, {
   3.641157431493928*^9, 3.6411574345421352`*^9}, {3.6413245518239803`*^9, 
   3.641324580868143*^9}, {3.837531250069418*^9, 3.8375313042031975`*^9}, {
   3.848680074584319*^9, 3.8486800758396034`*^9}, {3.8486801220429077`*^9, 
   3.8486801954570627`*^9}, {3.8486802705548043`*^9, 
   3.8486802965657887`*^9}, {3.8486803443150578`*^9, 
   3.8486803685892167`*^9}, {3.848680436916373*^9, 3.848680439746497*^9}, {
   3.8486804922290277`*^9, 3.848680741444861*^9}, {3.8486808274359565`*^9, 
   3.8486808334180803`*^9}, {3.848681009327726*^9, 3.8486810215653524`*^9}, {
   3.848700228920141*^9, 3.8487002380026617`*^9}, {3.84870030997295*^9, 
   3.8487003875915985`*^9}, {3.848700436517048*^9, 3.8487004963554688`*^9}, {
   3.848700533970935*^9, 3.8487005571311674`*^9}, {3.84876036368104*^9, 
   3.8487603641475253`*^9}, {3.848760398992001*^9, 3.8487604154524136`*^9}, {
   3.8487604480764656`*^9, 3.8487604520872684`*^9}, {3.849011121283429*^9, 
   3.8490111454007616`*^9}, {3.8490113529495573`*^9, 3.849011356680922*^9}, {
   3.849011474977585*^9, 3.8490115260918155`*^9}, {3.8490165779834557`*^9, 
   3.8490166463638964`*^9}, {3.8490174177819242`*^9, 
   3.8490174570420446`*^9}, {3.8490174881355095`*^9, 
   3.8490175690342026`*^9}, {3.849754194396979*^9, 3.8497541951856136`*^9}, {
   3.8497542560384765`*^9, 3.84975427172796*^9}, {3.849754666788108*^9, 
   3.849754706268908*^9}, {3.849794489881177*^9, 3.849794490592001*^9}, {
   3.8497985963292017`*^9, 3.849798598717169*^9}, {3.849798821841422*^9, 
   3.849798824353825*^9}, {3.849799015016961*^9, 3.8497990151728635`*^9}, {
   3.8502446604189115`*^9, 3.8502446704807863`*^9}, {3.850249283509376*^9, 
   3.8502492840762005`*^9}, 3.8523095332544036`*^9, {3.857429655219775*^9, 
   3.8574296556883507`*^9}, 3.8574296952178636`*^9, 3.85742975689974*^9, {
   3.8579959145703163`*^9, 3.857995914713122*^9}},
 CellLabel->"In[28]:=",
 CellID->130945232,ExpressionUUID->"0a366518-6c76-48bd-8090-cc076356daa6"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Example", ":", " ", 
     RowBox[{
     "10", " ", "viruses", " ", "and", " ", "15", " ", "antibodies", " ", 
      "with", " ", "\[Sigma]"}]}], "=", 
    RowBox[{"0.5", " ", "error"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"coords", ",", "distMatrix"}], "}"}], "=", 
     RowBox[{"exampleData", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"10", ",", "15"}], "}"}], ",", "0.5"}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"coordsMDS", "=", 
     RowBox[{"metricMDS", "[", "distMatrix", "]"}]}], ";"}], "\n", 
   RowBox[{"analyzeMDS", "[", 
    RowBox[{"coords", ",", "coordsMDS"}], "]"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.8489656480199227`*^9, 3.848965660278557*^9}, 
   3.848965718068469*^9, {3.8489662151325035`*^9, 3.848966244183281*^9}, {
   3.8489662828426886`*^9, 3.848966289898882*^9}, {3.848966385323944*^9, 
   3.84896638591742*^9}, {3.8489664208210487`*^9, 3.848966421123945*^9}, {
   3.8489664935911584`*^9, 3.8489665332272167`*^9}, {3.8489665644235835`*^9, 
   3.848966592322567*^9}, {3.8489672547383146`*^9, 3.8489672573369265`*^9}, {
   3.8489723343649836`*^9, 3.8489723348560743`*^9}, {3.849753855173088*^9, 
   3.8497538856998653`*^9}, {3.8497539911104755`*^9, 3.8497540107210426`*^9}, 
   3.849754097675316*^9, {3.8497541482231827`*^9, 3.8497541746962214`*^9}, 
   3.84975428215582*^9, {3.849754322982175*^9, 3.849754367383792*^9}, 
   3.849754711427169*^9, 3.849790827222271*^9, {3.849791171571455*^9, 
   3.8497911825808253`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"2e99f0be-ca47-4d24-a263-28348f835ea1"]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
9lPEOgAAtUGsAwBQG8Q6AAC1QawDAFAbxDoAALVBrAMAUBvEOgAAtUGsAwBQ
GzySFQCA2iDNAQCoDWIdAIDaINYBAKgNYh0AgNog1gEAqA1iHQCA2iDWAQCo
DWIdAIDaINYBAKgNYh0AgNog1gEAqA1iHQCA2iDWAQCoDZ7gBgBAbZDmAADU
BrEOAEBtEOsAANQGsQ4AQG0Q6wAA1AaxDgBAbRDrAADUBrEOAEBtEOtAdVy7
dm12drasVYtSVl1vd+7cke/09u3bZRcE/YJYR7kWFxffePPG80fP7Bk7JK99
B49d/p+vLyws5L4iOa5KbDVapqambt68qdPlh9IPuXLklyINDg4ODAwMDQ11
sATZhIbHP0PwZ9PpshMGWmy3VN/c3Jzst7JLESI7c2RkZM2aNbJjpbRlFwf9
glhHWZaWls5Ozzy489C67S9sHpt5ZOKqvB4av7x+5NSWbxycmDx19+7dXFYk
R1TJSjm0rl27VrNsfHx8sEV/KP2QK/Fkhew41i1BlGxsbKxv2bJFZ5CZ5SM6
vZqxLqUNlEe+ODst6dIq/QLcbtEd666i+ick6GnEOkrx7vw/fW33s5LgEuXD
B6/5L3lr/SNP/PIff93liuTIrxnnH7qlglypmpQWtbNYV5bOsl2B2eRkxk/w
qjXCS2GknEnvyhmLbIIkey7ryms5sfRszf0dk0yXE6pKnUGhToh1FE/C+qt7
DknFPDbQ7SWJL3X5bpJd80syLqlyJNkhM1QkzrqPdSF5ockeqA9KhT2veu4q
kdQO7wfNStF9VwQ9Q+hyIQF+rDdbFXk5lyDZsRqIdRTs7t27D4389eaxmXCm
W7JLnb2z1ng5kGY58ksOViTjcol1a/VN2iidofTuBAH6xQVKqDOsXbu2+wq7
BKu22HSzkLDYWG+uNBbRGo/c8WBWFOzE1IX1I6eyZLq+No2eO3T0ex2sSA+n
qYd9ObD7CagTtddZ4MCbOpt2UWuudIoTkRmsF58uyo91WYJ8St6SOfUSfHhz
misV9qTIGB8ft0vq/ooiE2V1elKkG6Id9a27nSVv7ERlu0hLnqX88pXFltBs
2bJFZtBadpZrKNoXXbtKusWTD1pvBPse/f6EzdYZlz9R2RekX6K/9qRYz7Kl
QAdIcxRpYWHh4d1/kz3T9fWlrz3X7oqs0prlsBm57inHYe2OJQmoh33/YJ46
mzYjW3u4Vi2FRadEgHbbk09pbze/J7wml7YnZO9QF2imkJLIiiLpI7NZPzqb
ze2Zb1VaoWcFkTx1N9bdmbpd8hEpvy4ttWFENzlwWUS/WSmSbkvqPtEN0X2o
ZbBL9rrn/Vi3bbGF2Gcj9Xr9ePgLCsS6XiSqcssJehGxjiJdvHR13fYX2o31
DbuitchUcjAPt0XH0vwVVs+VH/w8yjKb5I6VQQ77klN6eNdYlyO5RJK7BOvt
ZrmgseVGs2ZHlg1JaqmIvWYtq7aar63a+sxLIeUHKb9uoJ4S6FlKJKoi/Q/9
tnRZderXoUsOzCA7U+axn7XYSckoq3NPY+xkz/aqnQK5n5LN9yfaF2RT9Pt1
+/XpLoqcTQViXbt2+I0kQDeIdRRp38FjqT3lYq+wt7sibdAO1/t8WnuKfMSO
/JYdGWezKTanvaWH+kgYaUhZ7OrHIxkhCZtlQ5Iq7JI7ST0N/CDTfSixaOWM
lD8SVZGJ+nF3G2Ovd/jFCJy6aC7bJoTbZPTdSHf6SLtKbKw34/aGP1E30N0i
/QYj2xiIdT1/6LI3BRBBrKNITx44XHCsZ795zRp1/bfcxtuMszWTI0PrfVbl
jJTZDvKaSrKuyC3PGTdHC+NW2LXGnTR/UqzHhk6WWNcWANnMyOXsQJl1jwVi
Tmvf/koH4nr+69lXZI16amEzdxPr2t/AFiX/1cJkj3VdZvhuRKBdxDqKtGfs
UNKN6uFXuyuyWM9+A1TSEb7ZqiNb3GScLTBnUlz6062RWSa2e3O9tatbW4Es
JNDem3usuz0KZEOyXEEOx7qeUEVq37aZfjtAOE/dNXYW624ZtKNFZ7Eeu0yg
Y8Q6ivT80TMZb21zX1LBb3dFetUy9mifJJDXbsBlnC0wZ6SxPenjtiHWWUtS
sq07nd0+eNrtLdCrP/dYt4VYdzs57QnfzxWOdb2Wrf3TXLpwf+sKiHX5uKa5
rsVvlk8tBrGO3BHrKNLrf3+9rbvb7B63DtalaeK3dSexI7wfnbGxHp6tmRbr
qY3wLqkPakb7/dgD3FvAZKWBQduaqxbrzVYt28Ld7SXoC8e67AEb/teVNDSN
To/datuH3cS6njq6l/WJdVQBsY4iLSwsrBve326sP7jzUAfryn55XQ/y1v/K
b6nWq7TWiT3LbM20RvgBr8ucf23dnUHSUBv5s9/pbN0AtDE83Ayee6zHjqvm
h69Lex0kndjEnko1nc2M9BzQ0yeZGDmRkP+m9n/IMlFX6u7VzmJ9VYeuRR8i
1lfDQJvKLm+hnj96Rmrfbd3d9p1nT3S2LhuILFBDnG3Rny0I/OW4bbwZZ0uK
DDsxiHRr9yv7kQRP7VHms1OI1C70HcR65KY/TW23J3wkwWNTzy9GbANLeOSW
2K4Utv8jH9ShbCLz+MWIZLF/g5t/bqbnddljXX8T6AmPfKXG+uLi4uwPJqcb
O4+OP3RwbOdfPbF/z9ihxsnzr165fuvWrWIK2XPkT/X05d9kfPVbrN+9e3fj
157O2B/+kYmrDzx+4P8s/N/O1mW9tmIf06a1NjcIrN7nBoHWEzuYzb/lzejx
X9NW37127ZpVOeWDMtG/wc1fRZY9kOVxNnam4VaHNStj65J6mVve0sJLkWSL
rNFbn1AWuWe8uXI6FG400IXEri6wCXaneeQUzobZ0WF/dFQZN0btg1pmq8Xr
B7UzgG6LXdGQH7QkumN1Hn2Cnv6yyUJ0KABdVKCNQr9i7ltHvsKx/vZPX5va
9+dvPXfP/PH73jt9/9zkvQe++gdf2fodqW2tHzn15cf2Xbx0dXl5ubDS9gpi
PeyX//jrB3dmetTLlm82fvrm/+pydXZhV5/Eqof3LS1+UsgBWQ/OOnaKjpPm
H5NTZ3PHJYt9hKglu5Ll2INpGq0hWO2sQFehY9mFr4/Hko+EOxhIsa3Luj7O
VdZuQ+dpASJ7wO3lbqc3Nsyazmw1aO3klrQn/cK4Ce4+SVYvrPtnBe4Yd/Yt
Wznt47YtsT3rBj7cb8EdWM9C2TZHi2dBP7ByH6INQKRrkSnuY3D9wjPKHFZD
INbffWfuzFOfe39q8LfnPua+JrcOWiPquu0v7D0wmddzsWuDWE8lyb7+kSc2
7JpKvJ7+5MtST3/7f/8yr/NGPeraGKHhY6nMrHPqSOwdzOb37PI/7o+X7qae
lFAWa6uITbQs9AwhMENkIHTdOZHCx45Dq/vTvVHdrZvPtdig9zJzlseaaGO+
5bJfkthYD+9t289Jl+Z1uP5I8WzVtsbIkPLNlV8A+6wuym3hDxeeMeGxGgKx
/tr0c1I9j2S6vKTa/tDmDXb4HdraODs9U2SZq49Yz2Jpaek7z55YN7xfwl1r
7lI9lx/kpFEq6f998uxvF/9f2WVECfQJLLV/tJledqn9ZqJ4gSe4nZgY9qvq
+np44+fdipUcmUspfNg//9M751/cJ1sh5yfz8/NFrppYB7qhT58puxSrSBsl
eN46VkOgtv7K2YlfHfmon+nzx+/76sNf6f624lV1ZebM95/4hBRVzkzmJu89
/+3Bl793pLC1E+tAl7QbXtmlWBXav45MxyoJxPrCwsLk438QyXRJyZPf/ION
Oye7HLJ7Vb37ztzL45+OlFySvbA6O7EOdO9mS9mlyJ/2ui+7FKitcE/44eFH
nv36v9cr7BLoUnl/duvHN35trPshu1dVbK8AKf+JieFiCpAl1geCiiknAKBm
wrH+/NEz/+XxI488+ujvLqY/+IXNj2594K+O+Jm+eaxaXeaSegV8d+8DxRQg
Y6x/cGN30quYcgIAaiYc62+8eSPLCN4bdlVrOIXzL+6bP36f3yXgpWOjNs/i
4uKrV65PTJ5ajdF1iHUAQO70SQThW1bDsS7ZN/Tw06ljhnQ2ZPfqefedue8/
8YlIrL/y9Md+MXdD3l1eXr7ww59s3DaxbvsLm8dmpPy5j65DrAMA8mWjJHUT
6+Ls9IzEXyDWJRBPTF3Itew5ePl7RyTHtSe8/Cs/SxV+ueXJA4c3fONY7FO/
8xpdh1gHAORIx3PQzlddxrrk4Pgzh2OTXZJxaGtj38FjS0tLuRY/H/Pz8y8d
Gz0+vkX+lfq7VsNfvXJdMj1wlpLL6DrEOgAgF/q0AhuFuPtYb7aS/eKlq+uG
90vFXFut5d9No+c2bps4fHK6h0aOXVhYeODxA7H19HxH1yHWAQC5aKw8dOnm
zZvh5/yq7A9mvXXr1vSF177z7Imd3z4o/770P374y3/8dR5FLo6cnAQGIc9x
dB1iHQCQC334gv6cb6zXQOPk+SxP+u5+dJ3wPemGWAcAZEesR+wZO5TaAl/Y
6DrEOgCgLcR6xPNHz2wem0nN9KqNrgMAQJNY9/To6DoAADQzx3pEYcUrXo+O
rgMAQJPaepweHV0HAABi3de7o+sAAPocsR6rNqPrAAD6CrEOAEBtEOsAANQG
sQ4AQF8h1gEAqA1iHQCA2iDWAQCoDWIdAIDaINYBAKgNYh0AUIzFxcXZH0xO
N3aeObTtRy8fZUjP1UCsAwAK8O47cy/u/cL1iY/MH7/vvdP3v/XcPfLf+fn5
sstVN33y7DagJ1y7dm12drasVYtSVo1+IBVzCfH3pwZ/e+5j9pL/nhj9DHX2
fJHm6BO3b9+W2Gq0TE1N3bx5U6fLD/JWuWW7c+eOFGlwcHBgYGBoaKiDJcgm
NDz+GYI/m06XnTDQYrulOtzSyl7K8hGZLbKN/s5x99Lc3Jx8BamLtd8f+YjO
L/+Gx/uCuTJzRqrnbqbrSybKW2WXrlaIddSeHHh1xMW1a9fqYXl8fHywRX8o
/cis6aCF7DjWR0ZG1qxZM7BCNjY21rds2aIzyMzyEZ1ezViX0mp5ZOfYpqV+
WTKD7QTZWIt12VjbcJ2udLfrnk9auBTDfmHkI7oPZYG2fFt1ltODulpcXHz1
yvWJyVN7xg41Tp6Xn2/dumXvnjm07b3T9/uxLhX24+NbSix2/RDrqDc56mrG
+UdsqdNpWJQe60qL2lmsK0tn2a7AbJJNfoJXrRFeCiPltP+64Rv+oM0pX3rs
W/4S3LMdO9UxsqNkf8rS3MiWj8gUmd+NdZlBPl6pU6NiLC8vX/jhTzZum1i3
/QV9LOam0XPrR059+bF9Fy9dlXebxHqBiHXUmOaXHJOT6lCSHTJDReKs+1gX
VicNVBsjdcwKmp2djewH+a9epAifhumJjQauvyfDe9h2nXs6YdP9lcoell+t
yJ6UuJdy9lWyS2o/eeDwhm8ckzQfPngt8pKg33tg8u7du0mN8HOT975ydqLs
jagVYh3lWlpa+vnbr790bPTExPDl7+17+6ev5fXIe2uMDXdCk4N2RTIul1iX
WNGtTtoonaH07gQB+sVFSii7RbZIk11OS5I+O9KSVCtP3cNW03dDPPDMLG2T
j0zUVqD+aY1/9cp1yXQ/0O01tLVxdnpmcXHx8Dc/7VfVzzz1uYWFhbI3olaI
dZTo3XfmTh/4yo//+g/nj98nf+By3n594iN/s/s//2LuRvcL16OxBEF4NqlY
+Udmneh2jgp8NjCbdlFrrnSK83t8WS8sXZQfOrIE7QAmc2bsoKW1y6RkkSTy
25ltRZGJsjo9KdIN0Y76dlXakjd2orJdpCXPUn75yvwSaqxLCTV2Y09L7Iyl
41i3U0H3zME6Zvj7U+aPPX2K3YRakkR+4PEDsfX0D9XZh/fLzPJ3LcmudXb5
e//VkY+eGP3Mz966XvZG1A2xjrJIpv/tE5/yL7fJ3/v3n/iEvNvNwq3SmuXo
6maNHLq1vVd71unFd//QnTqbNiNbe7g2CwuLTuuFpb25ZAl+T3hZiG6C9ezK
UpcPNFNou3GkiVhmsyvLNpvbM18vLlsDtTVW235zN9bdmbpdWqXVpaU2jOgm
+5dFNNa1/Elfq1bVm8nX0LO0h9iW2hQ7l5C3/IIl1eIr3iSSl4uXrm7YNRXO
dHltGj2n8y8tLb1yduK7ex84MTF86fwJ6umrgVhHKe7evXvqO1+SSrp/rU2T
/ci3Pt/N3ax2KG6rgV3z162XyQ9+HmWZTaLQyiBZI3GgWaOxLgf8SC8s6+1m
oaMR5kazhnuWDUlqqfCvWeuqNUzdWLdeZFJI+UHKrxuopwR6lhJJtEj/Q78t
XaM5XHJdcuwWWZ/22Aq77i5dezexnnR+MrAi0GHeaJ+NjLfj9bTGyfMS2amx
LtX5skvaR4h1lOIffjxzdfzfxWa63c169fLfdbx8O/i31R1OK1mRj1jl13Ik
42w2xea0tzQ7IsGk2WGhox+P1LgDl5VjCxP5uERzUk+DSBW1ubIPJSutnJHy
R9ItMlE/7m5j7PUOvxixsWuxbhX2SMc295ynm1j32yLss+79g9qIkbQQKWTG
ppVet2fsUGoLvL7KLmkfIdZRisvf2zc3eW8g1n83/NTEcMfLt1jPfvOa5YX/
llZUNUcyztZ0sjUym/XWji2zZYFeR7AaqC0z4+ZoYdwKu9a4k+ZPivWkkE2N
dW0BkM10kz1cft1j4VhvxnUecKvqzdWJ9ebK4AADjsiphWsg7TbDenj+6JnN
YzOpmS7zlF3SPkKsoxQS2ZFhJP3Xd/c+0PHyLdazj8WalMLNVh3Z4iDjbIE5
k8LFn24hkqXhN8La1a2tQBYSaBbOPdbdHgWyIVkuNGeMdb+3v2yse5qUSyN8
UmXcuuTZpsXOlvRLUjNvvHlj/cip1FjfsKv+1yOqg1hHKc6/uC/pwrq+5N2X
jo12vHy9uDnQzrX1QF67cZBxtsCckcb2pI/bhtj92pJcbd0Q7fbB025vgV79
uce6LcTaruW0J3zbV8ZYb3oV9sjFhe67zLkV7dgTqtSB7/ok1hcXF4cefjr1
wvqDOw+VXdI+Eoj1gTYVWWz0up+9df36xEfC19b//tLJblahR12/rTuJpbAf
nbGxHp6tmRbrqY3wLskszWi/H3uAVdilJLLSQItxc9Vivdmqtlu4x94mZrLH
uvUwnJqa0p3jl6SbG9zcOnjS/FaG2FPH/jkqnp2eWbf9hUCsS3X+xNSFsovZ
RwJPcJPfydOXf5P9VUr50aPu3r175Fufjx1MUi+sv7j3C1IR6GYV2S+va1Ba
067fUq195KwTe5bZmmmN8ANelzn/2ro7g6ShDUWeZfObTjcAbQwPN4PnHuuR
d3X4tYHgZRENyiyx3nR6+/uj33c5HI3bS1AnJnW81PmTYj11zIR6WF5eHn/m
cGyySz19aGtj38FjPKOtSOHaOrGO1fOLuRs/eGqtf4Vdpszs/5O3f/pa96vQ
OJOja6CGONuiP2s92j8ay3LcFuyMsyXFup0YRLq1+5X9SIIHKrNJ7BQitQt9
B7EeuelPU9vtCR9JW11g+LJIUgOLH+u2e/2LC53FuvVk8E8Skj4Se6Nfc+Ur
7oee8EqS/eKlq+uG90vFXMeEl383jZ7buG3i8MnpvMaNREbEOkokyX70yS9e
n/iIjjIn/85N3nvmqc/9+udv6OMhumS9tmIf0ybvSv3aPYbHjnaiTdkdzObf
8ma0Xq9pq+9KfVCXqUWVif4Nbv4qsuyBLI+zsTMNt4VfQzC2yqm35MtbWngp
kmyRhqn8oA8y04Z3d4Gam+FGA12IP12+x9ih52LPE5KuvyTFvfuoF3/36qf8
jgE2WJBfWv3u+uG+dVQQsY7aswu79mDNRuvZmsIPO4khe1CIjf/mH+pTZ7Nx
1XS9fvRYsitZjj2YRodgtbMCXYWOZRe+Ph5LPhLuYKDdyHVd2qAta7eh87QA
kT3g9nK3aLPQ1JmtoUBHyUvak35hIichjZUHodqi3JndqrqOcBvppm6D2KQ+
mDWpu77uf/mI+0Hd/KSvo39GmStS+MGvMMQ6+oQkhQ6uro3D4UOujvXdWBmJ
vYPZGh7/4/546W7qSQllsbaKhjfcekZ6hhCYwR3R3XZOpPCx49Dq/nRvVHfr
5nMtNui9zJzl6SfamO/GZXhPule9/WLb/LHTrWCpd9Nb2Wxzwr9C/TMmfDGy
PPgVhlgHUCl671jvPgFNr6f0bvmrJuODX8suZoUQ6wCqRp8+U3YpOqGtDX31
vPXVlvHBr2UXs0KIdQAVpN3wyi5Fe3R0WTI9R209+BWKWAdQTTdbyi5FG/QW
gLJLUROLi4uzP5g88Ff/9aGNf/bQYzvCI8/bg1/RJNYBABXz7jtzL+79gt76
+t7p+9967p5vP/KpwODzPPjVRawDAKpjaWlJMj0yUJX8d+yrf8yDX7Mg1gEA
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
AAAAAEA/+//3kJMY
    "], {{0, 241.2}, {401.4, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->120.],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
    Automatic],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->270,
  ImageSizeRaw->{401.4, 241.2},
  PlotRange->{{0, 401.4}, {0, 241.2}}]], "Text",
 CellChangeTimes->{{3.8497911589818645`*^9, 3.849791162002866*^9}},
 CellLabel->
  "Out[514]=",ExpressionUUID->"f4f219e7-fdf3-4d7f-b3c1-614b1d63a557"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"(*", " ", 
   RowBox[{"Example", ":", " ", 
    RowBox[{
    "Can", " ", "handle", " ", "Missing", " ", "values", " ", "as", " ", 
     "well", " ", "as", " ", 
     RowBox[{"GreaterThan", "/", "LessThan"}], " ", "bounds"}]}], " ", "*)"}],
   "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"coords", ",", "distMatrix"}], "}"}], "=", 
    RowBox[{"exampleData", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"10", ",", "15"}], "}"}], ",", "0.5"}], "]"}]}], ";", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"'", 
     RowBox[{"fracMissing", "'"}], " ", "values", " ", "will", " ", "be", " ",
      "Missing"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"SeedRandom", "[", "12345", "]"}], ";", "\[IndentingNewLine]", 
   RowBox[{"fracMissing", "=", "0.3"}], ";", "\[IndentingNewLine]", 
   RowBox[{"posMeasured", "=", 
    RowBox[{"Position", "[", 
     RowBox[{
      RowBox[{"UpperTriangularize", "@", "distMatrix"}], ",", 
      RowBox[{"Except", "[", "0.", "]"}], ",", 
      RowBox[{"{", "2", "}"}], ",", 
      RowBox[{"Heads", "\[Rule]", "False"}]}], "]"}]}], ";", 
   "\[IndentingNewLine]", 
   RowBox[{"posWithheld", "=", 
    RowBox[{"RandomSample", "[", 
     RowBox[{"posMeasured", ",", 
      RowBox[{"Round", "[", 
       RowBox[{"fracMissing", " ", 
        RowBox[{"Length", "@", "posMeasured"}]}], "]"}]}], "]"}]}], ";", "\n", 
   RowBox[{"distMatrix", "=", 
    RowBox[{"ReplacePart", "[", 
     RowBox[{"distMatrix", ",", 
      RowBox[{
       RowBox[{"Join", "[", 
        RowBox[{"posWithheld", ",", 
         RowBox[{"Reverse", "/@", "posWithheld"}]}], "]"}], "\[Rule]", 
       RowBox[{"Missing", "[", "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"'", 
     RowBox[{"fracGreaterThan", "'"}], " ", "largest", " ", "values", " ", 
     "will", " ", "be", " ", "GreaterThan"}], " ", "*)"}], "\n", 
   RowBox[{"(*", " ", 
    RowBox[{"'", 
     RowBox[{"fracLessThan", "'"}], " ", "largest", " ", "values", " ", 
     "will", " ", "be", " ", "GreaterThan"}], " ", "*)"}], "\n", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"fracLessThan", ",", "fracGreaterThan"}], "}"}], "=", 
    RowBox[{"{", 
     RowBox[{"0.3", ",", "0.3"}], "}"}]}], ";", "\n", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"thresholdSmall", ",", "thresholdLarge"}], "}"}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "[", 
       RowBox[{"[", 
        RowBox[{"Round", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"fracLessThan", ",", 
            RowBox[{"1", "-", "fracGreaterThan"}]}], "}"}], 
          RowBox[{"Length", "@", "#"}]}], "]"}], "]"}], "]"}], "&"}], "[", 
     RowBox[{"Sort", "@", 
      RowBox[{"DeleteMissing", "@", 
       RowBox[{"Flatten", "@", "distMatrix"}]}]}], "]"}]}], ";", "\n", 
   RowBox[{"distMatrix", "=", 
    RowBox[{"distMatrix", "/.", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"val_Real", "/;", 
         RowBox[{"val", "<", "thresholdSmall"}]}], "\[RuleDelayed]", 
        RowBox[{"LessThan", "[", "thresholdSmall", "]"}]}], ",", 
       RowBox[{
        RowBox[{"val_Real", "/;", 
         RowBox[{"val", ">", "thresholdLarge"}]}], "\[RuleDelayed]", 
        RowBox[{"GreaterThan", "[", "thresholdLarge", "]"}]}]}], "}"}]}]}], 
   ";", "\n", 
   RowBox[{"coordsMDS", "=", 
    RowBox[{"metricMDS", "[", "distMatrix", "]"}]}], ";", 
   "\[IndentingNewLine]", 
   RowBox[{"analyzeMDS", "[", 
    RowBox[{"coords", ",", "coordsMDS"}], "]"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.8490122353191924`*^9, 3.849012254481*^9}, {
   3.8490131351956234`*^9, 3.8490131824468737`*^9}, {3.8490134127272205`*^9, 
   3.849013443375121*^9}, {3.849013495653434*^9, 3.8490135066575756`*^9}, {
   3.8490136000566373`*^9, 3.8490136036361527`*^9}, {3.849013653247308*^9, 
   3.8490136548609133`*^9}, {3.849013882683123*^9, 3.849013901909738*^9}, {
   3.849014130060865*^9, 3.84901419250073*^9}, {3.8490143968074*^9, 
   3.849014402058319*^9}, {3.849014520220711*^9, 3.849014548401412*^9}, {
   3.849014883764529*^9, 3.8490149573646755`*^9}, {3.8490151744050446`*^9, 
   3.8490151906651106`*^9}, {3.849015223640381*^9, 3.8490152514204535`*^9}, {
   3.849015307996291*^9, 3.8490153405105476`*^9}, {3.849015394577076*^9, 
   3.849015404475035*^9}, {3.849015439707387*^9, 3.849015445633521*^9}, {
   3.849017710109696*^9, 3.8490177141741915`*^9}, 3.849017860318268*^9, {
   3.8490181054421325`*^9, 3.849018160427604*^9}, 3.849018209375128*^9, 
   3.849649870226945*^9, 3.84975266998937*^9, 3.849788495789372*^9, {
   3.8497885532201223`*^9, 3.8497886247377405`*^9}, {3.8497912077414246`*^9, 
   3.849791271740226*^9}, {3.8497913338431745`*^9, 3.8497914351368694`*^9}, 
   3.849794393821904*^9, 3.850244909602337*^9},
 CellLabel->"In[30]:=",ExpressionUUID->"c024c525-ffa3-47b3-a83a-bbca40b4c74d"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
9i27+WRJJt+ClUEkItZTWegpSLwgX5Cbg35r7klV/+rcKwhqoox1kYPaIMtU
mOQjE5yklL8lKa3fD0lCU9arJFJHqbX9T1n3zNrBrq24e0lb+RutSW2LfiNu
XJ9+a5HLNAGtay+6CY5rCXq3Y6SHplUWgTb66IHzQ+mV9+XTP/jDz0QmUfWP
Ifs/xbnJy2KHgNbFF2PjF2PLVil1bZvKyJvW5T/RLsBVFJ2bunxQLVpP+sPW
7kdrp+Ll6H7BtA3zdp29mVq3nmFFsxY6FovsYh4xE2VMZlsspX2k4oioTZVn
5yjdPWKcjGdXtaHtmzp34XY5IhtTr2KEz6sVlUQ/jYTTR2ZCYrVeXj3xhjf6
/7Da5pF/4YDWtf9Q95sQ84ye/ZpQ5cD54dkzb3d/Y6e8atS6aGLw2aOxZhdx
dO8oHTx84tatW5WWXP+u9EJ/7dGntZM3rVfdPpUuH1QR2on1I6/yoPVYVOt5
i+tridazN4LNyfgfuVPBGZOVkwWko0j/emXk2ro6To4VuYE6S110zOtuca8I
+Olj/9dstBvoH6aeVysqifaX/GJIJpa4Fq1rqINlJb9qYbJrXfPM4VRY49DW
aMLih5WeH/SLC3RWYxGzX7pybX3vIRmY66Su/NzcP7Fp5/DRU5PuyrHZ0TgE
fY/WfaprnyqWD6oLTfuDrwg97zX0xt7qaInWs387Sb4or15eVHllTBZImRTx
7m+3KWvZWGn/JDLmtWCV2F5o0v9aatcorPVKS5LlX74Wrbtl0NCI6rQem2fB
kN6UxYc0Z3aiCq1/5jOfqc6hN2/enLz45neeG9v91GH5+co/vPbzX/yqLrVA
62Gyt08VywfVjgXR5eTuDw2T1vAtYY2HzNnKadnnUgK+doWbMVkgZWSyPWl3
q4iFfskAP8uFFb2CrFFhLppJ7F9s0v9a6v9gWOuVlqQJWpfd1eZ6lNgJN7Re
Xr32oQOE5kiqovODXm0X7v+bjU0oW3bQepjs7VPF8kE1YjfP5seeFqDVsTIP
nJPOhksztV5ePS9lvzfHfOGrM1br4WTlNK2nTsK7SB9S5e6GkyUhKW2ZXJfA
gjBJ/2up8S1hrVdaEt0eu1Sd1boWrWtnz52zRetJ6MSprcTYhFt+sp8fnj3z
9h2d/0bSP/wf/uWZvffMz883umzZQethsrfPvoGRzf2T2x7asWP7ht77v/7A
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
/H9YxTF8
    "], {{0, 241.2}, {401.4, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->120.],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
    Automatic],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->270,
  ImageSizeRaw->{401.4, 241.2},
  PlotRange->{{0, 401.4}, {0, 241.2}}]], "Text",
 CellChangeTimes->{{3.8502448950914783`*^9, 3.850244903951045*^9}},
 CellLabel->
  "Out[609]=",ExpressionUUID->"7d0da237-f00d-415c-8086-58c31e60d8a6"]
}, Closed]],

Cell[CellGroupData[{

Cell["Classical Multidimensional Scaling (cMDS)", "Subsubsection",
 CellChangeTimes->{{3.848680045691197*^9, 3.848680046756463*^9}, {
  3.8489759186261754`*^9, 3.8489759285538692`*^9}},
 CellTags->
  "secClassicalMDS",ExpressionUUID->"1d4f0a1c-2d2d-48cc-87d1-e4f3094414ee"],

Cell["\<\
This algorithm cannot handle Missing values or GreaterThan/LessThan values, \
so we replace missing entries by the mean of their row/column and treat \
bounds as concrete values.\
\>", "Text",
 CellChangeTimes->{{3.849970324434351*^9, 
  3.849970383884675*^9}},ExpressionUUID->"31e70c51-0b6f-498d-b918-\
945ca4a1fe90"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "If", " ", "the", " ", "distance", " ", "matrix", " ", "is", " ", 
     "symmetric"}], ",", " ", 
    RowBox[{"use", " ", "original", " ", "MDS", " ", "formulation", " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"city", "-", 
        RowBox[{"city", " ", "distance"}]}], ")"}], ".", " ", "Otherwise"}]}],
     ",", " ", 
    RowBox[{
    "assume", " ", "the", " ", "bipartite", " ", "graph", " ", "problem", " ", 
     RowBox[{"(", 
      RowBox[{"antibody", "-", 
       RowBox[{"virus", " ", "data"}]}], ")"}]}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ClearAll", "[", 
    RowBox[{
    "classicalMDS", ",", "classicalCityCity", ",", "classicalAbVirus"}], 
    "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "classicalMDS", "]"}], "=", 
     RowBox[{
      RowBox[{"Options", "[", "classicalCityCity", "]"}], "=", 
      RowBox[{
       RowBox[{"Options", "[", "classicalAbVirus", "]"}], "=", 
       RowBox[{"Join", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<Dimensions\>\"", "\[Rule]", "2"}], ",", 
           RowBox[{"\"\<Rank\>\"", "\[Rule]", "2"}], ",", 
           RowBox[{"\"\<Verbose\>\"", "\[Rule]", "False"}], ",", 
           RowBox[{"Method", "->", "\"\<SDP\>\""}], ",", 
           RowBox[{"\"\<AddFinalMDS\>\"", "\[Rule]", "False"}], ",", 
           RowBox[{"\"\<SearchMethod\>\"", "\[Rule]", "Automatic"}]}], "}"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Add", " ", "default", " ", "option", " ", "values", " ", "from", 
           " ", "errorMDS"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"FilterRules", "[", 
          RowBox[{
           RowBox[{"Options", "[", "errorMDS", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"\"\<Comparing\>\"", ",", "\"\<PenalizeError\>\""}], 
            "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Add", " ", "default", " ", "option", " ", "values", " ", "from", 
           " ", "metricMDS"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"FilterRules", "[", 
          RowBox[{
           RowBox[{"Options", "[", "metricMDS", "]"}], ",", 
           RowBox[{"{", "\"\<SearchPoints\>\"", "}"}]}], "]"}]}], 
        "\[IndentingNewLine]", "]"}]}]}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"classicalMDS", "[", 
     RowBox[{"distMatrix_", ",", 
      RowBox[{"opts", ":", 
       RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Choose", " ", "appropriate", " ", "algorithm"}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"SymmetricMatrixQ", "[", "distMatrix", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"classicalCityCity", "[", 
         RowBox[{"distMatrix", ",", "opts"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"classicalAbVirus", "[", 
         RowBox[{"distMatrix", ",", "opts"}], "]"}]}], "\[IndentingNewLine]", 
       "]"}]}], "\[IndentingNewLine]", "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.6341415938397913`*^9, 3.634141608886338*^9}, {
   3.641151901348711*^9, 3.6411519085043297`*^9}, 3.6411573862906446`*^9, {
   3.641157431493928*^9, 3.6411574345421352`*^9}, {3.6413245518239803`*^9, 
   3.641324580868143*^9}, {3.837531250069418*^9, 3.8375313042031975`*^9}, {
   3.8486800910355268`*^9, 3.8486801266801977`*^9}, {3.848965024178857*^9, 
   3.848965074774905*^9}, {3.8489652353323727`*^9, 3.848965370445981*^9}, {
   3.848966870806734*^9, 3.848966871157892*^9}, {3.8489670332627993`*^9, 
   3.8489672438461647`*^9}, {3.8489706053810835`*^9, 3.848970605521387*^9}, {
   3.8489723802529416`*^9, 3.84897239215905*^9}, 3.8489724223126974`*^9, 
   3.849970122829768*^9, {3.849970237518404*^9, 3.8499702607832055`*^9}, {
   3.849970389386997*^9, 3.8499704063954597`*^9}, {3.849970462236925*^9, 
   3.849970467394307*^9}, {3.849972188084632*^9, 3.8499722064619093`*^9}, {
   3.849981783251279*^9, 3.8499818435945873`*^9}, {3.850264001665805*^9, 
   3.8502640018541594`*^9}, {3.8517875065372715`*^9, 3.851787506683359*^9}, {
   3.857395204839851*^9, 3.857395219793313*^9}, 3.8573952658254147`*^9, {
   3.85739557073003*^9, 3.8573955709227653`*^9}, {3.85860382142061*^9, 
   3.8586038244490304`*^9}, {3.8586038805679975`*^9, 3.8586038826032724`*^9}},
 CellLabel->"In[31]:=",
 CellID->850978045,ExpressionUUID->"ce0c9886-d418-4ed1-84a1-702e9af64940"],

Cell[TextData[{
 StyleBox["Classical MDS Algorithm",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 " (",
 StyleBox["City-City Distances",
  FontSlant->"Italic"],
 ")\nInput: \n(1) Distance matrix ",
 Cell[BoxData[
  FormBox["D", TraditionalForm]],
  FontWeight->"Bold",ExpressionUUID->"665dae28-9e76-4faa-9c19-a65c65a61b69"],
 " between ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "a9b69c23-3b5b-4599-94d6-13c592cb21df"],
 " cities. ",
 StyleBox["Cannot",
  FontSlant->"Italic"],
 " contain ",
 Cell[BoxData["Missing"], "Input",
  CellChangeTimes->{{3.849791060655055*^9, 3.849791061162825*^9}},
  ExpressionUUID->"6c6c0c2d-f00b-484a-8cc3-48db2df38eaa"],
 ", ",
 Cell[BoxData["GreaterThan"], "Input",
  CellChangeTimes->{{3.849791060655055*^9, 3.849791061162825*^9}},
  ExpressionUUID->"b5ada858-5dd2-473a-ab7c-c317465987f3"],
 ", or ",
 Cell[BoxData["LessThan"], "Input",
  CellChangeTimes->{{3.849791060655055*^9, 3.849791061162825*^9}},
  ExpressionUUID->"55a568b4-9f05-45fb-b007-c35c4e4300d0"],
 " values\n(2) The dimension ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "ba479343-7383-4c2b-aa68-5de2f4ff86d8"],
 " of the final coordinates (usually ",
 Cell[BoxData[
  FormBox[
   RowBox[{"d", "=", "2"}], TraditionalForm]],ExpressionUUID->
  "4c73f641-31ce-4950-9bb7-d6ffb6fee4c8"],
 ")"
}], "Text",
 CellChangeTimes->{{3.848967272680441*^9, 3.8489672765157146`*^9}, {
   3.8489676366440783`*^9, 3.848967686587202*^9}, {3.8489681543553314`*^9, 
   3.8489681594450164`*^9}, {3.8489683445288877`*^9, 3.848968349281577*^9}, {
   3.848969107404827*^9, 3.8489691159494877`*^9}, {3.8489692043945913`*^9, 
   3.8489692103791137`*^9}, 3.848969249356746*^9, {3.8497910515688543`*^9, 
   3.8497910766539907`*^9}},ExpressionUUID->"ce06eb05-7094-461c-8606-\
f1f6ab5bb099"],

Cell[TextData[{
 "Compute the double-centered squared-distance matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["Q",
     FontWeight->"Bold"], "=", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "2"]}], 
     StyleBox[" ",
      FontWeight->"Bold"], 
     StyleBox["J",
      FontWeight->"Bold"], 
     StyleBox[" ",
      FontWeight->"Bold"], 
     SuperscriptBox[
      StyleBox["D",
       FontWeight->"Bold"], "2"], 
     StyleBox[" ",
      FontWeight->"Bold"], 
     StyleBox["J",
      FontWeight->"Bold"]}]}], TraditionalForm]],ExpressionUUID->
  "c461f752-2210-42df-b814-d665905ae333"],
 " where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["J",
     FontWeight->"Bold"], "=", 
    RowBox[{
     RowBox[{
      StyleBox["I",
       FontWeight->"Bold"], "-", 
      RowBox[{
       FractionBox["1", "n"], 
       StyleBox["1",
        FontWeight->"Bold"], 
       StyleBox[" ",
        FontWeight->"Bold"], 
       SuperscriptBox[
        StyleBox["1",
         FontWeight->"Bold"], "T"]}]}], "\[Element]", 
     SuperscriptBox["\[DoubleStruckCapitalR]", 
      RowBox[{"n", "\[Cross]", "n"}]]}]}], TraditionalForm]],ExpressionUUID->
  "8b09c15c-ca86-4ba9-8eca-1c4c9efef666"],
 ". This equals the Gram matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["Q",
     FontWeight->"Bold"], "=", 
    RowBox[{
     StyleBox["X",
      FontWeight->"Bold"], 
     StyleBox[" ",
      FontWeight->"Bold"], 
     SuperscriptBox[
      StyleBox["X",
       FontWeight->"Bold"], "T"]}]}], TraditionalForm]],ExpressionUUID->
  "dcbdb35e-fc49-4f50-a947-cd6429fb86d7"],
 " of the coordinates ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["X",
     FontWeight->"Bold"], "\[Element]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", 
     RowBox[{"n", "\[Cross]", "d"}]]}], TraditionalForm]],ExpressionUUID->
  "032ea876-2847-4ac9-8f7b-1c2cbaaecf97"],
 ", provided that the center-of-mass lies at the origin"
}], "Item",
 CellChangeTimes->{{3.848967288058903*^9, 3.8489673557256804`*^9}, {
   3.848967540125181*^9, 3.8489675627068014`*^9}, {3.8489676079296246`*^9, 
   3.8489676079296246`*^9}, {3.848967922739856*^9, 3.8489679246070404`*^9}, {
   3.8489683032979355`*^9, 3.848968406622529*^9}, 3.8489684852447996`*^9, {
   3.8489691972685595`*^9, 3.848969201549968*^9}, {3.8489692520256515`*^9, 
   3.8489692520256515`*^9}},ExpressionUUID->"27035cf1-d461-4042-a48a-\
ca1d65655583"],

Cell[TextData[{
 "Compute the singular value decomposition, thresholding to the ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "a7a3e97c-c8b5-4521-9831-fc4b749b40f7"],
 " largest values. Equating ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["Q",
     FontWeight->"Bold"], "=", 
    RowBox[{
     RowBox[{
      StyleBox["U",
       FontWeight->"Bold"], 
      StyleBox[" ",
       FontWeight->"Bold"], 
      StyleBox["\[CapitalSigma]",
       FontWeight->"Bold"], 
      StyleBox[" ",
       FontWeight->"Bold"], 
      SuperscriptBox[
       StyleBox["V",
        FontWeight->"Bold"], "T"]}], "=", 
     RowBox[{
      StyleBox["X",
       FontWeight->"Bold"], 
      StyleBox[" ",
       FontWeight->"Bold"], 
      SuperscriptBox[
       StyleBox["X",
        FontWeight->"Bold"], "T"]}]}]}], TraditionalForm]],ExpressionUUID->
  "21e9cad3-4516-4180-9b93-6788fcf30732"],
 " (and noting that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["U",
     FontWeight->"Bold"], "=", 
    StyleBox["V",
     FontWeight->"Bold"]}], TraditionalForm]],ExpressionUUID->
  "36c635d7-9633-45ae-9646-504bc64e06ba"],
 " for symmetric matrices and that ",
 StyleBox["\[CapitalSigma]",
  FontWeight->"Bold"],
 " is always symmetric), the coordinates are given by ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["X",
     FontWeight->"Bold"], "=", 
    RowBox[{
     StyleBox["V",
      FontWeight->"Bold"], 
     StyleBox[" ",
      FontWeight->"Bold"], 
     SuperscriptBox[
      StyleBox["\[CapitalSigma]",
       FontWeight->"Bold"], 
      RowBox[{"1", "/", "2"}]]}]}], TraditionalForm]],ExpressionUUID->
  "deb406ea-165c-4070-8634-0a3b3971293e"]
}], "Item",
 InitializationCell->True,
 CellChangeTimes->{{3.848967288058903*^9, 3.8489673557256804`*^9}, {
  3.848967540125181*^9, 3.8489675627068014`*^9}, {3.8489676081669364`*^9, 
  3.848967628077548*^9}, {3.8489676916001635`*^9, 3.8489676919216137`*^9}, {
  3.8489677517856417`*^9, 3.8489678284218316`*^9}, {3.848967861746834*^9, 
  3.8489678705016527`*^9}, {3.848967932366068*^9, 3.848967965212701*^9}, {
  3.8489680393088455`*^9, 3.8489680393119593`*^9}, {3.848969130458514*^9, 
  3.848969130458514*^9}, {3.84896923490837*^9, 
  3.848969257129787*^9}},ExpressionUUID->"9a6a5636-dbd6-4242-b474-\
209fd108eceb"],

Cell["\<\
The resulting coordinates are centered on the origin and may be rotated \
relative to the true coordinates. Hence, you may need a rigid transform to \
line them up\
\>", "Item",
 InitializationCell->True,
 CellChangeTimes->{{3.848967288058903*^9, 3.8489673557256804`*^9}, {
  3.848967540125181*^9, 3.8489675627068014`*^9}, {3.8489676081669364`*^9, 
  3.848967628077548*^9}, {3.8489676916001635`*^9, 3.8489676919216137`*^9}, {
  3.8489677517856417`*^9, 3.8489678284218316`*^9}, {3.848967861746834*^9, 
  3.8489678705016527`*^9}, {3.848967932366068*^9, 3.848967965212701*^9}, {
  3.848968043492465*^9, 
  3.8489680960979843`*^9}},ExpressionUUID->"7832ea9d-38ae-408a-a957-\
9c104a3acf47"],

Cell["Notes:", "Text",
 CellChangeTimes->{{3.8502649648073997`*^9, 
  3.850264968153663*^9}},ExpressionUUID->"30e108c8-921f-46e2-813c-\
c196ec6cf3b4"],

Cell[TextData[{
 "Implemented the ability to use a rank ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "a0a843cb-3d81-47a9-9608-e7134c1a17f0"],
 " greater than the dimensions ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "bd0b6be5-2993-4c53-b968-b22208ea3f32"],
 " of the points. The subsequent linear transformation from ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", "->", "d"}], TraditionalForm]],ExpressionUUID->
  "a57bf04f-6b64-4cb2-b29c-71bff7ab697c"],
 " dimensions can be determined using numeric minimization or with SDP"
}], "Item",
 CellChangeTimes->{{3.8502649692305803`*^9, 3.8502650084984784`*^9}, {
  3.8502650923211155`*^9, 3.850265124816098*^9}, {3.850679093250738*^9, 
  3.8506791704724746`*^9}},ExpressionUUID->"134d8830-4afc-48f1-8dd4-\
316d051ed838"],

Cell[CellGroupData[{

Cell["\<\
In general, this seems to buy you very little benefit, even for large error. \
The antibody-virus version of this problem explains these methods in more \
detail\
\>", "Item",
 CellChangeTimes->{{3.8502649692305803`*^9, 3.8502650084984784`*^9}, {
  3.8502650923211155`*^9, 3.850265124816098*^9}, {3.850679093250738*^9, 
  3.850679158971822*^9}},ExpressionUUID->"52430d42-dc07-4b03-a487-\
b0eac1c9885f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"classicalCityCity", "[", 
   RowBox[{"distMatrixRaw_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", "\n", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"distMatrix", "=", "distMatrixRaw"}], ",", 
      RowBox[{"dim", "=", 
       RowBox[{"OptionValue", "[", "\"\<Dimensions\>\"", "]"}]}], ",", 
      RowBox[{"rank", "=", 
       RowBox[{"OptionValue", "[", "\"\<Rank\>\"", "]"}]}], ",", "n", ",", 
      "U", ",", "\[CapitalSigma]", ",", "V", ",", "A", ",", "a", ",", 
      "coordsHat", ",", "error", ",", "minSol", ",", "distMatrixHat", ",", 
      "expr", ",", "constraints", ",", "Gmat", ",", "G", ",", "t"}], "}"}], 
    ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{"Replace", " ", 
      RowBox[{"upper", "/", "lower"}], " ", "bounds", " ", "by", " ", "their",
       " ", "value"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"distMatrix", "=", 
      RowBox[{"distMatrix", "/.", 
       RowBox[{
        RowBox[{
         RowBox[{"GreaterThan", "[", "val_", "]"}], "|", 
         RowBox[{"LessThan", "[", "val_", "]"}]}], ":>", "val"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Replace", " ", "missing", " ", "values", " ", "by", " ", "the", " ", 
       "average", " ", "of", " ", "values", " ", "in", " ", "their", " ", 
       "row", " ", "and", " ", "column"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"distMatrix", "=", 
      RowBox[{"ReplacePart", "[", 
       RowBox[{"distMatrix", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "\[Rule]", 
           RowBox[{"Mean", "@", 
            RowBox[{"DeleteMissing", "@", 
             RowBox[{"Join", "[", 
              RowBox[{
               RowBox[{"distMatrix", "[", 
                RowBox[{"[", 
                 RowBox[{"First", "@", "#"}], "]"}], "]"}], ",", 
               RowBox[{"distMatrix", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", 
                  RowBox[{"Last", "@", "#"}]}], "]"}], "]"}]}], "]"}]}]}]}], 
          "&"}], "/@", 
         RowBox[{"Position", "[", 
          RowBox[{"distMatrix", ",", "_Missing"}], "]"}]}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"n", "=", 
      RowBox[{"Length", "@", "distMatrix"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"SVD", " ", "of", " ", "double"}], "-", 
       RowBox[{"centered", " ", "squared"}], "-", "distance"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"U", ",", "\[CapitalSigma]", ",", "V"}], "}"}], "=", 
      RowBox[{"SingularValueDecomposition", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"-", 
          FractionBox["1.", "2"]}], " ", 
         RowBox[{
          RowBox[{"J", "[", "n", "]"}], ".", 
          SuperscriptBox["distMatrix", "2."], ".", 
          RowBox[{"J", "[", "n", "]"}]}]}], ",", "rank"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"rank", "===", "dim"}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "SVD", " ", "provides", " ", "the", " ", "best", " ", "choices", " ", 
         "for", " ", "the", " ", "coordinates"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"U", ".", 
        SqrtBox["\[CapitalSigma]"]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Find", " ", "a", " ", "linear", " ", "transformation", " ", Cell[
         TextData[Cell[BoxData[
          FormBox[
           RowBox[{"U", "\[CenterDot]", 
            SqrtBox["\[CapitalSigma]"], "\[CenterDot]", "A"}], 
           TraditionalForm]],ExpressionUUID->
          "f8fba261-647a-4019-8a0e-c18cb9345daa"]],ExpressionUUID->
          "09038ba0-daf3-49c0-b502-16a7c4811005"], " ", "where", " ", 
         FormBox[
          RowBox[{"A", "\[Element]", 
           RowBox[{
            SuperscriptBox["\[DoubleStruckCapitalR]", 
             RowBox[{"rank", "\[Cross]", "dim"}]], " ", "to", " ", "map", " ",
             "the", " ", "points", " ", 
            RowBox[{"into", " ", "'"}], 
            RowBox[{"dim", "'"}], " ", "dimensions"}]}],
          TraditionalForm]}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"Switch", "[", 
        RowBox[{
         RowBox[{"OptionValue", "[", "Method", "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Find", " ", "linear", " ", "transformation", " ", "through", " ", 
           "numerical", " ", "minimization"}], " ", "*)"}], 
         "\[IndentingNewLine]", "\"\<NumericMinimization\>\"", ",", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Symbolically", " ", "describe", " ", "the", " ", 
           RowBox[{"antibody", "/", "virus"}], " ", "coordinates"}], " ", 
          "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"A", "=", 
           RowBox[{"Array", "[", 
            RowBox[{"a", ",", 
             RowBox[{"{", 
              RowBox[{"rank", ",", "dim"}], "}"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"coordsHat", "=", 
           RowBox[{"U", ".", 
            SqrtBox["\[CapitalSigma]"], ".", "A"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Compute", " ", "the", " ", "symbolic", " ", "distance", " ", 
            "matrix"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"distMatrixHat", "=", 
           RowBox[{"Outer", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"Sqrt", "[", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"#1", "-", "#2"}], ")"}], ".", 
                RowBox[{"(", 
                 RowBox[{"#1", "-", "#2"}], ")"}]}], "]"}], "&"}], ",", 
             "coordsHat", ",", "coordsHat", ",", "1"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Numerically", " ", "minimize"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"error", ",", "minSol"}], "}"}], "=", 
           RowBox[{"NMinimize", "[", 
            RowBox[{
             RowBox[{"Total", "[", 
              RowBox[{
               SuperscriptBox[
                RowBox[{"(", 
                 RowBox[{"distMatrixHat", "-", "distMatrix"}], ")"}], "2"], 
               ",", "2"}], "]"}], ",", 
             RowBox[{"Variables", "@", "distMatrixHat"}]}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Return", " ", "coordinates"}], " ", "*)"}], 
          "\[IndentingNewLine]", 
          RowBox[{"coordsHat", "/.", "minSol"}]}], ",", "\[IndentingNewLine]",
          "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"Semidefinite", " ", "optimization", " ", "using", " ", 
             RowBox[{"Schur", "'"}], "s", " ", "complement", " ", "condition",
              " ", "to", " ", "minimize", " ", "the", " ", "difference", " ", 
             "between", " ", "the", " ", "map", " ", "and", " ", "measured", 
             " ", "squared"}], "-", 
            RowBox[{
             RowBox[{"distances", ".", " ", "Unlike"}], " ", "numerical", " ",
              "minimization"}]}], ",", " ", 
           RowBox[{
           "SDP", " ", "should", " ", "always", " ", "find", " ", "the", " ", 
            "global", " ", "optimum"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         "\"\<SDP\>\"", ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
           StyleBox[
            RowBox[{"Construct", " ", "the", " ", "Gram", " ", "matrix"}],
            FontSlant->"Plain"], 
           StyleBox[",",
            FontSlant->"Plain"], " ", 
           FormBox[
            RowBox[{
             RowBox[{"G", "=", "A"}], "\[InvisibleComma]", 
             SuperscriptBox["A", "T"]}],
            TraditionalForm]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"expr", "=", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            FormBox[
             RowBox[{
              RowBox[{
               RowBox[{
                StyleBox["U",
                 FontWeight->"Bold"], "[", 
                RowBox[{"[", "j", "]"}], "]"}], 
               StyleBox[
                SqrtBox[
                 StyleBox["\[CapitalSigma]",
                  FontWeight->"Bold"]],
                FontWeight->"Bold"]}], 
              StyleBox["\[InvisibleComma]",
               FontWeight->"Bold"], 
              RowBox[{
               StyleBox["A",
                FontWeight->"Bold"], 
               StyleBox["\[ThinSpace]",
                FontWeight->"Bold"], 
               SuperscriptBox[
                StyleBox["A",
                 FontWeight->"Bold"], 
                StyleBox["T",
                 FontWeight->"Plain"]], 
               StyleBox[
                SqrtBox["\[CapitalSigma]"],
                FontWeight->"Bold"], 
               RowBox[{
                StyleBox["U",
                 FontWeight->"Bold"], "[", 
                RowBox[{"[", "j", "]"}], "]"}]}], 
              SuperscriptBox[
               StyleBox["\[InvisibleComma]",
                FontWeight->"Plain"], "T"]}],
             TraditionalForm], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Transpose", "@", 
             RowBox[{"ConstantArray", "[", 
              RowBox[{
               RowBox[{"Diagonal", "[", 
                RowBox[{"U", ".", 
                 SqrtBox["\[CapitalSigma]"], ".", 
                 RowBox[{"Array", "[", 
                  RowBox[{
                   RowBox[{
                    TemplateBox[{"G", "#1", "#2"},
                    "IndexedDefault"], "&"}], ",", 
                   RowBox[{"{", 
                    RowBox[{"rank", ",", "rank"}], "}"}]}], "]"}], ".", 
                 SqrtBox["\[CapitalSigma]"], ".", 
                 RowBox[{"Transpose", "@", "U"}]}], "]"}], ",", "n"}], 
              "]"}]}], "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             FormBox[
              RowBox[{
               RowBox[{
                StyleBox[
                 RowBox[{"-", "2"}],
                 FontWeight->"Bold"], 
                StyleBox["\[ThinSpace]",
                 FontWeight->"Bold"], 
                RowBox[{
                 StyleBox["U",
                  FontWeight->"Bold"], "[", 
                 RowBox[{"[", "j", "]"}], "]"}], 
                StyleBox[
                 SqrtBox[
                  StyleBox["\[CapitalSigma]",
                   FontWeight->"Bold"]],
                 FontWeight->"Bold"]}], 
               StyleBox["\[InvisibleComma]",
                FontWeight->"Bold"], 
               RowBox[{
                StyleBox["A",
                 FontWeight->"Bold"], 
                StyleBox["\[ThinSpace]",
                 FontWeight->"Bold"], 
                SuperscriptBox[
                 StyleBox["A",
                  FontWeight->"Bold"], 
                 StyleBox["T",
                  FontWeight->"Plain"]], 
                StyleBox[
                 SqrtBox["\[CapitalSigma]"],
                 FontWeight->"Bold"], 
                RowBox[{
                 StyleBox["U",
                  FontWeight->"Bold"], "[", 
                 RowBox[{"[", "k", "]"}], "]"}]}], 
               SuperscriptBox[
                StyleBox["\[InvisibleComma]",
                 FontWeight->"Plain"], "T"]}],
              TraditionalForm], " ", "*)"}], "\[IndentingNewLine]", "-", 
            RowBox[{"2", 
             RowBox[{"U", ".", 
              SqrtBox["\[CapitalSigma]"], ".", 
              RowBox[{"Array", "[", 
               RowBox[{
                RowBox[{
                 TemplateBox[{"G", "#1", "#2"},
                  "IndexedDefault"], "&"}], ",", 
                RowBox[{"{", 
                 RowBox[{"rank", ",", "rank"}], "}"}]}], "]"}], ".", 
              SqrtBox["\[CapitalSigma]"], ".", 
              RowBox[{"Transpose", "@", "U"}]}]}], "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             FormBox[
              RowBox[{
               RowBox[{
                StyleBox["U",
                 FontWeight->"Bold"], "[", 
                RowBox[{"[", "k", "]"}], "]"}], "\[InvisibleComma]", 
               StyleBox[
                SqrtBox[
                 StyleBox["\[CapitalSigma]",
                  FontWeight->"Bold"]],
                FontWeight->"Bold"], 
               StyleBox["\[InvisibleComma]",
                FontWeight->"Bold"], 
               RowBox[{
                StyleBox["A",
                 FontWeight->"Bold"], 
                StyleBox["\[ThinSpace]",
                 FontWeight->"Bold"], 
                SuperscriptBox[
                 StyleBox["A",
                  FontWeight->"Bold"], 
                 StyleBox["T",
                  FontWeight->"Plain"]], 
                StyleBox[
                 SqrtBox["\[CapitalSigma]"],
                 FontWeight->"Bold"], 
                RowBox[{
                 StyleBox["U",
                  FontWeight->"Bold"], "[", 
                 RowBox[{"[", "k", "]"}], "]"}]}], 
               SuperscriptBox["\[InvisibleComma]", "T"]}],
              TraditionalForm], " ", "*)"}], "\[IndentingNewLine]", "+", 
            RowBox[{"ConstantArray", "[", 
             RowBox[{
              RowBox[{"Diagonal", "[", 
               RowBox[{"U", ".", 
                SqrtBox["\[CapitalSigma]"], ".", 
                RowBox[{"Array", "[", 
                 RowBox[{
                  RowBox[{
                   TemplateBox[{"G", "#1", "#2"},
                    "IndexedDefault"], "&"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"rank", ",", "rank"}], "}"}]}], "]"}], ".", 
                SqrtBox["\[CapitalSigma]"], ".", 
                RowBox[{"Transpose", "@", "U"}]}], "]"}], ",", "n"}], "]"}], 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"Compared", " ", "to", " ", "the", " ", "squared"}], 
              "-", 
              RowBox[{"distance", " ", "matrix"}]}], " ", "*)"}], 
            "\[IndentingNewLine]", "-", 
            SuperscriptBox["distMatrix", "2"]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"constraints", "=", 
           RowBox[{"Flatten", "[", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{"Constraints", " ", "from", " ", 
               RowBox[{"Schur", "'"}], "s", " ", "complement", " ", 
               "condition"}], " ", "*)"}], "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{
                 TagBox[
                  RowBox[{"(", "\[NoBreak]", GridBox[{
                    {
                    TemplateBox[{"t", "j", "k"},
                    "IndexedDefault"], 
                    TemplateBox[{"expr", "j", "k"},
                    "IndexedDefault"]},
                    {
                    TemplateBox[{"expr", "j", "k"},
                    "IndexedDefault"], "1"}
                    },
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
                    GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}}], "\[NoBreak]", ")"}],
                  Function[BoxForm`e$, 
                   MatrixForm[BoxForm`e$]]], 
                 UnderscriptBox["\[VectorGreaterEqual]", 
                  TemplateBox[{"2"},
                   "SemidefiniteConeList"]], "0"}], ",", 
                RowBox[{"{", 
                 RowBox[{"j", ",", "n"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"k", ",", "n"}], "}"}]}], "]"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{
               "G", " ", "should", " ", "be", " ", "positive", " ", 
                "semidefinite"}], " ", "*)"}], "\[IndentingNewLine]", 
              RowBox[{"VectorGreaterEqual", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"G", ",", "0"}], "}"}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{"\"\<SemidefiniteCone\>\"", ",", "rank"}], "}"}]}], 
               "]"}]}], "\[IndentingNewLine]", "}"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{
            "Minimize", " ", "the", " ", "nuclear", " ", "norm", " ", "of", 
             " ", "G", " ", "along", " ", "with", " ", "the", " ", 
             "differences", " ", "of", " ", "the", " ", "squared"}], "-", 
            "distances"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"Gmat", "=", 
           RowBox[{"G", "/.", 
            RowBox[{"SemidefiniteOptimization", "[", 
             RowBox[{
              RowBox[{"Total", "[", 
               RowBox[{
                RowBox[{"Array", "[", 
                 RowBox[{
                  RowBox[{
                   TemplateBox[{"t", "#1", "#2"},
                    "IndexedDefault"], "&"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"n", ",", "n"}], "}"}]}], "]"}], ",", "2"}], "]"}],
               ",", "constraints", ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"t", "\[Element]", 
                 RowBox[{"Matrices", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"n", ",", "n"}], "}"}], ",", "Reals"}], "]"}]}], 
                ",", 
                RowBox[{"G", "\[Element]", 
                 RowBox[{"Matrices", "[", 
                  RowBox[{
                   RowBox[{"{", 
                    RowBox[{"rank", ",", "rank"}], "}"}], ",", "Reals"}], 
                  "]"}]}]}], "}"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "Determine", " ", "the", " ", "linear", " ", "transform", " ", 
            "A"}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"A", "=", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"#", "[", 
               RowBox[{"[", "1", "]"}], "]"}], ".", 
              RowBox[{"Sqrt", "[", 
               RowBox[{"#", "[", 
                RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "&"}], "[", 
            RowBox[{"SingularValueDecomposition", "[", 
             RowBox[{"Gmat", ",", "dim"}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"U", ".", 
           SqrtBox["\[CapitalSigma]"], ".", "A"}]}]}], "\[IndentingNewLine]", 
        "]"}]}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.6341415938397913`*^9, 3.634141608886338*^9}, {
   3.641151901348711*^9, 3.6411519085043297`*^9}, 3.6411573862906446`*^9, {
   3.641157431493928*^9, 3.6411574345421352`*^9}, {3.6413245518239803`*^9, 
   3.641324580868143*^9}, {3.837531250069418*^9, 3.8375313042031975`*^9}, {
   3.8486800910355268`*^9, 3.8486801266801977`*^9}, {3.848965024178857*^9, 
   3.848965074774905*^9}, {3.8489652353323727`*^9, 3.848965370445981*^9}, {
   3.848966870806734*^9, 3.848966871157892*^9}, {3.848966929876475*^9, 
   3.8489669688134212`*^9}, {3.848967005285467*^9, 3.848967023603162*^9}, {
   3.8489671193702464`*^9, 3.848967125728566*^9}, 3.848967417592724*^9, {
   3.8489677213909135`*^9, 3.8489677266806936`*^9}, {3.848967981903511*^9, 
   3.8489680046175227`*^9}, 3.8499700966138573`*^9, 3.849970136568059*^9, {
   3.84997222233746*^9, 3.8499722321522985`*^9}, {3.850674095609849*^9, 
   3.8506743862298746`*^9}, {3.8506744588534765`*^9, 3.850674496434023*^9}, {
   3.850674971282113*^9, 3.8506749994657335`*^9}, {3.8506750647024612`*^9, 
   3.850675198376323*^9}, 3.850675233998101*^9, {3.8506754150901814`*^9, 
   3.8506754491600056`*^9}, {3.850675914360738*^9, 3.850675917016242*^9}, {
   3.850676064388335*^9, 3.8506760646092987`*^9}, {3.8506761723216515`*^9, 
   3.8506762252744627`*^9}, {3.850676265286332*^9, 3.8506762918975935`*^9}, {
   3.85067641294411*^9, 3.850676424711238*^9}, 3.850676537431164*^9, {
   3.85067656899261*^9, 3.85067667812936*^9}, {3.8506767754521065`*^9, 
   3.8506767835003023`*^9}, {3.8506771237792215`*^9, 3.850677148735222*^9}, {
   3.850677212730715*^9, 3.8506772372269907`*^9}, {3.850677335875988*^9, 
   3.8506773448322372`*^9}, {3.850679057559785*^9, 3.850679080665574*^9}, 
   3.8517875008897443`*^9, {3.8586038307220774`*^9, 3.85860384700555*^9}, {
   3.8586038944363003`*^9, 3.8586039190729885`*^9}},
 CellLabel->"In[34]:=",
 CellID->192279514,ExpressionUUID->"d2687e7c-81fe-4360-84e6-f5e5e552919a"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Example", ":", " ", "n"}], "=", 
    RowBox[{
     RowBox[{
      RowBox[{"30", " ", "points", " ", "with", " ", "entry"}], "-", 
      RowBox[{"wise", " ", "error", " ", "\[Sigma]"}]}], "=", 
     RowBox[{"1", " ", "in", " ", "the", " ", "distance", " ", "matrix"}]}]}],
    " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"coords", ",", "distMatrix"}], "}"}], "=", 
     RowBox[{"exampleData", "[", 
      RowBox[{"30", ",", "1."}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"coordsMDS", "=", 
     RowBox[{"classicalMDS", "[", "distMatrix", "]"}]}], ";"}], "\n", 
   RowBox[{"analyzeMDS", "[", 
    RowBox[{"coords", ",", "coordsMDS"}], "]"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.8489656480199227`*^9, 3.848965660278557*^9}, 
   3.848965718068469*^9, {3.8489662151325035`*^9, 3.848966244183281*^9}, {
   3.8489662828426886`*^9, 3.848966289898882*^9}, {3.848966385323944*^9, 
   3.84896638591742*^9}, {3.8489664208210487`*^9, 3.848966421123945*^9}, {
   3.8489664935911584`*^9, 3.8489665332272167`*^9}, {3.8489665644235835`*^9, 
   3.848966592322567*^9}, {3.8489672547383146`*^9, 3.8489672573369265`*^9}, {
   3.8489723343649836`*^9, 3.8489723348560743`*^9}, 3.8497905072748632`*^9},
 CellLabel->"In[35]:=",ExpressionUUID->"a98e7731-2ba6-488a-9d6d-f28a1df3e4e1"]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
N75XuRJPupC5ikXJeh39tmTH5aPIyXvl6QO8uaximX6L4k/z7Nn2pbdpM4YO
+13SYApkLCaN47XeedQ0RSQZjZcLX9rxZ1wu9NG/xv/tlZ6huqYu+U19c0tp
+8TTHW9vahn95semrnBkICcjB0rNrwLRWnVLA62oWiKqqDmJRWkXS+K7LDA5
OSnvJcmY/XsllxM2J9uxZZoJSDJRmpDuiV/qrH3pbR/yz+J3SYMpqLGox2u1
/i3JMVhVQ/TQkRO+j9datuS3897sb59ufsl0rtv4kGph4/ZDslg2byTRIDWq
ZJ9T+0LiQxaQr9m8S67kKhYl8lJuRGWNyP5SpkrYLDfiwjpBnjQhJYgDnIzW
vvS2D6nK/C5pMAU1FpN3xmtdHzosda/qxyVf5Y+tpjHc3T/G1WoffXjpH2t2
v5LyHJE8ntgWfuM3b2X2LlKReqn5pemRq3OJWcpJLKq9dr9aqpaRFnT2DUbJ
JtXizmYj7mznjVUt/aCeTbXpS+/w8LukwRTgWERx+tf4v9U/d8Tjf/03Tfst
L2Z2qVFVpymrfanYrbGonhQSqS51b8rFJJ7UxlWnGmFaQPcCUpuyxqJsQdaS
l2RJdQnSfXdkfyXo3Zepr6+XZVQrz8s5ZNUXVHVVMgaurKgyUejPIWqgl7R9
0rSD6kOwvrvTdOpe9rRE2fSlt3vIMn6XNJiIRRSSNOEPdJ7wcoLI2F2q6YUj
6b6R7qrhpeY0VrkSAVIPq+4oHR0dqtq3VuYpF1NnMlUZZGHVNBM6GSUCVLcf
WUv1t7T2RFXJpdqzXjrkqOXdzwmrT0beXUqliu2+TdVFVpVBlVBftVQlt8ai
3nG9Eb2uqV2pVnffQadYVGfIfe9FnA/WvvROFxr8LmkwEYsopPn5+Zrdr3jP
RPXYsPPVdN9IKnNdXXtfS+WX0E0/+UbV58bteFlMckeXQap9iSpVvatYlMpc
Ism4BVleLaxzQcWW8Qywyg6X8qvwdd9HKYwspr9Xb+oULvKOUgbdiNMHG7pU
+ky1cS0pufVJvYP6GfX5GLsGqc/QdNLbKRbVdWFrAzwArH3pbU+k1DV1+V3S
YCIWUUhv/OattJqKoUx73KkTkul2p1ENENMquubX2eFxMf2MXlK/pKp6Uxip
kNLBp1Y3ZUR9vdvoEymbfirX9Dbd29TqVVOPVlO72DYWVUlSPql+R8bjDfUJ
mI5knGJRhW/BbvMsMGtfevOxYvNA38i438UMJo+xyLh8yImDnd1Pd7ydbixm
0ONOx6L3my/0SUXrS8aThx4XSzpHhmo36Sabqcy6nlepJO9l3AWX3VFv5x4T
qvVnfMZ4pte0sEp/0zuqa6B64WxiUV141ZuSH1VhPMai2qBpdwKDvvQ+SjmD
BuPyIYeaD4TTzcRQRj3udCx6vwHBqYZPLrfRdOJ4XMxlSacep9bn9UlOeTJl
vqeMRRXoptaf7nhjPdvskkemN80sFo1lUBdqM4hF2w0GA33p/eLeWmRcPuSW
HOJm0FqUVdJ9I3Xhyba2d+KSd8bA8riYy5Kmk6VOq+sd0Z1VpIHpcrNeylhU
1/JU/xYjtXHr/Q4FiEVZXaWhehfraVX3YgQ7FuEX91hkXD7klhzlehm+I/tr
i8k7V8Gs5yqd6BreGj22sei+WDJVLKY8iWok7SkVjsYOMLbld4lF2YIe/s7I
6dZ+9bztaDm6DNnEojp0MV7WJBYLiUtjTlxikXH5kHPyf1f7/PG0Y3FPfwbv
5f3yoqrkdf8Ta+dGdZVNdyL1slgy1UnUCkuXG+u1ReMC0pRTJ2mdbjlRlyyd
YlGdLLWNVH211HSPp4pvedLUipQfU14/9fKkelPjPmYQi3kddy6o5DM/cDjy
l1Xbf/A3oR9vPvTEjr//WegYl8Y0l1jMYFw+OfyYPB0ZizYNdTW+c7aHK8Iw
kf+4ve0RL7cq64csLKtk9nZ6IBeXW/Inl6nvdRBYt2M8x+hxMafI0MFq6lZq
bWyaEjBle9Cldex+87vtpVhdftOKaigA9320HpBYb9CwHhuo4wqPsag+xqD2
RM0T+Qd84/z0T2pbTH1F/qqm5fHQN0PrcGks6RqL6Y7Ld+1q7GTrY3Phu+Z7
V90YXH352N3y4/z8fKF2BaVBjp3Wb231mInf/J+GDn+58H8yey99H73tNBmq
1WMMAt1uMgaBamdlsJj1lg1N1f8qGdWrs7OzuskmK8qT1hs0rG9hohLE+ry6
qujSatZ3GpoOIVT7VD2vzriqS4HWFdXEFroVqVaUr4vL1J3+OnlVSdT+qmVk
f9UNlRXLp20lQ/Vu2t7MqD/eQN63mCeqr8jPd0ad+oqs27jn6Y63uTTmEotp
jcsnDUMJwa9GKk0zN/W1rCvg3qA0vDf72ye2pe6SKn9+G3a+emE621lO1F0J
qm6XKldV7/XLrEkhFbKqnKXy1+PPWOvklIsZx3WxncJJJ6Mi29EDm8vCOhb1
W6ixdLzMi2EaVVtHm7qwaM1o44A8+lNSL+kzt8Zy2vbMqfj2dU89VqqxEarb
nqqEOigr7tyHogdAUO8iz+h31x+L6QMM5Cg3eSL/Sht3d7v8x0kg/nTrS1wa
c4nFtMblm54Ysp3nV54s4N6gZLz9v96XNqPLWfq6g2c3bj8ki+XqSoeqdfUY
ZSkH01ZLqpFIM1jM2rPFuroeUlXFhHw1BquaN1m/hW2imajBdozRqe4NNLKN
RffS6nI6XZpUw72aPgH91vodTUOqJu98gHpdtSnjGVqXwgd4TNR88NhX5Ed1
baGyn7LKJRbTGpdvqKvxxuBqayxKg7GAe4NScuvWrYOd3TW7X1HzLarmoXwj
f3XSSPz10b6Mz52WMzV8d1CnltDUOefA72YOee8rEir7KatcYjGtcfmIRWRm
YWFhavqjrp7XG/d1Nr1w5O8iwxem567Nf0F3uIxJa8t9jLhSpxrFAZ5vMR+8
9xXRl8bKlvt9i97H5XM6iRqLrCzQngC4Q5LR/Spk6VKdc8jEdHnvKxIq+ymr
Uo5y43FcPmladu95xNpUHGp7tFC7AuD/u77M71Lknury6ncpSo/3viKhsp+y
KuVQ4d7H5fssdkWSUbUZJRA/P35PX8u6Ty5n240QAJAl731FmLIq5VDhAIBS
ZBxf5cxA+LHavSkvLP6kvoMpq0hDAAge6/gqf/fsQ3/9i4PufUX+csPzTFlF
LAJAwDiNr9L5zH0ufUV++LOtL/19X5mP/JYkFgEgcFzGV2EOx5SIRQDwy5df
XH3z1NG+cOji2LEczuvEjeTZCGQsMo8YgOL36cfvnzrw8HzvKkmrWGSlfP/B
u7m5YZBYzEbAYnFpaWn8rfdqGsOmaVOYRwxAUYnH430t60yX/wb3rZHns984
46tko3Rj0Tq3o5o2pfq5E07TpjCPGIAiYZtc8ozUZtlvPB/jq5TPdLolGou2
czt2vzYgmejS/Zh5xAAUCdvznJJcvR25Gc82t+OrlNV0uqUYi059j9ueureu
9Tfu96uW+TxiAIpEvmMxuVxVnh8Ov9pa2xcOTZ3py/j0rMt0uoFsM5ZiLLr0
Pa4NpRjGocznEQNQJCZPR6z1WCyyUoLM76KZuVS58pLfpcu9UoxFl05WobrH
Uo5u5HfxAeCbLje9ex8y1WCn29Z++cVVv4tm5lLl5rBtWzzKLRZD5T2PGIDi
8cG7E4P71nx+/B6pu+Z7V53teGTuYjGeziIWi59L3+Ot27YxjxiAUjE/P39+
oE3C5Y0TLdeuxvwujj2XKrcIT/lmrxRn0HDqe3zomTUpp58u83nEACBdLrd7
5OQuy2JTQmloZO173LN37Y+qfpnywmKZzyMGABkoq+l0SzQWk3Z9j4fHJmwH
hzdOm1KE84iVz02yAFD8SjcWrZaWljpe7naZNqUI5xErq5tkAaD4BSkWk8vJ
WELTppTbTbIAUPwCFoulpdxukgWA4kcs+qjc7gYCgOJHLPqIWASAYkMs+qjc
bpIFoAWs7g3S7gRpX5KltjvuN8mW1r4ASEvA/sGDtDtB2pdkCe6Oy02yJbcv
QMnx+F/m/Z/RxyUpZNG+tfcly+StpUk4M3slHBnY394V7T/z3uxvi7CQ2SwJ
lK4g/TNSyKJ9a+9LBv6tl5aWLkzPPbO/a/2u19RNlJtaRjc0D8iSEo5FUsjs
l0QOzc7OTk5O+l2KMlJUNUaWS1LIon1r70sG+60lE0dGx5/YFpY0NA25I0s+
Huo6fvJ13wuZkyVLxc2bNyV0ostGRkauX7+unpdv5CV/y7a4uChFqqysrKio
qKqqyu3GowbyLl5WkcWMa5k2YiI5HovFZBdSblZ//rKKWl6+yrpZ7mC6dgNA
1gpcceWWVLySNZI4a9euVdVyR0dH5TL1TeFrZhOVDqqQuYpFyXod/bLxFStW
VCxLubOyQMUd9fX1Ohabm5vVk7Ip9byiiq1K7rRxKYn+wGUVWV2Wlw3q7av3
9ZKtKAZ6JOfBIzv+rm3n39Q+bzontnH7oXNTM9I68LukmSj1Gq843b59e8e+
o093vO0+ncfmnYf8LmnwSa2rAtFaY0ubSIWF77GoqKLmJBalXSYBZHzGGF7u
6+ol5UOzfcm6BYlglXQq7EyvSibK5yxbM6aerCLPyPI6FuVVWVdHOYrWxx9e
HDn0s8vH7lYjOcciKzufua9252FTFSdB2doZKbYhN70gFvPhn/75X6qfO+E+
y5X6s/G7pAEn0aBaN07NEIkPWUC+FrhgtnIVi5OTk9aNyDPqJK37YYCkkgpE
25K4l1A3J02JrJ63vqn8UuRXo2MxuZyVUkiSsZhduxobanvUNJKzPCINldYq
rqohOjxWejO/E4v50DcynnJCZHnIMn6X1H+JROLye79540RLXzj09uuHPnh3
IlfDpOuTge6dWKTSNtbMPspJLKq9tl4tlc3K9lUySsvOafXmZU6twpQl1C1N
YwiqJ22zWJ1TNT6jmvCcTS1aF8eOSfPQOgiJNBvtD/5Dh/0uctqIxXw42Nnt
fgZVn0f1u6R+WlpakkA82frYTMefzveukuNP+XebC9/V17Lu4w8vZr99VRtL
ELgvJm0TayyqJ42dQ1zWdVlM4kltXHWqsfZ40b1Q1KasoSNbUB1gZEkvHVRk
f62nMZN3YlE2pWLLtpeRPKleyjgW9aGIMXn1hV3rRyTLWz98p11AxvSlwJ6O
p7sOP9/aGdH3i8lLaW1KDl+tTUX1CMzBP7GYD8SiF5KJ51+81/ZfTJ7Pcg4R
VcPbXuqyMmaNVN3qfKPqmaMuPlqr7pSLqTOZqgyysDotKXQy6l4oqjeLbMHa
E1U2onZB92xxb0uq5W3PCatYVOctnT4W1VRMOl9D9NKe1X179DM6i+Ula9ms
Qa9OffvePTgwrJO6tjz90PrdvapvTO3OTi/3i2nnh8OfH7/H+j8rGw9MLUcs
5kN3/1jdwbMpY1GW8bukvonH47ZXKPRjcN8aWSbj7euqOK0TpCq/jO0a+Ual
lXE7XhaT1NNlkKyROFBZo2JR6nxTLxR1Uc8YOirCjGeAVTi6lF+Fr+1LKhaT
d6LNmjvq7VRIZROLtudR9WVH9w6rirrg6/FeErhzmtS1/ZkHdUXk5X4xTf4r
Tx142DpkZf+e+5wqurzuYD4Qi/nw0aUrchiWMhZlGb9L6pt3zvbYXqEwjpcu
y2S8fV35p9WdRrVTTKvoE4M6Rzwupp/RS+qXVHaYgkllhw4dtbrpwqjLZUHh
klk6FnWD0dQxxpi52cSiTkBT9sm6uiGpNuLUtUZKmP01Viguk7oa66Indxzz
3mb8+MOLkozq/1cNWXm0YU3NjnbbWm5zO11u8I3bt29vbe7kBg0XTpNq5Wp2
LR2L3m++0HlhfUm1BFWOeFwsaYhF02K6t6dtmXUcqPPAugWnt+lUfvV2KWMx
eSe5jD1bjE3FZH5iUe2RsdlojWZNFc/lXQIptiy3HXFdZq+zVkfee7stLCy8
0r79l+vXhuoe27ytofb547a1XH371F/XtuZwdwojeLFYDIOWJJcbjD/d+pJL
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

    "], {{0, 241.2}, {363., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->120.],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
    Automatic],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->270,
  ImageSizeRaw->{363., 241.2},
  PlotRange->{{0, 363.}, {0, 241.2}}]], "Text",
 CellChangeTimes->{
  3.8497906031748147`*^9, {3.849790721148935*^9, 3.849790741469491*^9}, 
   3.849791024490103*^9},
 CellLabel->
  "Out[483]=",ExpressionUUID->"f7492473-7439-4fa2-972a-c28eae4fb7be"],

Cell[TextData[{
 StyleBox["Classical MDS Algorithm",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 " (",
 StyleBox["Antibody-Virus Distances",
  FontSlant->"Italic"],
 ")\nInput: \n(1) Distance matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{"D", 
    StyleBox["\[Element]",
     FontWeight->"Plain"], 
    StyleBox[
     SuperscriptBox["\[DoubleStruckCapitalR]", 
      RowBox[{"m", "\[Cross]", "n"}]],
     FontWeight->"Plain"]}], TraditionalForm]],
  FontWeight->"Bold",ExpressionUUID->"8a897a3d-2808-413b-a707-f7470355b02e"],
 " giving the Euclidean distance between ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "8ae4d818-35ce-40d3-b17c-958033368c68"],
 " viruses and ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "4b70e06c-c8a6-4c2a-950c-439a88ac3a25"],
 " antibodies\n(2) The dimension ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "895887aa-3896-4789-8cff-4446c82f788d"],
 " of the final coordinates (usually ",
 Cell[BoxData[
  FormBox[
   RowBox[{"d", "=", "2"}], TraditionalForm]],ExpressionUUID->
  "89aaa426-0b46-4edb-9400-026b27bfd4f7"],
 ")\n(3) The rank ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "962bd197-f11a-44c8-a8db-12d021e2d26d"],
 " (satisfying ",
 Cell[BoxData[
  FormBox[
   RowBox[{"d", "\[LessEqual]", "r", "\[LessLess]", 
    RowBox[{"Min", "@", 
     RowBox[{"Dimensions", "[", "D", "]"}]}]}], TraditionalForm]],
  ExpressionUUID->"c8432521-f0e4-4c84-8e26-f16add3ff099"],
 ") of singular values to consider when projecting the data"
}], "Text",
 CellChangeTimes->{{3.848967272680441*^9, 3.8489672765157146`*^9}, {
   3.8489676366440783`*^9, 3.848967686587202*^9}, {3.84896814556619*^9, 
   3.848968207683409*^9}, {3.8489682745173073`*^9, 3.8489682771112633`*^9}, {
   3.848968434865632*^9, 3.84896843639318*^9}, {3.8489690255455055`*^9, 
   3.8489691010338016`*^9}, {3.848969183328517*^9, 3.8489692182741203`*^9}, 
   3.8489692740637407`*^9, {3.848969814784196*^9, 
   3.8489698172274437`*^9}},ExpressionUUID->"5a9554b4-aae9-40fa-80ee-\
2e6c2ff61008"],

Cell[TextData[{
 "Compute the double-centered squared-distance matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["Q",
     FontWeight->"Bold"], "=", 
    RowBox[{
     RowBox[{"-", 
      FractionBox["1", "2"]}], 
     StyleBox[" ",
      FontWeight->"Bold"], 
     SubscriptBox[
      StyleBox["J",
       FontWeight->"Bold"], "m"], 
     SuperscriptBox[
      StyleBox["D",
       FontWeight->"Bold"], "2"], 
     StyleBox[" ",
      FontWeight->"Bold"], 
     SubscriptBox[
      StyleBox["J",
       FontWeight->"Bold"], "n"]}]}], TraditionalForm]],ExpressionUUID->
  "b131bdd1-5e7c-459a-9c9d-bbd5dfd5d71b"],
 " where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox[
     StyleBox["J",
      FontWeight->"Bold"], "k"], "=", 
    RowBox[{
     RowBox[{
      StyleBox["I",
       FontWeight->"Bold"], "-", 
      RowBox[{
       FractionBox["1", "k"], 
       StyleBox["1",
        FontWeight->"Bold"], 
       StyleBox[" ",
        FontWeight->"Bold"], 
       SuperscriptBox[
        StyleBox["1",
         FontWeight->"Bold"], "T"]}]}], "\[Element]", 
     SuperscriptBox["\[DoubleStruckCapitalR]", 
      RowBox[{"k", "\[Cross]", "k"}]]}]}], TraditionalForm]],ExpressionUUID->
  "7d44f0e0-6cb9-4d79-9437-93b4c51f0c8e"],
 ". This also equals the double-centered Gram matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["Q",
     FontWeight->"Bold"], "=", 
    RowBox[{
     SubscriptBox[
      StyleBox["J",
       FontWeight->"Bold"], "m"], 
     StyleBox["Vir",
      FontWeight->"Bold",
      FontSlant->"Italic"], 
     StyleBox[" ",
      FontWeight->"Bold"], 
     SuperscriptBox[
      StyleBox["Ab",
       FontWeight->"Bold",
       FontSlant->"Italic"], "T"], 
     SubscriptBox[
      StyleBox["J",
       FontWeight->"Bold"], "n"]}]}], TraditionalForm]],ExpressionUUID->
  "ac8d74e6-525f-41fa-9baf-04a2b9b4dee9"],
 " where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["Vir",
     FontWeight->"Bold",
     FontSlant->"Italic"], "\[Element]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", 
     RowBox[{"m", "\[Cross]", "d"}]]}], TraditionalForm]],ExpressionUUID->
  "a9888e4f-7742-47eb-bc1e-a22a65c6ad72"],
 " represents the virus coordinates and ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["Ab",
     FontWeight->"Bold",
     FontSlant->"Italic"], "\[Element]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", 
     RowBox[{"n", "\[Cross]", "d"}]]}], TraditionalForm]],ExpressionUUID->
  "f68b6ce0-dbb6-4d9a-bdb8-e8e17323a974"],
 " the antibody coordinates. WLOG, we will assume that the the center of mass \
of ",
 Cell[BoxData[
  FormBox[
   StyleBox["Vir",
    FontWeight->"Bold",
    FontSlant->"Italic"], TraditionalForm]],ExpressionUUID->
  "6615f733-7923-4e49-9bae-7447337f23dc"],
 " lies at the origin (so that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox[
      StyleBox["J",
       FontWeight->"Bold"], "m"], 
     StyleBox["Vir",
      FontWeight->"Bold",
      FontSlant->"Italic"]}], 
    StyleBox["=",
     FontWeight->"Bold",
     FontSlant->"Italic"], 
    StyleBox["Vir",
     FontWeight->"Bold",
     FontSlant->"Italic"]}], TraditionalForm]],ExpressionUUID->
  "2a6aafba-1c3f-4923-a515-bf4bbb07e02e"],
 "), while the center of mass of ",
 Cell[BoxData[
  FormBox[
   StyleBox["Ab",
    FontWeight->"Bold",
    FontSlant->"Italic"], TraditionalForm]],ExpressionUUID->
  "2fa7ef1b-56b8-4a4c-a7ce-1ba263725998"],
 " can be any coordinate"
}], "Item",
 CellChangeTimes->{{3.8488825253725047`*^9, 3.848882548649016*^9}, {
  3.848890522401307*^9, 3.84889053475239*^9}, {3.8489684195913486`*^9, 
  3.8489684930914783`*^9}, {3.8489685349710236`*^9, 3.84896857111985*^9}, {
  3.8489686465746408`*^9, 3.8489686666746225`*^9}, {3.848968727022794*^9, 
  3.8489687319189997`*^9}, {3.8489689488960123`*^9, 3.848968953900625*^9}, {
  3.8489692672528276`*^9, 3.8489692697126284`*^9}, {3.848969520348428*^9, 
  3.8489695396198225`*^9}, {3.8489696008719883`*^9, 3.8489696256673408`*^9}, {
  3.848969832994753*^9, 3.848969839878977*^9}, {3.8489699798514647`*^9, 
  3.848969994152776*^9}, {3.8500502692372*^9, 
  3.8500502972800913`*^9}},ExpressionUUID->"7bb58977-db22-4aa9-b571-\
f4d2266ec0fc"],

Cell[TextData[{
 "Compute the singular value decomposition, thresholding to the ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "29dc4ebc-738f-446f-9ee3-367ebf07bbf1"],
 " largest singular values: ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["Q",
     FontWeight->"Bold"], "=", 
    RowBox[{
     RowBox[{
      StyleBox["U",
       FontWeight->"Bold"], 
      StyleBox[" ",
       FontWeight->"Bold"], 
      StyleBox["\[CapitalSigma]",
       FontWeight->"Bold"], " ", 
      SuperscriptBox[
       StyleBox["V",
        FontWeight->"Bold"], "T"]}], "=", 
     RowBox[{
      StyleBox["Vir",
       FontWeight->"Bold",
       FontSlant->"Italic"], 
      StyleBox[" ",
       FontWeight->"Bold",
       FontSlant->"Italic"], 
      SuperscriptBox[
       StyleBox["Ab",
        FontWeight->"Bold",
        FontSlant->"Italic"], "T"], 
      SubscriptBox[
       StyleBox["J",
        FontWeight->"Bold"], "n"]}]}]}], TraditionalForm]],ExpressionUUID->
  "1af4f9d3-c996-4d77-83b7-2f214bf44389"],
 ", where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["U",
     FontWeight->"Bold"], "\[Element]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", 
     RowBox[{"m", "\[Cross]", "r"}]]}], TraditionalForm]],ExpressionUUID->
  "286f7779-57e5-44b0-9344-54554b363224"],
 " represents the virus coordinates while ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["V",
     FontWeight->"Bold"], "\[Element]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", 
     RowBox[{"n", "\[Cross]", "r"}]]}], TraditionalForm]],ExpressionUUID->
  "ed35b5da-201b-4a1f-a71a-d3ff0d604b45"],
 " represents the antibody coordinates, although there may be an affine \
transform (rotation, scaling differently along ",
 StyleBox["x",
  FontSlant->"Italic"],
 " and ",
 StyleBox["y",
  FontSlant->"Italic"],
 ", and a translation for ",
 Cell[BoxData[
  FormBox[
   StyleBox["Ab",
    FontWeight->"Bold",
    FontSlant->"Italic"], TraditionalForm]],ExpressionUUID->
  "3c5f48a4-45a4-49e3-9449-aefe197ade00"],
 ") required to line them up"
}], "Item",
 CellChangeTimes->{{3.8488825253725047`*^9, 3.848882575428751*^9}, {
  3.8488867793472457`*^9, 3.848886781566303*^9}, {3.848968677531876*^9, 
  3.8489688951527586`*^9}, {3.848968960898619*^9, 3.8489689759683495`*^9}, {
  3.848969376537016*^9, 3.848969377847492*^9}, {3.8489696355457635`*^9, 
  3.8489696355457635`*^9}, {3.8489698949784665`*^9, 3.8489699037498636`*^9}, {
  3.8489699698515463`*^9, 3.848969973823908*^9}, {3.850050299681676*^9, 
  3.8500503094548116`*^9}},ExpressionUUID->"0511a046-3b8b-4277-8157-\
22a9dcc0d128"],

Cell[TextData[{
 "The two affine transforms must be related based on the singular value \
decomposition formula. More precisely, we define the linear transformation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox[
     SubscriptBox["A", "U"],
     FontWeight->"Bold"], "\[Element]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", 
     RowBox[{"r", "\[Cross]", "d"}]]}], TraditionalForm]],ExpressionUUID->
  "4789a186-e59d-4bcd-8517-6a06a4c6ed84"],
 " (assumed to be mean-centered WLOG), so that the virus coordinates are \
given by ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     StyleBox["Vir",
      FontWeight->"Bold",
      FontSlant->"Italic"], "=", 
     StyleBox["U",
      FontWeight->"Bold"]}], 
    StyleBox["\[InvisibleComma]",
     FontWeight->"Bold"], 
    StyleBox[
     RowBox[{"\[CapitalSigma]", " ", 
      SubscriptBox["A", "U"]}],
     FontWeight->"Bold"]}], TraditionalForm]],ExpressionUUID->
  "bee7750c-205a-49be-a75b-16340dbb285c"],
 " (with ",
 StyleBox["\[CapitalSigma]",
  FontWeight->"Bold"],
 " inserted for convenience). Similarly, we define the linear transformation ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox[
     SubscriptBox["A", "V"],
     FontWeight->"Bold"], "\[Element]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", 
     RowBox[{"r", "\[Cross]", "d"}]]}], TraditionalForm]],ExpressionUUID->
  "ee92f861-02cb-4d78-8223-55311c837f63"],
 " and the translation vector ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox[
     SubscriptBox["t", "V"],
     FontWeight->"Bold"], "\[Element]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", 
     RowBox[{"d", "\[Cross]", "1"}]]}], TraditionalForm]],ExpressionUUID->
  "c9d01ec3-b4e3-4253-bff1-ffec9adb67c5"],
 " so that the antibody coordinates equal ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     StyleBox["Ab",
      FontWeight->"Bold",
      FontSlant->"Italic"], "=", 
     StyleBox["V",
      FontWeight->"Bold"]}], 
    StyleBox["\[InvisibleComma]",
     FontWeight->"Bold"], 
    RowBox[{
     StyleBox[
      SubscriptBox["A", "V"],
      FontWeight->"Bold"], "+", 
     RowBox[{
      StyleBox["1",
       FontWeight->"Bold"], 
      StyleBox[" ",
       FontWeight->"Bold"], 
      SuperscriptBox[
       RowBox[{"(", 
        StyleBox[
         SubscriptBox["t", "V"],
         FontWeight->"Bold"], 
        StyleBox[")",
         FontWeight->"Plain"]}], "T"]}]}]}], TraditionalForm]],ExpressionUUID->
  "28469444-b460-439a-86ca-965c7d569faa"],
 ". Since ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     StyleBox["U",
      FontWeight->"Bold"], 
     StyleBox[" ",
      FontWeight->"Bold"], 
     StyleBox["\[CapitalSigma]",
      FontWeight->"Bold"], " ", 
     SuperscriptBox[
      StyleBox["V",
       FontWeight->"Bold"], "T"]}], "=", 
    RowBox[{
     StyleBox["Vir",
      FontWeight->"Bold",
      FontSlant->"Italic"], 
     StyleBox[" ",
      FontWeight->"Bold",
      FontSlant->"Italic"], 
     SuperscriptBox[
      StyleBox["Ab",
       FontWeight->"Bold",
       FontSlant->"Italic"], "T"], 
     SubscriptBox[
      StyleBox["J",
       FontWeight->"Bold"], "n"]}]}], TraditionalForm]],ExpressionUUID->
  "ac144995-7872-480b-8030-6aff56014c20"],
 " (where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      SuperscriptBox[
       StyleBox["Ab",
        FontWeight->"Bold",
        FontSlant->"Italic"], "T"], 
      SubscriptBox[
       StyleBox["J",
        FontWeight->"Bold"], "n"]}], "=", 
     StyleBox["V",
      FontWeight->"Bold"]}], 
    StyleBox["\[InvisibleComma]",
     FontWeight->"Bold"], 
    StyleBox[
     SubscriptBox["A", "V"],
     FontWeight->"Bold"]}], TraditionalForm]],ExpressionUUID->
  "8845907f-4c2f-43ed-8dd5-cd6bc80f7496"],
 " eliminates the translation term), we must have ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{
      StyleBox[
       SubscriptBox["A", "U"],
       FontWeight->"Bold"], "(", 
      StyleBox[
       SubscriptBox["A", "V"],
       FontWeight->"Bold"], ")"}], "T"], "=", 
    StyleBox["I",
     FontWeight->"Bold"]}], TraditionalForm]],ExpressionUUID->
  "5e5698b8-0683-480e-a0b6-10610b0bddae"]
}], "Item",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBmIQ3f96tbbm2jeOITveGoLoxTLZ9tpAWl1+E5hWZN1o
Ewyk0x4/CQfRtQdlEkD0jj//EkH0tcmpU0D0K1/N6SD6XuGOuSBaddZnMK2c
+X0biN70/doeED3h3eFDILruoc9hEK3ybsMNEP0/5dNdEB0acuARiBaeGPgR
bJ73098guovvLmMIkPaIPSYLoqds+KIIoj89kridtP6No/PeQw9AdIlp8TMQ
vS60HUzP6Xb9gkwH3U75BaLDIr/+BtF+079mJQPp6V+9CkC0963UWhB9pvEX
mH52+PJ8EN09MWw5iAYAz4mtHA==
  "],ExpressionUUID->"c044013b-ffea-4c9a-a99d-bcdc82330dd3"],

Cell[TextData[{
 "In summary, the unknowns in this problem are ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    SubscriptBox["A", "U"],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "e2be9e04-6462-4b84-806e-709650f01718"],
 ", ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    SubscriptBox["A", "V"],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "0e33b463-e577-4283-b84c-e2190cd47c8c"],
 ", and ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    SubscriptBox["t", "V"],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "54463a13-2950-4cbd-bae6-52affd0f9df6"],
 ". For numerical minimization in ",
 Cell[BoxData[
  FormBox[
   RowBox[{"d", "=", "2"}], TraditionalForm]],ExpressionUUID->
  "8e69396e-073e-4832-ac30-924696f70710"],
 " using the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", "=", "2"}], TraditionalForm]],ExpressionUUID->
  "3c65d618-367f-446b-b19b-752d21e5c9e2"],
 " largest singular values, we can set ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox[
     SubscriptBox["A", "U"],
     FontWeight->"Bold"], "=", 
    StyleBox[" ",
     FontWeight->"Bold"], 
    SuperscriptBox[
     RowBox[{"(", 
      SuperscriptBox[
       RowBox[{"(", 
        StyleBox[
         SubscriptBox["A", "V"],
         FontWeight->"Bold"], ")"}], "T"], ")"}], "\[Dagger]"]}], 
   TraditionalForm]],ExpressionUUID->"4e4aac66-d78d-4ee9-8f32-e7322e682a7c"],
 " where the dagger superscript represents the matrix pseudoinverse (or the \
matrix inverse when ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", "=", "d"}], TraditionalForm]],ExpressionUUID->
  "ed5b02c0-3e54-4097-b0a5-136cdb1d574c"],
 "). Therefore, there are only ",
 StyleBox["6 unknown variables",
  FontSlant->"Italic"],
 ", regardless of how many antibodies or viruses need to be mapped. For SDP, \
we keep ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["A", "U"], TraditionalForm]],
  FontWeight->"Bold",ExpressionUUID->"05a2de41-a1b4-4172-91c4-466812f6f66d"],
 " as a variable and impose the SDP constraint ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{
      StyleBox[
       SubscriptBox["A", "U"],
       FontWeight->"Bold"], "(", 
      StyleBox[
       SubscriptBox["A", "V"],
       FontWeight->"Bold"], ")"}], "T"], "=", 
    StyleBox["I",
     FontWeight->"Bold"]}], TraditionalForm]],ExpressionUUID->
  "9e832ab4-eb9b-46b3-986a-54fa109328bd"],
 ". With either method, we minimize the squared-distance between each \
antibody-virus pair and ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["D",
     FontWeight->"Bold"], "2"], TraditionalForm]],ExpressionUUID->
  "1cdc02da-f28c-4e46-ba47-2760da0d2c73"]
}], "Item",
 CellChangeTimes->{{3.8488825253725047`*^9, 3.848882575428751*^9}, {
  3.8488867793472457`*^9, 3.848886781566303*^9}, {3.848968677531876*^9, 
  3.8489688951527586`*^9}, {3.848968960898619*^9, 3.8489689759683495`*^9}, {
  3.8489693791742964`*^9, 3.848969401290761*^9}, {3.8489694537639*^9, 
  3.8489694556125665`*^9}, {3.848969655731584*^9, 3.8489697027177362`*^9}, {
  3.8489697501228714`*^9, 3.848969754402526*^9}, {3.84896992552907*^9, 
  3.8489699675748286`*^9}, {3.8489700060102944`*^9, 3.8489700481973877`*^9}, {
  3.8489701428609695`*^9, 3.84897014620333*^9}, {3.8489701790579023`*^9, 
  3.8489701829801865`*^9}, {3.8489702691842766`*^9, 3.8489704023290205`*^9}, {
  3.8500495232493277`*^9, 3.850049528329443*^9}, {3.850049560781252*^9, 
  3.8500495673009853`*^9}, {3.8500505498096733`*^9, 3.8500507353382683`*^9}, {
  3.850050883489378*^9, 
  3.8500508896614485`*^9}},ExpressionUUID->"cd3b5a1f-f030-4891-978f-\
f709608af7b1"],

Cell["Notes:", "Text",
 CellChangeTimes->{{3.8489706254538765`*^9, 
  3.848970625843217*^9}},ExpressionUUID->"88df86af-c7a1-49e8-880e-\
8c3f3809f045"],

Cell[TextData[{
 "For small-to-medium noise, choosing  ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", ">", "d"}], TraditionalForm]],ExpressionUUID->
  "7f02bac7-7e61-4708-b6da-48c332deac55"],
 " takes longer but gives better results. Once the error passes a certain \
threshold (around ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", "\[TildeTilde]", "1.5"}], TraditionalForm]],ExpressionUUID->
  "942c8ad8-fcb0-4216-b4da-4bc6fddae788"],
 " for antibodies and viruses distributed between ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"[", 
     RowBox[{
      RowBox[{"-", "2.5"}], ",", "2.5"}], "]"}], "\[Cross]", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"-", "2.5"}], ",", "2.5"}], "]"}]}], TraditionalForm]],
  ExpressionUUID->"d5cafae1-d725-4656-9695-ac25ec0d2c7a"],
 "), the map will be poor regardless of how large ",
 Cell[BoxData[
  FormBox["r", TraditionalForm]],ExpressionUUID->
  "05c85777-add7-4581-b92b-5ff043a8cd69"],
 " is"
}], "Item",
 CellChangeTimes->{{3.848970629118311*^9, 3.8489707022947044`*^9}, {
  3.8489745570128174`*^9, 3.848974579959191*^9}, {3.848974691340238*^9, 
  3.8489747677385406`*^9}, {3.849791014151182*^9, 3.849791014385178*^9}, {
  3.849973517786126*^9, 
  3.849973517786126*^9}},ExpressionUUID->"98121d9d-ae27-419c-b6ae-\
e9ac21bd114f"],

Cell[TextData[{
 "The SDP relies on the Schur complement lemma (described in the ",
 Cell[BoxData[
  FormBox[
   TemplateBox[{
    "\"SemidefiniteOptimization\"", "paclet:ref/SemidefiniteOptimization"},
    "HyperlinkPaclet"], TraditionalForm]],ExpressionUUID->
  "9ca75e6b-2532-4454-b846-75e25af573b2"],
 " documentation). The goal is to minimize the following expression where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[Phi]", "j"], TraditionalForm]],ExpressionUUID->
  "ef2f77d1-dc4a-48bd-bba1-206be26cc3ed"],
 " (coordinates with an affine transform) is known, the summation is done \
over all pair for which the distance ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["\[CapitalDelta]", 
    RowBox[{"i", "\[InvisibleComma]", "j"}]], TraditionalForm]],
  ExpressionUUID->"24c56aa8-b509-4034-abd3-67b3fb97f891"],
 " is known, and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"P", "\[VectorGreaterEqual]", "0"}], TraditionalForm]],
  ExpressionUUID->"e72d907a-84dc-46c5-b100-e0f67d071025"],
 " is positive semidefinite "
}], "Item",
 CellChangeTimes->{{3.848970629118311*^9, 3.8489707022947044`*^9}, {
  3.8489745570128174`*^9, 3.848974579959191*^9}, {3.848974691340238*^9, 
  3.8489747677385406`*^9}, {3.849791014151182*^9, 3.849791014385178*^9}, {
  3.849973534759691*^9, 
  3.8499736207741613`*^9}},ExpressionUUID->"26b8018e-935f-4d04-8782-\
a6e7bdc8fe78"],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{"Min", 
   RowBox[{
    SubscriptBox["\[Sum]", 
     RowBox[{"i", "~", "j"}]], 
    SuperscriptBox[
     RowBox[{"[", 
      RowBox[{
       RowBox[{
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{
           SubscriptBox["\[Phi]", "i"], "-", 
           SubscriptBox["\[Phi]", "j"]}], ")"}], "T"], "G", " ", 
        RowBox[{"(", 
         RowBox[{
          SubscriptBox["\[Phi]", "i"], "-", 
          SubscriptBox["\[Phi]", "j"]}], ")"}]}], "-", 
       SubsuperscriptBox["\[CapitalDelta]", 
        RowBox[{"i", "\[InvisibleComma]", "j"}], "2"]}], "]"}], "2"]}]}], 
  TraditionalForm]],ExpressionUUID->"5df287aa-4766-4169-8feb-9f91399b49e4"]], \
"TextNumbered",
 CellChangeTimes->{{3.848970629118311*^9, 3.8489707022947044`*^9}, {
  3.8489745570128174`*^9, 3.848974579959191*^9}, {3.848974691340238*^9, 
  3.8489747677385406`*^9}, {3.849791014151182*^9, 3.849791014385178*^9}, {
  3.849973534759691*^9, 3.8499735943456297`*^9}, {3.8499737191221185`*^9, 
  3.8499737191221185`*^9}},ExpressionUUID->"a37194e9-9d05-4d6d-af6a-\
70f81edb6459"],

Cell[TextData[{
 "With SDP, you can minimize ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      RowBox[{"\[Alpha]", ".", "x"}], "+", "\[Beta]"}], ")"}], "2"], 
   TraditionalForm]], "InlineMath",ExpressionUUID->
  "5020679a-d6b8-40c1-9b40-46716a0db2d3"],
 ", where in this case ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Alpha]", ".", "x"}], "=", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{
        SubscriptBox["\[Phi]", "i"], "-", 
        SubscriptBox["\[Phi]", "j"]}], ")"}], "T"], "P", " ", 
     RowBox[{"(", 
      RowBox[{
       SubscriptBox["\[Phi]", "i"], "-", 
       SubscriptBox["\[Phi]", "j"]}], ")"}]}]}], TraditionalForm]],
  ExpressionUUID->"047e02a8-6ed3-455f-b486-9ccf4e300521"],
 " will be a linear combination of the ",
 Cell[BoxData[
  FormBox["G", TraditionalForm]],ExpressionUUID->
  "a15d6363-02bc-426a-a8ae-85cd49c9d5b2"],
 " coefficients and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Beta]", "=", 
    RowBox[{"-", 
     SubsuperscriptBox["\[CapitalDelta]", 
      RowBox[{"i", "\[InvisibleComma]", "j"}], "2"]}]}], TraditionalForm]],
  ExpressionUUID->"5d9fe7a9-94a6-47ae-bf60-bed826076ccf"],
 ". Using the auxiliary variable ",
 Cell[BoxData[
  FormBox["t", TraditionalForm]], "InlineMath",ExpressionUUID->
  "823fd7f1-9d0e-4f6c-8fec-37f9a19301c8"],
 ", the objective is to minimize ",
 Cell[BoxData[
  FormBox["t", TraditionalForm]], "InlineMath",ExpressionUUID->
  "7e883e8b-7e98-41f4-ae91-8541088f9dda"],
 " such that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"\[Alpha]", ".", "x"}], "+", "\[Beta]"}], ")"}], "2"], 
    "\[LessEqual]", "t"}], TraditionalForm]], "InlineMath",ExpressionUUID->
  "7492ba97-6b88-4d51-8154-d29bfbfb0819"]
}], "Subitem",
 CellChangeTimes->{{3.848970629118311*^9, 3.8489707022947044`*^9}, {
  3.8489745570128174`*^9, 3.848974579959191*^9}, {3.848974691340238*^9, 
  3.8489747677385406`*^9}, {3.849791014151182*^9, 3.849791014385178*^9}, {
  3.849973534759691*^9, 3.849973658684365*^9}, {3.8499737097141705`*^9, 
  3.8499737216430902`*^9}},ExpressionUUID->"77e862c0-eddc-4992-9f5b-\
97db8cf7e624"],

Cell[TextData[{
 "The Schur complement condition says that the block matrix ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"A", "B"},
        {
         SuperscriptBox["B", "T"], "1"}
       },
       GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.7]}, 
           Offset[0.27999999999999997`]}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}}], "\[NoBreak]", ")"}], "\[VectorGreaterEqual]", "0"}],
    FontSize->12], TraditionalForm]], "InlineMath",
  FontSize->9,ExpressionUUID->"43c8e664-522f-4771-ba16-ce5cea69a522"],
 " iff ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"A", "-", 
     RowBox[{"B", ".", 
      SuperscriptBox["B", "T"]}]}], "\[VectorGreaterEqual]", "0"}], 
   TraditionalForm]], "InlineMath",ExpressionUUID->
  "a39ad010-2724-4f0b-8aa9-e90a5355e682"],
 ". In our case, ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "d09d95cc-a2d8-4662-9ec2-c558248ad848"],
 " and ",
 Cell[BoxData[
  FormBox["B", TraditionalForm]],ExpressionUUID->
  "64a5ba8b-e91e-4ec1-b95e-a1eed4f9a098"],
 " can be scalars"
}], "Subitem",
 CellChangeTimes->{{3.848970629118311*^9, 3.8489707022947044`*^9}, {
  3.8489745570128174`*^9, 3.848974579959191*^9}, {3.848974691340238*^9, 
  3.8489747677385406`*^9}, {3.849791014151182*^9, 3.849791014385178*^9}, {
  3.849973534759691*^9, 
  3.849973664057129*^9}},ExpressionUUID->"0d56db17-cf21-4525-9c35-\
edd977bf2f29"],

Cell[TextData[{
 "Using the Schur complement condition, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{
       RowBox[{"\[Alpha]", ".", "x"}], "+", "\[Beta]"}], ")"}], "2"], 
    "\[LessEqual]", "t"}], TraditionalForm]], "InlineMath",ExpressionUUID->
  "462e9e0e-97c3-4590-b6d6-62b3693f9677"],
 " iff ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"(", GridBox[{
       {"t", 
        RowBox[{
         RowBox[{"\[Alpha]", ".", "x"}], "+", "\[Beta]"}]},
       {
        RowBox[{
         RowBox[{"\[Alpha]", ".", "x"}], "+", "\[Beta]"}], 
        RowBox[{"1", " "}]}
      }], ")"}], 
    FormBox[
     RowBox[{"\[SucceedsEqual]", "0"}],
     TraditionalForm]}], TraditionalForm]], "InlineMath",ExpressionUUID->
  "464c933a-857f-4c80-9161-bd49d42923cf"],
 ". We will implement multiple such conditions, one for each measured \
antibody-virus distance, and minimize the summation of these ",
 Cell[BoxData[
  FormBox["t", TraditionalForm]],ExpressionUUID->
  "2d96dd2a-dad2-447c-9eab-eaa1151621ae"],
 " variables"
}], "Subitem",
 CellChangeTimes->{{3.848970629118311*^9, 3.8489707022947044`*^9}, {
  3.8489745570128174`*^9, 3.848974579959191*^9}, {3.848974691340238*^9, 
  3.8489747677385406`*^9}, {3.849791014151182*^9, 3.849791014385178*^9}, {
  3.849973534759691*^9, 
  3.849973704121689*^9}},ExpressionUUID->"99aa19e1-98c0-48a6-9004-\
53edc20a0f9d"],

Cell[CellGroupData[{

Cell[TextData[{
 "The matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{"G", "=", 
    RowBox[{
     RowBox[{"Z", " ", 
      SuperscriptBox["Z", "T"]}], "=", 
     RowBox[{
      RowBox[{
       RowBox[{"(", GridBox[{
          {"-", 
           SubscriptBox["A", "U"], "-"},
          {"-", 
           SubscriptBox["A", "V"], "-"},
          {"-", 
           SubsuperscriptBox["t", "V", "T"], "-"}
         }], ")"}], 
       RowBox[{"(", GridBox[{
          {"|", "|", "|"},
          {
           SubsuperscriptBox["A", "U", "T"], 
           SubsuperscriptBox["A", "V", "T"], 
           SubscriptBox["t", "V"]},
          {"|", "|", "|"}
         }], ")"}]}], "=", 
      RowBox[{
       RowBox[{"(", GridBox[{
          {
           RowBox[{
            SubscriptBox["A", "U"], 
            SubsuperscriptBox["A", "U", "T"]}], 
           RowBox[{
            SubscriptBox["A", "U"], 
            SubsuperscriptBox["A", "V", "T"]}], 
           RowBox[{
            SubscriptBox["A", "U"], 
            SubscriptBox["t", "V"]}]},
          {
           RowBox[{
            SubscriptBox["A", "V"], 
            SubsuperscriptBox["A", "U", "T"]}], 
           RowBox[{
            SubscriptBox["A", "V"], 
            SubsuperscriptBox["A", "V", "T"]}], 
           RowBox[{
            SubscriptBox["A", "V"], 
            SubscriptBox["t", "V"]}]},
          {
           RowBox[{
            SubsuperscriptBox["t", "V", "T"], 
            SubsuperscriptBox["A", "U", "T"]}], 
           RowBox[{
            SubsuperscriptBox["t", "V", "T"], 
            SubsuperscriptBox["A", "V", "T"]}], 
           RowBox[{
            SubsuperscriptBox["t", "V", "T"], 
            SubscriptBox["t", "V"]}]}
         }], ")"}], "\[Element]", 
       RowBox[{"(", GridBox[{
          {
           SuperscriptBox["\[DoubleStruckCapitalR]", 
            RowBox[{"r", "\[Cross]", "r"}]], 
           SuperscriptBox["\[DoubleStruckCapitalR]", 
            RowBox[{"r", "\[Cross]", "r"}]], 
           SuperscriptBox["\[DoubleStruckCapitalR]", 
            RowBox[{"r", "\[Cross]", "1"}]]},
          {
           SuperscriptBox["\[DoubleStruckCapitalR]", 
            RowBox[{"r", "\[Cross]", "r"}]], 
           SuperscriptBox["\[DoubleStruckCapitalR]", 
            RowBox[{"r", "\[Cross]", "r"}]], 
           SuperscriptBox["\[DoubleStruckCapitalR]", 
            RowBox[{"r", "\[Cross]", "1"}]]},
          {
           SuperscriptBox["\[DoubleStruckCapitalR]", 
            RowBox[{"1", "\[Cross]", "r"}]], 
           SuperscriptBox["\[DoubleStruckCapitalR]", 
            RowBox[{"1", "\[Cross]", "r"}]], 
           SuperscriptBox["\[DoubleStruckCapitalR]", 
            RowBox[{"1", "\[Cross]", "1"}]]}
         }], ")"}]}]}]}]}], TraditionalForm]],ExpressionUUID->
  "59382123-b0b8-42bf-bf11-14d0d6f37507"]
}], "Subitem",
 CellChangeTimes->{{3.848970629118311*^9, 3.8489707022947044`*^9}, {
  3.8489745570128174`*^9, 3.848974579959191*^9}, {3.848974691340238*^9, 
  3.8489747677385406`*^9}, {3.849791014151182*^9, 3.849791014385178*^9}, {
  3.849973534759691*^9, 3.849973658684365*^9}, {3.849973709955351*^9, 
  3.849973731038043*^9}, {3.8499737686761007`*^9, 
  3.8499738046429796`*^9}},ExpressionUUID->"e986fab8-962b-4d6d-9860-\
e3c06b1c7560"],

Cell[TextData[{
 "For the general case ",
 Cell[BoxData[
  FormBox[
   RowBox[{"r", ">", "d"}], TraditionalForm]],ExpressionUUID->
  "6967666c-f864-405a-a90c-0a5032e1c21c"],
 ", we impose the PSD constraint ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{
      StyleBox[
       SubscriptBox["A", "V"],
       FontWeight->"Bold"], "(", 
      StyleBox[
       SubscriptBox["A", "U"],
       FontWeight->"Bold"], 
      StyleBox[")",
       FontWeight->"Plain"]}], "T"], "=", 
    RowBox[{
     SuperscriptBox[
      RowBox[{
       StyleBox[
        SubscriptBox["A", "U"],
        FontWeight->"Bold"], "(", 
       StyleBox[
        SubscriptBox["A", "V"],
        FontWeight->"Bold"], 
       StyleBox[")",
        FontWeight->"Plain"]}], "T"], "=", 
     RowBox[{
      RowBox[{"(", 
       StyleBox[GridBox[{
          {"I", "0"},
          {"0", "0"}
         }],
        FontWeight->"Bold"], 
       StyleBox[")",
        FontWeight->"Plain"]}], "\[Element]", 
      RowBox[{"(", 
       StyleBox[GridBox[{
          {
           StyleBox[
            SuperscriptBox["\[DoubleStruckCapitalR]", 
             RowBox[{"d", "\[Cross]", "d"}]],
            FontWeight->"Plain"], 
           StyleBox[
            SuperscriptBox["\[DoubleStruckCapitalR]", 
             RowBox[{
              RowBox[{"d", "\[Cross]", "r"}], "-", "d"}]],
            FontWeight->"Plain"]},
          {
           StyleBox[
            SuperscriptBox["\[DoubleStruckCapitalR]", 
             RowBox[{"r", "-", 
              RowBox[{"d", "\[Cross]", "d"}]}]],
            FontWeight->"Plain"], 
           StyleBox[
            SuperscriptBox["\[DoubleStruckCapitalR]", 
             RowBox[{"r", "-", 
              RowBox[{"d", "\[Cross]", "r"}], "-", "d"}]],
            FontWeight->"Plain"]}
         }],
        FontWeight->"Bold"], 
       StyleBox[")",
        FontWeight->"Plain"]}]}]}]}], TraditionalForm]],ExpressionUUID->
  "f694360c-1cd6-41e4-864f-d7138080d0f9"],
 ". The dimensions are: "
}], "Subsubitem",
 CellChangeTimes->{{3.848970629118311*^9, 3.8489707022947044`*^9}, {
  3.8489745570128174`*^9, 3.848974579959191*^9}, {3.848974691340238*^9, 
  3.8489747677385406`*^9}, {3.849791014151182*^9, 3.849791014385178*^9}, {
  3.849973534759691*^9, 3.849973658684365*^9}, {3.849973709955351*^9, 
  3.849973731038043*^9}, {3.8499737686761007`*^9, 3.8499738695868373`*^9}, {
  3.850264733295603*^9, 3.850264737766515*^9}, {3.850264863218435*^9, 
  3.850264865756739*^9}},ExpressionUUID->"bff8161e-7845-49dc-8042-\
890cb4115ea2"]
}, Open  ]],

Cell[TextData[Cell[BoxData[
 FormBox[GridBox[{
    {
     RowBox[{
      StyleBox["Vir",
       FontWeight->"Bold"], "\[Element]", 
      SuperscriptBox["\[DoubleStruckCapitalR]", 
       RowBox[{"m", "\[Cross]", "d"}]]}], "\[InvisibleComma]", 
     RowBox[{
      StyleBox["Ab",
       FontWeight->"Bold"], "\[Element]", 
      SuperscriptBox["\[DoubleStruckCapitalR]", 
       RowBox[{"n", "\[Cross]", "d"}]]}], "\[InvisibleComma]", 
     RowBox[{
      StyleBox[
       SubscriptBox["A", "U"],
       FontWeight->"Bold"], 
      StyleBox[",",
       FontWeight->"Bold"], 
      RowBox[{
       StyleBox[
        SubscriptBox["A", "V"],
        FontWeight->"Bold"], "\[Element]", 
       SuperscriptBox["\[DoubleStruckCapitalR]", 
        RowBox[{"r", "\[Cross]", "d"}]]}]}], "\[InvisibleComma]", 
     RowBox[{
      SubscriptBox[
       StyleBox["Vir",
        FontWeight->"Bold",
        FontSlant->"Italic"], "j"], ",", 
      RowBox[{
       SubscriptBox[
        StyleBox["Ab",
         FontWeight->"Bold",
         FontSlant->"Italic"], "k"], "\[Element]", 
       SuperscriptBox["\[DoubleStruckCapitalR]", 
        RowBox[{"1", "\[Cross]", "d"}]]}]}]},
    {
     RowBox[{
      StyleBox["U",
       FontWeight->"Bold"], "\[Element]", 
      SuperscriptBox["\[DoubleStruckCapitalR]", 
       RowBox[{"m", "\[Cross]", "r"}]]}], "\[InvisibleComma]", 
     RowBox[{
      StyleBox["V",
       FontWeight->"Bold"], "\[Element]", 
      SuperscriptBox["\[DoubleStruckCapitalR]", 
       RowBox[{"n", "\[Cross]", "r"}]]}], "\[InvisibleComma]", 
     RowBox[{
      StyleBox["\[CapitalSigma]",
       FontWeight->"Bold"], "\[Element]", 
      SuperscriptBox["\[DoubleStruckCapitalR]", 
       RowBox[{"r", "\[Cross]", "r"}]]}], "\[InvisibleComma]", 
     RowBox[{
      StyleBox[
       SubscriptBox["t", "V"],
       FontWeight->"Bold"], "\[Element]", 
      SuperscriptBox["\[DoubleStruckCapitalR]", 
       RowBox[{"d", "\[Cross]", "1"}]]}]}
   }], TraditionalForm]],ExpressionUUID->"5549edc5-b260-49de-8221-\
798867f654b9"]], "TextNumbered",
 CellChangeTimes->{{3.8502647521373496`*^9, 
  3.850264859589247*^9}},ExpressionUUID->"b8d36889-4b5a-4bec-b8aa-\
86546c4bbbcd"],

Cell[BoxData[
 RowBox[{
  RowBox[{"classicalAbVirus", "[", 
   RowBox[{"distMatrixRaw_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"distMatrix", "=", "distMatrixRaw"}], ",", 
      RowBox[{"dim", "=", 
       RowBox[{"OptionValue", "[", "\"\<Dimensions\>\"", "]"}]}], ",", 
      RowBox[{"rank", "=", 
       RowBox[{"OptionValue", "[", "\"\<Rank\>\"", "]"}]}], ",", "posMissing",
       ",", "m", ",", "n", ",", "U", ",", "\[CapitalSigma]", ",", "V", ",", 
      "Au", ",", "Av", ",", "tv", ",", "a", ",", "b", ",", "coordsVirusHat", 
      ",", "coordsAbHat", ",", "distMatrixHat", ",", "error", ",", "minSol", 
      ",", "expr", ",", "G", ",", "t", ",", "constraints", ",", "Gmat", ",", 
      "inverse", ",", "coords"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{"Replace", " ", 
      RowBox[{"upper", "/", "lower"}], " ", "bounds", " ", "by", " ", "their",
       " ", "value"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"distMatrix", "=", 
      RowBox[{"distMatrix", "/.", 
       RowBox[{
        RowBox[{
         RowBox[{"GreaterThan", "[", "val_", "]"}], "|", 
         RowBox[{"LessThan", "[", "val_", "]"}]}], ":>", "val"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Replace", " ", "missing", " ", "values", " ", "by", " ", "the", " ", 
       "average", " ", "of", " ", "values", " ", "in", " ", "their", " ", 
       "row", " ", "and", " ", "column"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"posMissing", "=", 
      RowBox[{"Position", "[", 
       RowBox[{"distMatrix", ",", "_Missing"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"distMatrix", "=", 
      RowBox[{"ReplacePart", "[", 
       RowBox[{"distMatrix", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "\[Rule]", 
           RowBox[{"Mean", "@", 
            RowBox[{"DeleteMissing", "@", 
             RowBox[{"Join", "[", 
              RowBox[{
               RowBox[{"distMatrix", "[", 
                RowBox[{"[", 
                 RowBox[{"First", "@", "#"}], "]"}], "]"}], ",", 
               RowBox[{"distMatrix", "[", 
                RowBox[{"[", 
                 RowBox[{"All", ",", 
                  RowBox[{"Last", "@", "#"}]}], "]"}], "]"}]}], "]"}]}]}]}], 
          "&"}], "/@", "posMissing"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"rank", "=", 
      RowBox[{"Max", "[", 
       RowBox[{"rank", ",", "dim"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", ",", "n"}], "}"}], "=", 
      RowBox[{"Dimensions", "@", "distMatrix"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"SVD", " ", "of", " ", "the", " ", "double"}], "-", 
       RowBox[{"centered", " ", "distance", " ", "matrix"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"U", ",", "\[CapitalSigma]", ",", "V"}], "}"}], "=", 
      RowBox[{"SingularValueDecomposition", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"-", 
          FractionBox["1.", "2"]}], 
         RowBox[{
          RowBox[{"J", "[", "m", "]"}], ".", 
          SuperscriptBox["distMatrix", "2"], ".", 
          RowBox[{"J", "[", "n", "]"}]}]}], ",", "rank"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"OptionValue", "[", "\"\<Verbose\>\"", "]"}], ",", 
       RowBox[{"Echo", "[", 
        RowBox[{
         RowBox[{"MatrixForm", "/@", 
          RowBox[{"{", 
           RowBox[{"U", ",", "\[CapitalSigma]", ",", "V"}], "}"}]}], ",", 
         "\"\<{U,\[CapitalSigma],V}:\>\""}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Find", " ", "the", " ", "transformations", " ", "to", " ", "express", 
       " ", "the", " ", "virus", " ", "and", " ", "antibody", " ", 
       "coordinates", " ", "in", " ", "terms", " ", "of", " ", "U", " ", 
       "and", " ", "V"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{
       RowBox[{"OptionValue", "[", "Method", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Find", " ", "transformations", " ", "through", " ", "numerical", " ",
          "minimization"}], " ", "*)"}], "\[IndentingNewLine]", 
       "\"\<NumericMinimization\>\"", ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"Symbolically", " ", "describe", " ", "the", " ", 
         RowBox[{"antibody", "/", "virus"}], " ", "coordinates"}], " ", 
        "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Av", "=", 
         RowBox[{"Array", "[", 
          RowBox[{"a", ",", 
           RowBox[{"{", 
            RowBox[{"rank", ",", "dim"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"coordsVirusHat", "=", 
         RowBox[{"U", ".", "\[CapitalSigma]", ".", 
          RowBox[{"Simplify", "[", 
           RowBox[{
            RowBox[{"PseudoInverse", "[", 
             RowBox[{"Transpose", "@", "Av"}], "]"}], ",", 
            RowBox[{"Assumptions", "\[Rule]", 
             RowBox[{
              RowBox[{"a", "[", 
               RowBox[{"_", ",", "_"}], "]"}], "\[Element]", "Reals"}]}]}], 
           "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"coordsAbHat", "=", 
         RowBox[{
          RowBox[{"V", ".", "Av"}], "+", 
          RowBox[{"ConstantArray", "[", 
           RowBox[{
            RowBox[{"Array", "[", 
             RowBox[{"b", ",", "dim"}], "]"}], ",", "n"}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Compute", " ", "the", " ", "symbolic", " ", "distance", " ", 
          "matrix"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"distMatrixHat", "=", 
         RowBox[{"Outer", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Sqrt", "[", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"#1", "-", "#2"}], ")"}], ".", 
              RowBox[{"(", 
               RowBox[{"#1", "-", "#2"}], ")"}]}], "]"}], "&"}], ",", 
           "coordsVirusHat", ",", "coordsAbHat", ",", "1"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Numerically", " ", "minimize", " ", "over", " ", "the", " ", 
          "observed", " ", "entries"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"error", ",", "minSol"}], "}"}], "=", 
         RowBox[{"NMinimize", "[", 
          RowBox[{
           RowBox[{"Total", "[", 
            RowBox[{
             RowBox[{"Delete", "[", 
              RowBox[{
               SuperscriptBox[
                RowBox[{"(", 
                 RowBox[{"distMatrixHat", "-", "distMatrix"}], ")"}], "2"], 
               ",", "posMissing"}], "]"}], ",", "2"}], "]"}], ",", 
           RowBox[{"Variables", "@", "distMatrixHat"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"OLD", " ", 
          RowBox[{"version", ":", " ", 
           RowBox[{
           "Including", " ", "the", " ", "constraints", " ", "for", " ", 
            "the", " ", "missing", " ", "distance", " ", "matrix", " ", 
            "elements"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"error", ",", "minSol"}], "}"}], "=", 
           RowBox[{"NMinimize", "[", 
            RowBox[{
             RowBox[{"Total", "[", 
              RowBox[{
               SuperscriptBox[
                RowBox[{"(", 
                 RowBox[{"distMatrixHat", "-", "distMatrix"}], ")"}], "2"], 
               ",", "2"}], "]"}], ",", 
             RowBox[{"Variables", "@", "distMatrixHat"}]}], "]"}]}], ";"}], 
         "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"Return", " ", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"virus", " ", "coordinates"}], ",", " ", 
            RowBox[{"antibody", " ", "coordinates"}]}], "}"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"coordsVirusHat", ",", "coordsAbHat"}], "}"}], "/.", 
         "minSol"}]}], ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Semidefinite", " ", "optimization", " ", "using", " ", 
           RowBox[{"Schur", "'"}], "s", " ", "complement", " ", "condition", 
           " ", "to", " ", "minimize", " ", "the", " ", "difference", " ", 
           "between", " ", "the", " ", "map", " ", "and", " ", "measured", 
           " ", "squared"}], "-", 
          RowBox[{
           RowBox[{"distances", ".", " ", "Unlike"}], " ", "numerical", " ", 
           "minimization"}]}], ",", " ", 
         RowBox[{
         "SDP", " ", "should", " ", "always", " ", "find", " ", "the", " ", 
          "global", " ", "optimum"}]}], " ", "*)"}], "\[IndentingNewLine]", 
       "\"\<SDP\>\"", ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
         "Difference", " ", "between", " ", "measured", " ", "and", " ", 
          "mapped", " ", "squared"}], "-", 
         RowBox[{"distance", " ", "of", " ", "virus", " ", 
          StyleBox["j",
           FontSlant->"Italic"], " ", "and", " ", "antibody", " ", 
          StyleBox["k",
           FontSlant->"Italic"]}]}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         StyleBox[
          RowBox[{"Construct", " ", "the", " ", "Gram", " ", "matrix"}],
          FontSlant->"Plain"], 
         StyleBox[",",
          FontSlant->"Plain"], " ", 
         FormBox[
          RowBox[{"G", "=", 
           RowBox[{
            RowBox[{"(", GridBox[{
               {"-", 
                SubscriptBox["A", "U"], "-"},
               {"-", 
                SubscriptBox["A", "V"], "-"},
               {"-", 
                SubsuperscriptBox["t", "V", "T"], "-"}
              }], ")"}], 
            RowBox[{"(", GridBox[{
               {"|", "|", "|"},
               {
                SubsuperscriptBox["A", "U", "T"], 
                SubsuperscriptBox["A", "V", "T"], 
                SubscriptBox["t", "V"]},
               {"|", "|", "|"}
              }], ")"}]}]}],
          TraditionalForm]}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"expr", "=", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          FormBox[
           RowBox[{
            RowBox[{
             StyleBox["U",
              FontWeight->"Bold"], "[", 
             RowBox[{"[", "j", "]"}], "]"}], "\[InvisibleComma]", 
            StyleBox["\[CapitalSigma]",
             FontWeight->"Bold"], 
            StyleBox["\[InvisibleComma]",
             FontWeight->"Bold"], 
            StyleBox[
             RowBox[{
              SubscriptBox["A", "U"], 
              SubsuperscriptBox["A", "U", 
               StyleBox["T",
                FontWeight->"Plain"]], "\[CapitalSigma]"}],
             FontWeight->"Bold"], 
            StyleBox["\[InvisibleComma]",
             FontWeight->"Bold"], 
            RowBox[{
             StyleBox["U",
              FontWeight->"Bold"], "[", 
             RowBox[{"[", "j", "]"}], "]"}], 
            SuperscriptBox[
             StyleBox["\[InvisibleComma]",
              FontWeight->"Plain"], "T"]}],
           TraditionalForm], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Transpose", "@", 
           RowBox[{"ConstantArray", "[", 
            RowBox[{
             RowBox[{"Diagonal", "[", 
              RowBox[{"U", ".", "\[CapitalSigma]", ".", 
               RowBox[{"Array", "[", 
                RowBox[{
                 RowBox[{
                  TemplateBox[{"G", "#1", "#2"},
                   "IndexedDefault"], "&"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"rank", ",", "rank"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "1"}], "}"}]}], "]"}], ".", 
               "\[CapitalSigma]", ".", 
               RowBox[{"Transpose", "@", "U"}]}], "]"}], ",", "n"}], "]"}]}], 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           FormBox[
            RowBox[{
             RowBox[{
              StyleBox["V",
               FontWeight->"Bold"], "[", 
              RowBox[{"[", "k", "]"}], "]"}], "\[InvisibleComma]", 
             RowBox[{
              StyleBox[
               SubscriptBox["A", "V"],
               FontWeight->"Bold"], 
              StyleBox[
               SubsuperscriptBox["A", "V", 
                StyleBox["T",
                 FontWeight->"Plain"]],
               FontWeight->"Bold"], 
              RowBox[{
               StyleBox["V",
                FontWeight->"Bold"], "[", 
               RowBox[{"[", "k", "]"}], "]"}]}], 
             SuperscriptBox["\[InvisibleComma]", "T"]}],
            TraditionalForm], " ", "*)"}], "\[IndentingNewLine]", "+", 
          RowBox[{"ConstantArray", "[", 
           RowBox[{
            RowBox[{"Diagonal", "[", 
             RowBox[{"V", ".", 
              RowBox[{"Array", "[", 
               RowBox[{
                RowBox[{
                 TemplateBox[{"G", "#1", "#2"},
                  "IndexedDefault"], "&"}], ",", 
                RowBox[{"{", 
                 RowBox[{"rank", ",", "rank"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"rank", "+", "1"}], ",", 
                  RowBox[{"rank", "+", "1"}]}], "}"}]}], "]"}], ".", 
              RowBox[{"Transpose", "@", "V"}]}], "]"}], ",", "m"}], "]"}], 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           FormBox[
            StyleBox[
             RowBox[{
              SubsuperscriptBox["t", "V", 
               StyleBox["T",
                FontWeight->"Plain"]], 
              SubscriptBox["t", "V"]}],
             FontWeight->"Bold"],
            TraditionalForm], " ", "*)"}], "\[IndentingNewLine]", "+", 
          TemplateBox[{"G", 
            RowBox[{
              RowBox[{"2", "rank"}], "+", "1"}], 
            RowBox[{
              RowBox[{"2", "rank"}], "+", "1"}]},
           "IndexedDefault"], "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           FormBox[
            RowBox[{
             RowBox[{
              RowBox[{"-", "2"}], 
              RowBox[{
               StyleBox["V",
                FontWeight->"Bold"], "[", 
               RowBox[{"[", "k", "]"}], "]"}]}], 
             StyleBox["\[InvisibleComma]",
              FontWeight->"Bold"], 
             StyleBox["\[CapitalSigma]",
              FontWeight->"Bold"], 
             StyleBox["\[InvisibleComma]",
              FontWeight->"Bold"], 
             RowBox[{
              StyleBox["U",
               FontWeight->"Bold"], "[", 
              RowBox[{"[", "j", "]"}], "]"}], 
             SuperscriptBox["\[InvisibleComma]", "T"]}],
            TraditionalForm], " ", "*)"}], "\[IndentingNewLine]", "-", 
          RowBox[{"2", 
           RowBox[{"U", ".", "\[CapitalSigma]", ".", 
            RowBox[{"Transpose", "@", "V"}]}]}], "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           FormBox[
            RowBox[{
             RowBox[{
              RowBox[{"-", "2"}], 
              RowBox[{
               StyleBox["U",
                FontWeight->"Bold"], "[", 
               RowBox[{"[", "j", "]"}], "]"}]}], "\[InvisibleComma]", 
             StyleBox["\[CapitalSigma]",
              FontWeight->"Bold"], 
             StyleBox["\[InvisibleComma]",
              FontWeight->"Plain"], 
             StyleBox[
              RowBox[{
               SubscriptBox["A", "U"], 
               SubscriptBox["t", "V"]}],
              FontWeight->"Bold"]}],
            TraditionalForm], " ", "*)"}], "\[IndentingNewLine]", "+", 
          RowBox[{"Transpose", "@", 
           RowBox[{"ConstantArray", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"-", "2"}], 
              RowBox[{"U", ".", "\[CapitalSigma]", ".", 
               RowBox[{"Array", "[", 
                RowBox[{
                 RowBox[{
                  TemplateBox[{"G", "#1", "#2"},
                   "IndexedDefault"], "&"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"rank", ",", "1"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", 
                   RowBox[{
                    RowBox[{"2", "rank"}], "+", "1"}]}], "}"}]}], "]"}]}]}], 
             ",", "n"}], "]"}]}], "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           FormBox[
            RowBox[{
             RowBox[{"2", 
              RowBox[{
               StyleBox["V",
                FontWeight->"Bold"], "[", 
               RowBox[{"[", "k", "]"}], "]"}]}], 
             StyleBox["\[InvisibleComma]",
              FontWeight->"Bold"], 
             StyleBox[
              RowBox[{
               SubscriptBox["A", "V"], 
               SubscriptBox["t", "V"]}],
              FontWeight->"Bold"]}],
            TraditionalForm], " ", "*)"}], "\[IndentingNewLine]", "+", 
          RowBox[{"ConstantArray", "[", 
           RowBox[{
            RowBox[{"2", 
             RowBox[{"V", ".", 
              RowBox[{"Array", "[", 
               RowBox[{
                RowBox[{
                 TemplateBox[{"G", "#1", "#2"},
                  "IndexedDefault"], "&"}], ",", 
                RowBox[{"{", 
                 RowBox[{"rank", ",", "1"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"rank", "+", "1"}], ",", 
                  RowBox[{
                   RowBox[{"2", "rank"}], "+", "1"}]}], "}"}]}], "]"}]}]}], 
            ",", "m"}], "]"}], "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"Compared", " ", "to", " ", "the", " ", "squared"}], "-", 
            RowBox[{"distance", " ", "matrix"}]}], " ", "*)"}], 
          "\[IndentingNewLine]", "-", 
          SuperscriptBox["distMatrix", "2"]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"constraints", "=", 
         RowBox[{"Join", "[", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"Constraints", " ", "from", " ", 
             RowBox[{"Schur", "'"}], "s", " ", "complement", " ", 
             "condition"}], ",", " ", 
            RowBox[{
            "only", " ", "applied", " ", "to", " ", "observed", " ", 
             "entries"}]}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Join", "@@", 
            RowBox[{"Delete", "[", 
             RowBox[{
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{
                 TagBox[
                  RowBox[{"(", "\[NoBreak]", GridBox[{
                    {
                    TemplateBox[{"t", "j", "k"},
                    "IndexedDefault"], 
                    TemplateBox[{"expr", "j", "k"},
                    "IndexedDefault"]},
                    {
                    TemplateBox[{"expr", "j", "k"},
                    "IndexedDefault"], "1"}
                    },
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
                    GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}}], "\[NoBreak]", ")"}],
                  Function[BoxForm`e$, 
                   MatrixForm[BoxForm`e$]]], 
                 UnderscriptBox["\[VectorGreaterEqual]", 
                  TemplateBox[{"2"},
                   "SemidefiniteConeList"]], "0"}], ",", 
                RowBox[{"{", 
                 RowBox[{"j", ",", "m"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"k", ",", "n"}], "}"}]}], "]"}], ",", "posMissing"}],
              "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{
              TemplateBox[{"t", 
                RowBox[{"#", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], 
                RowBox[{"#", "[", 
                  RowBox[{"[", "2", "]"}], "]"}]},
               "IndexedDefault"], "==", "0"}], "&"}], "/@", "posMissing"}], 
           ",", "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"OLD", " ", 
             RowBox[{"version", ":", " ", 
              RowBox[{
              "Including", " ", "the", " ", "constraints", " ", "for", " ", 
               "the", " ", "missing", " ", "distance", " ", "matrix", " ", 
               "elements"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"Join", "@@", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{
                 TagBox[
                  RowBox[{"(", "\[NoBreak]", GridBox[{
                    {
                    TemplateBox[{"t", "j", "k"},
                    "IndexedDefault"], 
                    TemplateBox[{"expr", "j", "k"},
                    "IndexedDefault"]},
                    {
                    TemplateBox[{"expr", "j", "k"},
                    "IndexedDefault"], "1"}
                    },
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
                    GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}}], "\[NoBreak]", ")"}],
                  Function[BoxForm`e$, 
                   MatrixForm[BoxForm`e$]]], 
                 UnderscriptBox["\[VectorGreaterEqual]", 
                  TemplateBox[{"2"},
                   "SemidefiniteConeList"]], "0"}], ",", 
                RowBox[{"{", 
                 RowBox[{"j", ",", "m"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"k", ",", "n"}], "}"}]}], "]"}]}], ","}], "*)"}], 
           "\[IndentingNewLine]", "\[IndentingNewLine]", 
           RowBox[{"{", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"Enforcing", " ", 
               SubscriptBox["A", "V"], 
               SubsuperscriptBox["A", "U", "T"]}], "=", "I"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"Table", "[", 
               RowBox[{
                TemplateBox[{"G", "j", "k"},
                 "IndexedDefault"], ",", 
                RowBox[{"{", 
                 RowBox[{"j", ",", 
                  RowBox[{"rank", "+", "1"}], ",", 
                  RowBox[{"2", "rank"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"k", ",", "1", ",", "rank"}], "}"}]}], "]"}], "==", 
              RowBox[{"N", "@", 
               RowBox[{"DiagonalMatrix", "@", 
                RowBox[{"Join", "[", 
                 RowBox[{
                  RowBox[{"ConstantArray", "[", 
                   RowBox[{"1", ",", "dim"}], "]"}], ",", 
                  RowBox[{"ConstantArray", "[", 
                   RowBox[{"0", ",", 
                    RowBox[{"rank", "-", "dim"}]}], "]"}]}], "]"}]}]}]}], ",",
              "\[IndentingNewLine]", 
             RowBox[{"(*", " ", 
              RowBox[{
              "G", " ", "should", " ", "be", " ", "positive", " ", 
               "semidefinite"}], " ", "*)"}], "\[IndentingNewLine]", 
             RowBox[{"VectorGreaterEqual", "[", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"G", ",", "0"}], "}"}], ",", " ", 
               RowBox[{"{", 
                RowBox[{"\"\<SemidefiniteCone\>\"", ",", 
                 RowBox[{
                  RowBox[{"2", "rank"}], "+", "1"}]}], "}"}]}], "]"}]}], 
            "}"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{
          "Minimize", " ", "the", " ", "nuclear", " ", "norm", " ", "of", " ",
            "G", " ", "along", " ", "with", " ", "the", " ", "differences", 
           " ", "of", " ", "the", " ", "squared"}], "-", "distances"}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"Gmat", "=", 
         RowBox[{"G", "/.", 
          RowBox[{"SemidefiniteOptimization", "[", 
           RowBox[{
            RowBox[{"Total", "[", 
             RowBox[{
              RowBox[{"Array", "[", 
               RowBox[{
                RowBox[{
                 TemplateBox[{"t", "#1", "#2"},
                  "IndexedDefault"], "&"}], ",", 
                RowBox[{"{", 
                 RowBox[{"m", ",", "n"}], "}"}]}], "]"}], ",", "2"}], "]"}], 
            ",", "constraints", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"t", "\[Element]", 
               RowBox[{"Matrices", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"m", ",", "n"}], "}"}], ",", "Reals"}], "]"}]}], 
              ",", 
              RowBox[{"G", "\[Element]", 
               RowBox[{"Matrices", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"2", "rank"}], "+", "1"}], ",", 
                   RowBox[{
                    RowBox[{"2", "rank"}], "+", "1"}]}], "}"}], ",", 
                 "Reals"}], "]"}]}]}], "}"}]}], "]"}]}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Determine", " ", "the", " ", "transforms", " ", 
           SubscriptBox["A", "U"]}], ",", 
          SubscriptBox["A", "V"], ",", 
          RowBox[{
           SubscriptBox["t", "V"], " ", "within", " ", "G"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"rank", "==", "dim"}], ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Cholesky", " ", "decompose", " ", "to", " ", "find", " ", 
            SubscriptBox["A", "U"], " ", "and", " ", "then", " ", 
            SubscriptBox["A", "V"], " ", "and", " ", 
            SubscriptBox["t", "V"]}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Au", "=", 
            RowBox[{"Transpose", "@", 
             RowBox[{"CholeskyDecomposition", "[", 
              RowBox[{"Gmat", "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{";;", "dim"}], ",", 
                 RowBox[{";;", "dim"}]}], "]"}], "]"}], "]"}]}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"Av", "=", 
            RowBox[{
             RowBox[{"Gmat", "[", 
              RowBox[{"[", 
               RowBox[{
                RowBox[{
                 RowBox[{"rank", "+", "1"}], ";;", 
                 RowBox[{"2", "rank"}]}], ",", 
                RowBox[{
                 RowBox[{"rank", "+", "1"}], ";;", 
                 RowBox[{"2", "rank"}]}]}], "]"}], "]"}], ".", "Au"}]}], 
           ";"}], ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
            RowBox[{"Determine", " ", "either", " ", 
             SubscriptBox["A", "U"], " ", "or", " ", 
             SubscriptBox["A", "V"], " ", "first"}], ",", " ", 
            RowBox[{
            "whichever", " ", "has", " ", "the", " ", "largest", " ", "gap", 
             " ", "between", " ", "the", " ", 
             SuperscriptBox["dim", "th"], " ", "and", " ", 
             SuperscriptBox[
              RowBox[{"(", 
               RowBox[{"dim", "+", "1"}], ")"}], "th"], " ", "singular", " ", 
             "values"}]}], " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Divide", "@@", 
              RowBox[{
               RowBox[{"SingularValueList", "[", 
                RowBox[{
                 RowBox[{"Gmat", "[", 
                  RowBox[{"[", 
                   RowBox[{
                    RowBox[{";;", "rank"}], ",", 
                    RowBox[{";;", "rank"}]}], "]"}], "]"}], ",", 
                 RowBox[{"dim", "+", "1"}]}], "]"}], "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"-", "2"}], ";;"}], "]"}], "]"}]}], ">", 
             RowBox[{"Divide", "@@", 
              RowBox[{
               RowBox[{"SingularValueList", "[", 
                RowBox[{
                 RowBox[{"Gmat", "[", 
                  RowBox[{"[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"rank", "+", "1"}], ";;", 
                    RowBox[{"2", "rank"}]}], ",", 
                    RowBox[{
                    RowBox[{"rank", "+", "1"}], ";;", 
                    RowBox[{"2", "rank"}]}]}], "]"}], "]"}], ",", 
                 RowBox[{"dim", "+", "1"}]}], "]"}], "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"-", "2"}], ";;"}], "]"}], "]"}]}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"Compute", " ", 
               SubscriptBox["A", "U"], " ", "first"}], ",", " ", 
              RowBox[{"then", " ", 
               SubscriptBox["A", "V"]}]}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Au", "=", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ".", 
                 RowBox[{"Sqrt", "[", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "&"}], "[", 
               RowBox[{"SingularValueDecomposition", "[", 
                RowBox[{
                 RowBox[{"Gmat", "[", 
                  RowBox[{"[", 
                   RowBox[{
                    RowBox[{";;", "rank"}], ",", 
                    RowBox[{";;", "rank"}]}], "]"}], "]"}], ",", "dim"}], 
                "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"Av", "=", 
              RowBox[{
               RowBox[{"Gmat", "[", 
                RowBox[{"[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"rank", "+", "1"}], ";;", 
                   RowBox[{"2", "rank"}]}], ",", 
                  RowBox[{
                   RowBox[{"rank", "+", "1"}], ";;", 
                   RowBox[{"2", "rank"}]}]}], "]"}], "]"}], ".", "Au"}]}]}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"Compute", " ", 
               SubscriptBox["A", "V"], " ", "first"}], ",", " ", 
              RowBox[{"then", " ", 
               SubscriptBox["A", "U"]}]}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"Av", "=", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", "1", "]"}], "]"}], ".", 
                 RowBox[{"Sqrt", "[", 
                  RowBox[{"#", "[", 
                   RowBox[{"[", "2", "]"}], "]"}], "]"}]}], "&"}], "[", 
               RowBox[{"SingularValueDecomposition", "[", 
                RowBox[{
                 RowBox[{"Gmat", "[", 
                  RowBox[{"[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"rank", "+", "1"}], ";;", 
                    RowBox[{"2", "rank"}]}], ",", 
                    RowBox[{
                    RowBox[{"rank", "+", "1"}], ";;", 
                    RowBox[{"2", "rank"}]}]}], "]"}], "]"}], ",", "dim"}], 
                "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
             RowBox[{"Au", "=", 
              RowBox[{
               RowBox[{"Gmat", "[", 
                RowBox[{"[", 
                 RowBox[{
                  RowBox[{";;", "rank"}], ",", 
                  RowBox[{";;", "rank"}]}], "]"}], "]"}], ".", "Av"}]}]}]}], 
           "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "Determine", " ", "the", " ", "translation", " ", "vector", " ", 
          "tv"}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"tv", "=", 
         RowBox[{
          RowBox[{"Gmat", "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{
              RowBox[{"2", "rank"}], "+", "1"}], ",", 
             RowBox[{
              RowBox[{"rank", "+", "1"}], ";;", 
              RowBox[{"2", "rank"}]}]}], "]"}], "]"}], ".", "Au"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{"Return", " ", "the", " ", "coordinates"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"coords", "=", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"U", ".", "\[CapitalSigma]", ".", "Au"}], ",", 
           RowBox[{
            RowBox[{"V", ".", "Av"}], "+", 
            RowBox[{"ConstantArray", "[", 
             RowBox[{"tv", ",", "n"}], "]"}]}]}], "}"}]}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Final", " ", 
           RowBox[{"(", "optional", ")"}], " ", "post"}], "-", 
          RowBox[{"processing", " ", "step"}]}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"OptionValue", "[", "\"\<AddFinalMDS\>\"", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{
           "MDS", " ", "on", " ", "all", " ", "data", " ", "using", " ", 
            "SDP", " ", "as", " ", "initial", " ", "conditions"}], " ", 
           "*)"}], "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"OptionValue", "[", "\"\<Verbose\>\"", "]"}], ",", 
             RowBox[{
             "PrintTemporary", "[", "\"\<Starting Final MDS\>\"", "]"}]}], 
            "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"metricMDS", "[", 
            RowBox[{"distMatrixRaw", ",", 
             RowBox[{"\"\<SearchMethod\>\"", "\[Rule]", 
              RowBox[{"OptionValue", "[", "\"\<SearchMethod\>\"", "]"}]}], 
             ",", 
             RowBox[{"\"\<SearchPoints\>\"", "\[Rule]", 
              RowBox[{"OptionValue", "[", "\"\<SearchPoints\>\"", "]"}]}], 
             ",", 
             RowBox[{"\"\<InitialPoints\>\"", "\[Rule]", "coords"}], ",", 
             RowBox[{"\"\<Comparing\>\"", "->", 
              RowBox[{"OptionValue", "[", "\"\<Comparing\>\"", "]"}]}], ",", 
             RowBox[{"\"\<PenalizeError\>\"", "\[Rule]", 
              RowBox[{"OptionValue", "[", "\"\<PenalizeError\>\"", "]"}]}], 
             ",", 
             RowBox[{"\"\<Dimensions\>\"", "\[Rule]", 
              RowBox[{"OptionValue", "[", "\"\<Dimensions\>\"", "]"}]}]}], 
            "]"}]}], ",", "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"Otherwise", ",", " ", 
            RowBox[{
            "return", " ", "the", " ", "SDP", " ", "results", " ", 
             "directly"}]}], " ", "*)"}], "\[IndentingNewLine]", "coords"}], 
         "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.84887990472945*^9, 3.8488799515452943`*^9}, {
   3.8488800485494237`*^9, 3.8488800928551474`*^9}, 3.848882800617635*^9, {
   3.848882969564731*^9, 3.848883010739482*^9}, {3.848883338931734*^9, 
   3.8488833442978754`*^9}, {3.848883522340527*^9, 3.8488835383046083`*^9}, {
   3.8488837075306816`*^9, 3.8488837908888073`*^9}, {3.848883986024843*^9, 
   3.8488839988688755`*^9}, {3.8488840554921904`*^9, 3.8488841001791267`*^9}, 
   3.8488846838180947`*^9, {3.8488849139947014`*^9, 3.848884920552112*^9}, 
   3.8488849532907605`*^9, {3.848884987140304*^9, 3.84888498731281*^9}, 
   3.8488850950489445`*^9, {3.848885162356577*^9, 3.8488851666504173`*^9}, {
   3.848885263027709*^9, 3.848885307819246*^9}, {3.8488854364548807`*^9, 
   3.8488854676828585`*^9}, {3.848885876190544*^9, 3.8488859866893587`*^9}, {
   3.8488869587757483`*^9, 3.84888698978123*^9}, {3.848890664939184*^9, 
   3.8488906736670427`*^9}, {3.848890814161755*^9, 3.848890814664942*^9}, {
   3.848890847005784*^9, 3.8488908471324253`*^9}, {3.848964916732045*^9, 
   3.848964920615424*^9}, {3.8489705857608013`*^9, 3.8489706128697195`*^9}, {
   3.8489707034194837`*^9, 3.848970775883318*^9}, {3.8489708548450594`*^9, 
   3.848970871765874*^9}, {3.848970905850906*^9, 3.848970911098428*^9}, {
   3.8489709449458337`*^9, 3.848970972916787*^9}, {3.848971026655254*^9, 
   3.8489710304998035`*^9}, 3.848971511973753*^9, {3.849878970555582*^9, 
   3.84987899479877*^9}, {3.8498934844445715`*^9, 3.849893622755469*^9}, 
   3.8498939851989193`*^9, {3.849894037183728*^9, 3.849894348523677*^9}, {
   3.8498944084527755`*^9, 3.8498944233673944`*^9}, {3.8498945605073433`*^9, 
   3.849894626300046*^9}, {3.8498954488892374`*^9, 3.84989545567553*^9}, {
   3.849896070469285*^9, 3.84989609127534*^9}, {3.849896197913534*^9, 
   3.849896338133442*^9}, 3.849896436796995*^9, {3.8498964782566814`*^9, 
   3.8498965198334618`*^9}, {3.8498965534220123`*^9, 3.849896621004669*^9}, {
   3.849897109705308*^9, 3.849897110531266*^9}, 3.8498971763029537`*^9, {
   3.84989728784603*^9, 3.8498976309994774`*^9}, {3.8498977336886835`*^9, 
   3.8498978869899197`*^9}, {3.8498979177841187`*^9, 3.849897950925829*^9}, {
   3.8498979944972043`*^9, 3.849898062222558*^9}, {3.849958113790371*^9, 
   3.849958133004655*^9}, {3.849958184111765*^9, 3.8499581843457212`*^9}, 
   3.8499585827214785`*^9, 3.8499586382098694`*^9, 3.849959717460662*^9, {
   3.8499598939496107`*^9, 3.849959941747943*^9}, {3.849959996152935*^9, 
   3.8499600146774*^9}, {3.8499600588156796`*^9, 3.8499600687413697`*^9}, 
   3.8499601263956375`*^9, {3.8499604479985247`*^9, 3.849960489396675*^9}, {
   3.849960737839222*^9, 3.849960742298889*^9}, {3.8499609812686434`*^9, 
   3.849960983941315*^9}, {3.849961024135821*^9, 3.8499610779264545`*^9}, {
   3.849961277318576*^9, 3.849961366557908*^9}, {3.8499619966285887`*^9, 
   3.849961998362403*^9}, {3.849962384844226*^9, 3.8499624409854136`*^9}, {
   3.849962476259807*^9, 3.8499624923129997`*^9}, {3.8499681081965337`*^9, 
   3.849968114224786*^9}, {3.84996851680509*^9, 3.849968598503783*^9}, {
   3.849968755353725*^9, 3.8499687587665453`*^9}, {3.849969113975572*^9, 
   3.84996913121063*^9}, 3.8499692767183046`*^9, {3.849969314469103*^9, 
   3.8499693209539485`*^9}, {3.8499694121618876`*^9, 
   3.8499694128535957`*^9}, {3.8499695916232023`*^9, 3.849969595184554*^9}, {
   3.8499696324695225`*^9, 3.8499696330481453`*^9}, {3.8499697067273507`*^9, 
   3.8499697450490575`*^9}, {3.849969779424674*^9, 3.8499698255181713`*^9}, {
   3.849969900728162*^9, 3.8499699198149505`*^9}, {3.8499700501859655`*^9, 
   3.849970065266149*^9}, 3.8499701130917664`*^9, {3.849972431336955*^9, 
   3.8499724762810755`*^9}, {3.849972684447096*^9, 3.849972723195215*^9}, {
   3.8499728039010844`*^9, 3.849972831884636*^9}, {3.849972881149475*^9, 
   3.8499729616479764`*^9}, {3.8499730134836073`*^9, 
   3.8499730978525186`*^9}, {3.8502617501969757`*^9, 
   3.8502617647870445`*^9}, {3.8502640268583617`*^9, 
   3.8502640679536858`*^9}, {3.850651138897193*^9, 3.850651162280053*^9}, 
   3.850651274182509*^9, {3.8506513066132984`*^9, 3.850651428123035*^9}, 
   3.8506516823234243`*^9, 3.850651762336404*^9, 3.8506792398958206`*^9, {
   3.8506792768474703`*^9, 3.8506792791381235`*^9}, {3.850679311855801*^9, 
   3.8506793369176917`*^9}, 3.8506795417307034`*^9, 3.8506796035858016`*^9, {
   3.850680117067603*^9, 3.850680120333884*^9}, {3.8515494706075783`*^9, 
   3.851549478146454*^9}, {3.851787483326002*^9, 3.851787496059662*^9}, {
   3.857395115092646*^9, 3.857395142208373*^9}, {3.8573956080228205`*^9, 
   3.8573956116922994`*^9}, {3.858603860261964*^9, 3.858603867283929*^9}, {
   3.8586039344357495`*^9, 3.8586039483960776`*^9}, {3.8586040996020527`*^9, 
   3.8586041003034897`*^9}, {3.8586042881048574`*^9, 3.858604288243678*^9}, 
   3.8593934064499793`*^9, {3.8593940403622885`*^9, 3.859394067819405*^9}, {
   3.859394175632474*^9, 3.859394211368243*^9}, {3.859394261172925*^9, 
   3.859394288626221*^9}, {3.85939456540592*^9, 3.859394566441*^9}, {
   3.859394723929834*^9, 3.8593947300737944`*^9}, {3.859394808384654*^9, 
   3.859394838711485*^9}, {3.8593949055361514`*^9, 3.8593950009897203`*^9}, {
   3.859422772217714*^9, 3.8594227838794117`*^9}, {3.859422842048688*^9, 
   3.8594228821299706`*^9}, {3.859847701739207*^9, 3.8598477069903216`*^9}},
 CellLabel->
  "In[131]:=",ExpressionUUID->"c4ff1f2e-08f7-4652-9446-ce27829e0f1a"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Example", ":", " ", "m"}], "=", 
    RowBox[{
     RowBox[{"10", " ", "viruses", " ", "and", " ", "n"}], "=", 
     RowBox[{
      RowBox[{
       RowBox[{"15", " ", "antibodies", " ", "with", " ", "entry"}], "-", 
       RowBox[{"wise", " ", "error", " ", "\[Sigma]"}]}], "=", 
      RowBox[{
      "1", " ", "in", " ", "the", " ", "distance", " ", "matrix"}]}]}]}], " ",
    "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"coords", ",", "distMatrix"}], "}"}], "=", 
     RowBox[{"exampleData", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"10", ",", "15"}], "}"}], ",", "1."}], "]"}]}], ";"}], "\n", 
   RowBox[{
    RowBox[{"coordsMDS", "=", 
     RowBox[{"classicalMDS", "[", "distMatrix", "]"}]}], ";"}], "\n", 
   RowBox[{"analyzeMDS", "[", 
    RowBox[{"coords", ",", "coordsMDS"}], "]"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.8489656480199227`*^9, 3.848965660278557*^9}, 
   3.848965718068469*^9, {3.8489662151325035`*^9, 3.848966244183281*^9}, {
   3.8489662828426886`*^9, 3.848966289898882*^9}, {3.848966385323944*^9, 
   3.84896638591742*^9}, {3.8489664208210487`*^9, 3.848966421123945*^9}, {
   3.8489664935911584`*^9, 3.8489665332272167`*^9}, {3.8489665644235835`*^9, 
   3.848966592322567*^9}, {3.8489672547383146`*^9, 3.8489672573369265`*^9}, 
   3.848971143265561*^9, {3.848972151488062*^9, 3.8489721524398165`*^9}, {
   3.848972252516498*^9, 3.8489722562377367`*^9}, {3.8489723089834557`*^9, 
   3.84897234502573*^9}, 3.848972480859942*^9, 3.8489725175890355`*^9, 
   3.849790454417926*^9, 3.849972306634868*^9, 3.8502640745827436`*^9, 
   3.850679899657872*^9, {3.8517843748932915`*^9, 3.8517843856361*^9}},
 CellLabel->"In[37]:=",ExpressionUUID->"41184bcc-bbd3-4526-ad2a-474ae257cd64"],

Cell[TextData[Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
4VjXc9k6Ps2lM/fXroBYl49rmutS/G751GoQ68hdZ0PmDj3xxUjz+ZVnhv7x
1x/kXr0il4UCvP23l9q6us2ucetgWZomfl93EtvD+9EZG+vhYs20WE/thHdJ
e1Az2h/HHuBeAiYLDdy0rdmzWG+2WtkW7u4oQV841mUL2O1/XUm3ptHpsWtt
27CbWNdDR/e0PrGOKujsAre/++HZo9u+8Iv9t0vILh6649T4ly+92cmOt2rL
Qq/Jcdr6Tc+1G+sPbp3sYFnZT6/rTt7GX/k91XqW1gaxZynWTOuEH/CGzPnn
1t0CkobayZ/9SmcbBqCd4eFu8NxjPfa+an74unTUQdKBTeyhVNNZzcjIAT18
komRAwn5NXX8Q5aJulB3q3YW6z29dS3WoL64y9zi4uJrR545ND7y6sGxDz+o
xO270bEXDsxI67utq9uefX66s2XZjcgCLcS5Fv3ZgsCfj9vHm7FYUmTYgUFk
WLvf2I8keOqIMp8dQqQOoe8g1iMX/WlquyPhIwkem3p+NWI7WMJ3bokdSmHb
P/JBvZVNpIxfjUgW+xe4+cdmelyXPdb1L4GR8MhXX8Q66uTmzZv3/+l3Mo6H
f3ji4gOP7v4/1/5vZ8uyUVuxj2nTVpsbBNbuc4NA24kdFPMveTO6/9e01Xfn
5+etySkflIn+BW7+IrJsgSyPs7EjDbc5rFkZ25bU09zyllZeqiRrZJ3e+oSy
yDXjzdXDoXCngc4kdnGBVbArzSOHcHabHb3tj95Vxo1R+6DW2Vrx+kEdDKDr
Ymc05AetiW5YLaNP0NM/NpmJ3gpAZxXoo9CvmOvWkS9iHcX72c9/+eDWTI96
GflW48fv/EOXi7MTu/okVt29j7T4SSE7ZN05671T9D5p/j45tZh7X7LYR4ha
siuZjz2YptG6BasdFegi9F524fPjseQj4QEGUm0bsq6Pc5Wl263ztAKRLeCO
crfDG7vNmha2FrQOckvakn5l3AR3nySrJ9b9owL3Hnf2LVs97eO2LrEj6wY+
P27BvbGehbKtjlbPgn5g9TpEuwGRLkWmuI/B9SvPXebQC8Q6SiHJvuHhJ+97
YjbxfPrTp6Sd/tP/+bOVlZVclqh7XbtHaHhfKoW1pN6JvYNi/sgu/+P+/dLd
1JMaymxtEbGJloUeIQQKRG6ErhsnUvnY+9Dq9nQvVHfb5gstdtN7KZzlsSba
mW+57NckNtbDW9u2c9Kpeb1df6R6tmhbYuSW8s3VPwD7rM7K7eEPV557wqMX
iHWUZXl5+dnnp9dvek7CXVvu0jyXHzaOHZdG+p9PHft06f+VXUeUQJ/AUvtH
m+lpl9qvJopHrHdpoE1l1xfoA/r0mbJr0UPaKcHz1tELGWN9aWnpjQuXJqaO
bN852Th8Un7mAalKkvro+V9lf5VdX6A/6DC8smvREzq+jkxHj6TG+srKyunX
f3T/5on1W158aOfZhycubhw7vmH0yFe/uevMuYt5nffsX8Q60CNXW8quRf50
1H3ZtUBthWNdUvvp3fvue/xg7H28Jeh37J66efNmYbWtIGIdAFAd4Vh/48Il
yfTAJUjDjzSOnThbWG0riFgHAFRH4Alu165de+DR3anP21q/6blSal4RxDoA
oDoCrfUz5y4GLivu8jEctUGsAwCqIxDrjcMns9y7W5rzRVa4aoh1AEB1BGJ9
+87J1B54fRVZ4aoh1gEA1RGI9RcOzDy082xqpkuZIivcsR5dek+sA0AxZDc+
98rUicbWmcnNb506sLy8XHaNijY/Pz+Q9uSmQKz/5J0rG0aPZHluZg/qnqee
XnpPrANAAT78YOGlHfdemrhl8dAdHx298/LeW+XXxcXFsutVHHsCUcexLsdF
w9/4TuqJ9Qe3Tvag+rnp9aX3xDoA9Jo0zCXEP5kd/PT4XfaSX6fH7i67agXR
ZyXoTcg7jnVx7MRZCb5ArEubd3r2dN7Vz1OvL70n1gGg1y6cnZHmuZvp+pKJ
ZVet527cuGHPce6ytd5sNXXHv7cvNtml8SuBuGvPwSqf3ch+6b2U7GwRxDoA
9NrM5OaPjt7px7o02MuuWs81Gg0JGn020PDwcJex3mwl+5lzFyX4pGGuJ6bl
341jx+/fPLHv8ImK3zk2+6X3r517q7NFEOsA0GtrOdZnZ2cl2fXnXGK9r2W/
9H77zg5HCBDrANBrSZ3wC1O3lV21QhHr2S+937xtd9mVBQDEW1pa2vetL/tN
9Zln7im7aoUi1rNfev/s89NlVxYAkOj9hSuS7Npml0D/xf7bp8fufvfypbLr
VShiPful9ydOv1l2ZQEACMkY6xGFVa8A2S+9z+WOcwAA9A6t9WYtLr0HAKBJ
rLf0+6X3AAAoYl319aX3AAAoYh0AgNog1gEAqA1iHQCANYVYBwCgNoh1AABq
g1gHAKA2iHWgOubn5+fm5spatChl0QByRKxjjbh+/brEVqNldnb26tWrOl1+
kLfKrduNGzekSoODgwMDA8PDwx3MQVah4fGPEPxiOl02wkCLbZbqcGsrWynL
R/T51O46+hvH3UoLCwvyFaTO1v5+5CNaXv4Nj0kGikeso/Zkx6tXhQwNDelu
eXx8fLBFfyh9z6zpoJXsONZHR0fXrVs3sEpWNjbWR0ZGtIAUlo/o9GrGutRW
6yMbx1Yt9cuSArYRZGUt1mVlbcV1utLNrls+aeZSDfuDkY/oNpQZ2vxt0VkO
D4CequtDXnI3EFR27ZBI9rqacf4eW9p0Ghalx7rSqnYW68rSWdYrUEyyyU/w
qnXCS2WknvarG77hD1pJ+dJj3/Ln4B7t2KGOkQ0l21Pm5ka2fESmSHk31qWA
fLxSh0ZYg0jzjOT/72dXtiW9yq4d4ml+yT45qQ0l2SEFKhJn3ce6sDZpoNkY
aWNW0NzcXGQ7yK96kiJ8GKYHNhq4/pYMb2HbdO7hhE33FypbWP60IltS4l7q
SbKbpaWlNy5cmpg6sn3nZOPwSfmZx2X2GrGeEbHeI8vLy+/99O1XD45NT2w6
//Kun/74zbzu0m+dseFBaLLTrkjG5RLrEiu61kkrpQVKH04QoF9cpIayWWSN
NNnlsCTps6MtSa3y1C1sLX03xAP39dI++chE7QWiN35lZeX06z+6f/PE+i0v
6sM4No4d3zB65Kvf3HXm3EV5t+wK1haxnhGx3gsffrBwdPfXfvjd3148dMcn
s4MLU7ddmrjlL7b9l/cXrnQ/c90bSxCEi0nDyt8z60R3cFTgs4FiOkStuToo
zh/xZaOwdFZ+6MgcdACYlMw4QEtbl0nJIknk9zPbgiITZXF6UKQrogP17ay0
JW/sRGWbSGuepf7ylfk11FiXGmrsxh6W2BFLx7Fuh4LukYMNzPC3p5SPPXyK
XYU1RVL76d377nv8oKS5//RMCfodu6d4zFaPEOsZEeu5k0z/yye/9NHROz89
fpf7knz/wZO/K+92M3NrtGbZu7pZI7tu7e/VkXV68t3fdacW025k6w/XbmFh
0WmjsHQ0l8zBHwkvM9FVsJFdWdrygW4K7TeOdBFLMTuzbMXckfl6ctk6qK2z
2rabu7LuxtT10iatzi21Y0RX2T8torGu9U/6WrWp3kw+h56lP8TW1KbYsYS8
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
e+YjLwn6Hbunbt68mXFu7e6LLu+9VQP9F/tvnx67+93Ll3q6sl0i1vNFrAeU
EuuSIxrofhBIA7lS7TKtar6xPjc3J/OUPA0X046CLreDHB7IYVKXNckor/nE
0uMrd2tIpksrPnDEgl5748IlyXQ/0O01/Ejj2ImzGedW7x01sZ6vev+1dKn4
WJeUkYVKdic1tbShKv92t2b56EWsa0L9022ygqfs/SBrl8w/XPOMNcm4rO5P
ygTEbg1pxcuxBMkeoJ1OIvezWteuXXvg0d2x7fTPtdk3PZdxhtn3Rbv2n/ve
0bfzXZ1eq1+sl9tdlles6/+Omu1DCo512YBZckRaYXn1DHcp91jXLTA0NJTa
TO4y1nVBgZ159pqkkv8U2sfSzUzCkraGdu/QG+/T3gx3JIxswxx3X2fOXbzv
idlwpstr49jxjDPMuC96cu+rUvL+P/l2XitSjJrFuu4YS+xT7T7WZRV0r6Vk
H1iRtmT3Co513TmnhojsfPxY14lCDgkCu/HUYpJ0OnMdFCciBWwUn87Kj3WZ
g3xK3pKS2hoKr45rZGREdrbatg3/v3CDzFYqe5tLNrIsKJeaKB2LroMb3WrI
B+1/h235hsNKxk5Utkl1s/tLDxzkpK5p7YXHtcpfqWw36yXLK9kbh09KZKfG
ujTns69Flnb6v/6N3yTWy5V9p9E7Xca6HvFKo0bWRdbCTv6WctFT7oqMdRv4
lGUnHDmLKnt1Hdwleyfd/n40pBbTTmmtgxTWhqqwZJc9ng7bk0/p6Gt/JLz+
SWt/QrsD6nQLyFJk6Vq9wGctyHSHbLL0Y2glAwefbdWk2WoUa3rK0nWb2Cl7
3VZ+rNumtpnYZyPtev14eJMGYl23T+mXTpRIVv+zK9vc18Rj9/xT9v3nfy8/
WzH5EmWiHM7lstDtOydTe+D1lX0twnub0V2HNdOJ9RJpS6cKsd4W97PaUSn7
IrfdJztDPe4tfFXyV2Ss614lYzAZzV9hX4H8oOngzidLMfnirA4SIpJ6GhYa
65IL8p26c9Av2k0ZDUH3iE6TKOO6yEJl/vazzjwpjyzgpKT8HUpt/eOQJFoy
r5pob5W18uzwzLaDnVtxPyXbyp9om9Sm6DfijuvTby1y2ByIdR2MkbpNasyP
9S/+9r+ViX//g6+7sd5c3RnmstAXDsw8tPNsaqZLmexrkbSfabz67pd+/ytS
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
X+y/fXrs7ncvX8p9QcQ6AAAFWF5efu3YxPd3PDA9sencyenc2+mKWAcAoDYs
1rmTJwAA/c6NdZ67AQBAXyPWAQCoDWIdAIDaINYBAKgN9wluxDoAAH2N1rqr
3csBuCIAAFApxLqr3Y1ArAMAzNLS0hsXLk1MHdm+c7Jx+KT8/PHHHxdcB2Ld
RawDQCx6MsNWVlZOv/6j+zdPrN/yoj76c+PY8Q2jR776zV1nzl2UdwurCbHu
ItYBIFZbu8e1tm+U1H569777Hj8oab5pz3zkJUG/Y/dUYQ/1rmCsl3gQSKwD
QKxexPrS0tLcK1MnGltnJje/derA8vJyr9eiR964cEky3Q90ew0/0jh24mwx
lalmrH92ZVvg1dNFE+sA4Ms91j/8YOGlHfdemrhl8dAdHx298/LeW+XXxcXF
AtYlX9euXXvg0d2x7fTPtdk3PdejZ7tEEOuRRRPrAODLN9alYS4h/snsYOT5
49NjdxezOjk6c+7ifU/MhjNdXhvHjr927q0C6kOsRxZNrAOAL99Yv3B2Rp88
HnnJxGJWJ0eNwyclslNjXZrz23dOFlAfYj2yaGIdAHztxnr4wq6Zyc0fHb3T
j3VpsBe2RnmRsE7tgdfX5m27C6gPsR5ZNLEOAL52Yz18YVedYv2FAzMP7Tyb
mulS5tnnpwuoj8V6dRDrAFA17cZ6+MKupE74hanbCl+zbv3knSsbRo+kxvp9
T8yeOP1mAfUh1iOLJtZRovn5+bm5ueKXe+PGjdnZ2evXrxe/aPSLDmI9cGHX
0tLSvm992W+qzzxzT/Gr1iVZl+FvfCf1xPqDWyeLueOc+6iXAhaXRSmxrpdP
Eus1JpklodlokQi7evWqTpcfSo8zTdXBwUH5ixoeHs535gsLCzL/wLujo6N6
Rwj5OZclNhyyXlk+IsXcT0VmEiFHPuGVMvaNy0e0vPyb12quNZ3Ful7YFTvD
9xeuSLJrm10C/Rf7b58eu/vdy5cKXq9cyKHL+i0vBmJdmvPTs6eLqUx10twU
H+t2+SSxXkuyG5eslC9raGhId/Lj4+ODLfpD6ft5zRqtZO6xLiuoQRlLjmok
+/KKdTlA0uMlmdW6desyzlYK2M2mRkZGLNbteENmpdOVbijdVkkzl2rYVywf
kY9LeZmhzd8WneXwAM0uYn3j2PGkeS4vL792bOL7Ox6Ynth07uR0MZd198LK
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
AAAAAAAAAACAtez/A1BOzm4=
    "], {{0, 241.2}, {401.4, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->120.],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
    Automatic],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->270,
  ImageSizeRaw->{401.4, 241.2},
  PlotRange->{{0, 401.4}, {0, 241.2}}]], "Output",
 CellChangeTimes->{
  3.8499723226965647`*^9},ExpressionUUID->"cd164334-92ef-4a06-ae1a-\
a198cfe7f6b9"]], "Text",
 CellChangeTimes->{
  3.8499723259458447`*^9},ExpressionUUID->"913342a2-3fce-45ae-9b07-\
e6cc1a76b633"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"Do", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"coordsSigma", "[", "\[Sigma]", "]"}], ",", 
         RowBox[{"distMatrixSigma", "[", "\[Sigma]", "]"}]}], "}"}], "=", 
       RowBox[{"exampleData", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"10", ",", "12"}], "}"}], ",", "\[Sigma]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"coordsMDSRank", "[", 
        RowBox[{"\[Sigma]", ",", "rank", ",", "method"}], "]"}], "=", 
       RowBox[{"classicalMDS", "[", 
        RowBox[{
         RowBox[{"distMatrixSigma", "[", "\[Sigma]", "]"}], ",", 
         RowBox[{"Method", "->", "method"}], ",", 
         RowBox[{"\"\<Rank\>\"", "\[Rule]", "rank"}]}], "]"}]}]}], 
     "\[IndentingNewLine]", ",", 
     RowBox[{"{", 
      RowBox[{"method", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<NumericMinimization\>\"", ",", "\"\<SDP\>\""}], "}"}]}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"rank", ",", 
       RowBox[{"rankList", "=", 
        RowBox[{"{", 
         RowBox[{"2", ",", "4", ",", "6"}], "}"}]}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\[Sigma]", ",", 
       RowBox[{"\[Sigma]List", "=", 
        RowBox[{"{", 
         RowBox[{"0.1", ",", "0.5", ",", "1.0", ",", "1.5"}], "}"}]}]}], 
      "}"}]}], "]"}], "\[IndentingNewLine]", 
   RowBox[{"Grid", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Labeled", "[", 
         RowBox[{
          RowBox[{"showGrid", "[", 
           RowBox[{
            RowBox[{"Transpose", "@", 
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"Transpose", "@", 
                RowBox[{"Prepend", "[", 
                 RowBox[{
                  RowBox[{"Table", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Round", "[", 
                    RowBox[{
                    RowBox[{"errorMDS", "[", 
                    RowBox[{
                    RowBox[{"coordsMDSRank", "[", 
                    RowBox[{
                    "\[Sigma]", ",", "rank", ",", 
                    "\"\<NumericMinimization\>\""}], "]"}], ",", 
                    RowBox[{"distMatrixSigma", "[", "\[Sigma]", "]"}]}], 
                    "]"}], ",", "0.01"}], "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{"\[Sigma]", ",", "\[Sigma]List"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"rank", ",", "rankList"}], "}"}]}], "]"}], ",", 
                  "rankList"}], "]"}]}], ",", 
               RowBox[{"Prepend", "[", 
                RowBox[{"\[Sigma]List", ",", "\"\<\[Sigma]\\\\rank\>\""}], 
                "]"}]}], "]"}]}], ",", 
            RowBox[{"\"\<Header\>\"", "\[Rule]", "\"\<TopLeft\>\""}]}], "]"}],
           ",", 
          RowBox[{"font", "[", 
           RowBox[{"\"\<Numeric Minimization\>\"", ",", "Bold"}], "]"}], ",", 
          "Top"}], "]"}], ",", 
        RowBox[{"Labeled", "[", 
         RowBox[{
          RowBox[{"showGrid", "[", 
           RowBox[{
            RowBox[{"Transpose", "@", 
             RowBox[{"Prepend", "[", 
              RowBox[{
               RowBox[{"Transpose", "@", 
                RowBox[{"Prepend", "[", 
                 RowBox[{
                  RowBox[{"Table", "[", "\[IndentingNewLine]", 
                   RowBox[{
                    RowBox[{"Round", "[", 
                    RowBox[{
                    RowBox[{"errorMDS", "[", 
                    RowBox[{
                    RowBox[{"coordsMDSRank", "[", 
                    RowBox[{"\[Sigma]", ",", "rank", ",", "\"\<SDP\>\""}], 
                    "]"}], ",", 
                    RowBox[{"distMatrixSigma", "[", "\[Sigma]", "]"}]}], 
                    "]"}], ",", "0.01"}], "]"}], "\[IndentingNewLine]", ",", 
                    RowBox[{"{", 
                    RowBox[{"\[Sigma]", ",", "\[Sigma]List"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"rank", ",", "rankList"}], "}"}]}], "]"}], ",", 
                  "rankList"}], "]"}]}], ",", 
               RowBox[{"Prepend", "[", 
                RowBox[{"\[Sigma]List", ",", "\"\<\[Sigma]\\\\rank\>\""}], 
                "]"}]}], "]"}]}], ",", 
            RowBox[{"\"\<Header\>\"", "\[Rule]", "\"\<TopLeft\>\""}]}], "]"}],
           ",", 
          RowBox[{"font", "[", 
           RowBox[{"\"\<SDP\>\"", ",", "Bold"}], "]"}], ",", "Top"}], "]"}]}],
        "}"}], "}"}], ",", 
     RowBox[{"Spacings", "\[Rule]", "3"}]}], "]"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.84997325453281*^9, 3.84997326575804*^9}, {
  3.849973297201851*^9, 3.849973306172242*^9}, {3.850261318093446*^9, 
  3.850261320885316*^9}, {3.8502614866230745`*^9, 3.8502615069314127`*^9}, {
  3.850261670448125*^9, 3.850261677650234*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"8576e396-2198-440e-b38c-a5192b1099d9"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
BqnS19fXDxw4QBV06NAhOtZvBnT2o0ePcraUjD7pb4qJ1GYvT1szuJenqgbT
tzNB0onAU0l6PG3cS/TytLVO18tTVYM5f/qKPikZpae/peHrPI2nrRlchafU
L6gQtr73Hf4vjTyv+7G0zkIjTOpZh97zLjs88Zd/ntfCOE+p1q7bv7Vlqibi
h51KpBqh6jMx3COcqvQj+RQUL+Uc52mDBsd5qmowZcu5OVemfNLHH388mDN4
KkmJp+17iThPG+x0cZ5qG8xsMpHkY3lYK/W4ro+nDRpcnqfUQcgkat5+36Eh
Ze/hp79431LD1GEhwlP2xnZdmJqNDF1YdJTdAOaLyYTrI+f1dSfGbxV8rJRz
hKdtGhzhqbbB1E0iY1EpZ/BUkgZPV8JLRHjaZqeL8FTbYM6fuph/Uup0wWvq
LsrTNg0uz1PqI2TSQw9+xY6koWPKhAwPO4fdTFkqRHjKdXH27Fk7kkYsTnX4
MnXhxPOYx7QBTkaRwfNKmUd42qbBEZ4WMDh4OGUeGdyCp5I0eLoSXiLC0zY7
XYSn2gbTBWDwyo4y98/L6qI8bdPgwjzduXSB72WYaRwnPt4FqI/Yd0NSRqrD
gsRTHsY4Yxs7PnJPnMdOzoDKxJtZGjo1Z2WPsiiSb45ImUs8bdZgiacFDA6K
J4ukmZw5eCorO09XxUtIPG2200k8LWAwGebnHzl8HuVpswYX5imPMEn+QjuO
jzf+ox94H3WQmSUax+Zds/dWlKc8/iH51/t+83bE4x9nAoF0+vTpmTchybmZ
URDVMh0+YD1SswZLPC1jsK/4ZO8cPJWVnaer4iUknjbb6SSeFjCY8/HHq5zM
v9CeR3narMGFeWqGjv5XHE8JejOhrkEdynQZ5yZLliDxlAtzFppR+Wf7T5+W
6lFKEMyTR0GzxXiJ6s6vfUcST5s1WOJpMYMdUT+K2wyeSsrO01XxEhJPm+10
Ek8LGMyXexLFgkPZTuZpswavIk9N4PUJs7QlCkuF6jydW52FXP3g50+bNbgp
nvJkb9xm8FRSmzwt4CWq83S+ZKeryFO201/Jw7cpl53vbdbglebpW4u5HTrq
wNt+L29Pqc5TfriMnynjao0vWqvO02UNboqnNAqNzwbPwVNZjfNUz0tU5+my
na4iT3nIOlusSTaE2traYsuD6wC7qjwdZvCq8/TnV3ekDMeEujzlB504JVWr
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
    "], {{0, 144.}, {374.4, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->120.],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
    Automatic],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->270,
  ImageSizeRaw->{374.4, 144.},
  PlotRange->{{0, 374.4}, {0, 144.}}]], "Text",
 CellChangeTimes->{{3.8502643507956276`*^9, 3.8502643640895863`*^9}},
 CellLabel->
  "Out[1044]=",ExpressionUUID->"20015d20-a849-4ccd-8e10-35e7be884bfe"]
}, Closed]],

Cell[CellGroupData[{

Cell["Semidefinite Programming (SDP)", "Subsubsection",
 CellChangeTimes->{{3.849649293635371*^9, 3.8496492986981735`*^9}, {
   3.8497198207754087`*^9, 3.8497198236394024`*^9}, 3.8499820519969935`*^9, {
   3.8561998001592336`*^9, 3.8561998016525555`*^9}, {3.8603778973531895`*^9, 
   3.8603778974781723`*^9}},ExpressionUUID->"8b8b0b4f-7054-46db-9897-\
34517cf8c0cf"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "If", " ", "the", " ", "distance", " ", "matrix", " ", "is", " ", 
     "symmetric"}], ",", " ", 
    RowBox[{"use", " ", "original", " ", "formulation", " ", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"city", "-", 
        RowBox[{"city", " ", "distance"}]}], ")"}], ".", " ", "Otherwise"}]}],
     ",", " ", 
    RowBox[{
    "assume", " ", "the", " ", "bipartite", " ", "graph", " ", "problem", " ", 
     RowBox[{"(", 
      RowBox[{"antibody", "-", 
       RowBox[{"virus", " ", "data"}]}], ")"}]}]}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ClearAll", "[", 
    RowBox[{"sdp", ",", "sdpCityCity", ",", "sdpAbVirus"}], "]"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"Options", "[", "sdp", "]"}], "=", 
     RowBox[{
      RowBox[{"Options", "[", "sdpCityCity", "]"}], "=", 
      RowBox[{
       RowBox[{"Options", "[", "sdpAbVirus", "]"}], "=", 
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<Dimensions\>\"", "\[Rule]", "2"}], ",", 
           RowBox[{"\"\<Rank\>\"", "\[Rule]", "2"}], ",", 
           RowBox[{"\"\<Verbose\>\"", "\[Rule]", "False"}], ",", 
           RowBox[{"Method", "->", "\"\<NuclearNorm\>\""}], ",", 
           RowBox[{"\"\<TracePrefactor\>\"", "->", "0"}], ",", 
           RowBox[{"\"\<ReturnGramMatrix\>\"", "->", "False"}], ",", 
           RowBox[{"\"\<ReturnErrorMatrix\>\"", "->", "False"}], ",", 
           RowBox[{"\"\<AddFinalMDS\>\"", "\[Rule]", "False"}], ",", 
           RowBox[{"\"\<SearchMethod\>\"", "\[Rule]", "Automatic"}]}], "}"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Add", " ", "default", " ", "option", " ", "values", " ", "from", 
           " ", "errorMDS"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"FilterRules", "[", 
          RowBox[{
           RowBox[{"Options", "[", "errorMDS", "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"\"\<Comparing\>\"", ",", "\"\<PenalizeError\>\""}], 
            "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "Add", " ", "default", " ", "option", " ", "values", " ", "from", 
           " ", "metricMDS"}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"FilterRules", "[", 
          RowBox[{
           RowBox[{"Options", "[", "metricMDS", "]"}], ",", 
           RowBox[{"{", "\"\<SearchPoints\>\"", "}"}]}], "]"}]}], "]"}]}]}]}],
     ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"sdp", "[", 
     RowBox[{"distMatrix_", ",", 
      RowBox[{"opts", ":", 
       RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
    "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"SymmetricMatrixQ", "[", "distMatrix", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"sdpCityCity", "[", 
       RowBox[{"distMatrix", ",", "opts"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"sdpAbVirus", "[", 
       RowBox[{"distMatrix", ",", "opts"}], "]"}]}], "\[IndentingNewLine]", 
     "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.6341415938397913`*^9, 3.634141608886338*^9}, {
   3.641151901348711*^9, 3.6411519085043297`*^9}, 3.6411573862906446`*^9, {
   3.641157431493928*^9, 3.6411574345421352`*^9}, {3.6413245518239803`*^9, 
   3.641324580868143*^9}, {3.837531250069418*^9, 3.8375313042031975`*^9}, {
   3.8486800910355268`*^9, 3.8486801266801977`*^9}, {3.848965024178857*^9, 
   3.848965074774905*^9}, {3.8489652353323727`*^9, 3.848965370445981*^9}, {
   3.848966870806734*^9, 3.848966871157892*^9}, {3.8489670332627993`*^9, 
   3.8489672438461647`*^9}, {3.8489706053810835`*^9, 3.848970605521387*^9}, {
   3.8489723802529416`*^9, 3.84897239215905*^9}, 3.8489724223126974`*^9, {
   3.848975912041444*^9, 3.848975912260115*^9}, {3.848975957444987*^9, 
   3.848975998046653*^9}, {3.8490111875649724`*^9, 3.84901119139478*^9}, {
   3.8490118185521193`*^9, 3.8490118262871475`*^9}, 3.8490135226980705`*^9, 
   3.849013991440717*^9, {3.8496497568648643`*^9, 3.84964975707366*^9}, {
   3.849975494690465*^9, 3.849975509251006*^9}, {3.849975636699011*^9, 
   3.849975671350068*^9}, {3.8499820238114424`*^9, 3.8499820385386925`*^9}, {
   3.8499870867627153`*^9, 3.8499870895391417`*^9}, {3.8500491509177513`*^9, 
   3.850049151123328*^9}, {3.8502209322072983`*^9, 3.8502209406245203`*^9}, {
   3.85022325821572*^9, 3.8502232605546503`*^9}, {3.8517873964156466`*^9, 
   3.851787396763838*^9}, {3.851802731266348*^9, 3.8518027341775146`*^9}, {
   3.8523241596605277`*^9, 3.852324159845667*^9}, 3.8523241912062454`*^9, {
   3.852378458687625*^9, 3.8523784638741474`*^9}, {3.8531593951371026`*^9, 
   3.8531594037844543`*^9}, 3.853159456353503*^9, {3.8533716576900663`*^9, 
   3.8533716593344593`*^9}, {3.857395002901296*^9, 3.8573950119885244`*^9}, {
   3.857395579453927*^9, 3.8573955922161503`*^9}},
 CellLabel->"In[39]:=",
 CellID->108308183,ExpressionUUID->"499f8f77-5ef1-4e19-8baf-ced8812e9e86"],

Cell[TextData[{
 StyleBox["SDP Algorithm",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 " (",
 StyleBox["City-City Distances",
  FontSlant->"Italic"],
 ")\nInput: \n(1) Distance matrix ",
 Cell[BoxData[
  FormBox["D", TraditionalForm]],
  FontWeight->"Bold",ExpressionUUID->"bab1ade3-10cd-4d71-999d-8443dc1f98f5"],
 " between ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "012a035e-3194-4959-ae76-5df129320555"],
 " cities. ",
 "Can ",
 "contain ",
 Cell[BoxData["Missing"], "Input",
  CellChangeTimes->{{3.849791060655055*^9, 3.849791061162825*^9}},
  ExpressionUUID->"c4e0bda2-9f6e-4aac-82ad-0c2996351049"],
 ", ",
 Cell[BoxData["GreaterThan"], "Input",
  CellChangeTimes->{{3.849791060655055*^9, 3.849791061162825*^9}},
  ExpressionUUID->"e3f84e3e-7f21-4975-94c6-54601af5df98"],
 ", or ",
 Cell[BoxData["LessThan"], "Input",
  CellChangeTimes->{{3.849791060655055*^9, 3.849791061162825*^9}},
  ExpressionUUID->"ecbeb4eb-416c-4e91-8834-30d8f8828d8e"],
 " values\n(2) The dimension ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "f68acbe4-49df-41d0-b034-8afe841f050a"],
 " of the final coordinates (usually ",
 Cell[BoxData[
  FormBox[
   RowBox[{"d", "=", "2"}], TraditionalForm]],ExpressionUUID->
  "8fc3855d-9c72-4cc9-b514-6804ebb2498b"],
 ")"
}], "Text",
 CellChangeTimes->{{3.848967272680441*^9, 3.8489672765157146`*^9}, {
   3.8489676366440783`*^9, 3.848967686587202*^9}, {3.8489681543553314`*^9, 
   3.8489681594450164`*^9}, {3.8489683445288877`*^9, 3.848968349281577*^9}, {
   3.848969107404827*^9, 3.8489691159494877`*^9}, {3.8489692043945913`*^9, 
   3.8489692103791137`*^9}, 3.848969249356746*^9, {3.8497910515688543`*^9, 
   3.8497910766539907`*^9}, {3.8499757588251653`*^9, 
   3.8499757833998585`*^9}},ExpressionUUID->"c867496c-7704-497c-ad3a-\
67c9be08fc00"],

Cell[CellGroupData[{

Cell[TextData[{
 "The ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "98de962e-7324-457d-9298-9766e520ca58"],
 "-dimensional coordinates ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["X",
     FontWeight->"Bold"], "\[Element]", 
    SuperscriptBox["\[DoubleStruckCapitalR]", 
     RowBox[{"n", "\[Cross]", "d"}]]}], TraditionalForm]],ExpressionUUID->
  "0cb43739-8842-421b-b470-12dcc795ab3f"],
 " have a Gram matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     StyleBox["G",
      FontWeight->"Bold"], "=", 
     StyleBox["X",
      FontWeight->"Bold"]}], "\[InvisibleComma]", 
    RowBox[{
     SuperscriptBox[
      StyleBox["X",
       FontWeight->"Bold"], "T"], "\[Element]", 
     SuperscriptBox["\[DoubleStruckCapitalR]", 
      RowBox[{"n", "\[Cross]", "n"}]]}]}], TraditionalForm]],ExpressionUUID->
  "4295be88-57ab-423a-b1df-50e7812c3577"],
 ". The squared-distance between coordinates ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]],ExpressionUUID->
  "5662ef6c-86e8-49d1-8221-61ab77b2b79f"],
 " and ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "e1057f99-b410-4680-9064-8d6f1a209e86"],
 " is given by ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      SubscriptBox[
       StyleBox["D",
        FontWeight->"Bold"], 
       RowBox[{"j", "\[InvisibleComma]", "k"}]], ")"}], "2"], "=", 
    RowBox[{
     SubscriptBox[
      StyleBox["G",
       FontWeight->"Bold"], 
      RowBox[{"j", "\[InvisibleComma]", "j"}]], "-", 
     RowBox[{"2", 
      SubscriptBox[
       StyleBox["G",
        FontWeight->"Bold"], 
       RowBox[{"j", "\[InvisibleComma]", "k"}]]}], "+", 
     SubscriptBox[
      StyleBox["G",
       FontWeight->"Bold"], 
      RowBox[{"k", "\[InvisibleComma]", "k"}]]}]}], TraditionalForm]],
  ExpressionUUID->"60345b81-bc6d-44aa-9515-9232ea443b38"],
 ", and each of these measurements will be an SDP constraint on the matrix ",
 Cell[BoxData[
  FormBox[
   StyleBox["G",
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "2bdb795f-a219-4140-9609-dde8c2921c4d"]
}], "Item",
 CellChangeTimes->{{3.849121275275652*^9, 3.8491212825333056`*^9}, {
  3.8491213332390394`*^9, 3.849121350607689*^9}, {3.849122528474345*^9, 
  3.849122549550758*^9}, {3.849124048030546*^9, 3.849124097232483*^9}, {
  3.8491241404895115`*^9, 3.8491241546357822`*^9}, {3.849219098815353*^9, 
  3.849219098815353*^9}, {3.849222551525283*^9, 3.849222551525283*^9}, {
  3.8496462146025825`*^9, 3.8496462430531435`*^9}, {3.8499822946665077`*^9, 
  3.8499825652413*^9}, {3.8499826228214626`*^9, 3.8499826364927464`*^9}, {
  3.8499832041338577`*^9, 3.849983317633303*^9}, {3.8499843035165873`*^9, 
  3.849984327935607*^9}, {3.849984655371834*^9, 
  3.84998475822526*^9}},ExpressionUUID->"aaf1cbfc-c60e-4fe5-8a27-\
07b98dad0298"],

Cell[TextData[{
 "To account for error, the constraints are implemented as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", "error"}], "<", 
    RowBox[{
     SubscriptBox[
      StyleBox["G",
       FontWeight->"Bold"], 
      RowBox[{"j", "\[InvisibleComma]", "j"}]], "-", 
     RowBox[{"2", 
      SubscriptBox[
       StyleBox["G",
        FontWeight->"Bold"], 
       RowBox[{"j", "\[InvisibleComma]", "k"}]]}], "+", 
     SubscriptBox[
      StyleBox["G",
       FontWeight->"Bold"], 
      RowBox[{"k", "\[InvisibleComma]", "k"}]], "-", 
     SuperscriptBox[
      RowBox[{"(", 
       SubscriptBox[
        StyleBox["D",
         FontWeight->"Bold"], 
        RowBox[{"j", "\[InvisibleComma]", "k"}]], ")"}], "2"]}], "<", 
    "error"}], TraditionalForm]],ExpressionUUID->
  "e945ae7d-8330-4c65-ad6c-d23dc16f2458"],
 ", where error is chosen to be as small as possible during the minimization \
process"
}], "Subitem",
 CellChangeTimes->{{3.849121275275652*^9, 3.8491212825333056`*^9}, {
  3.8491213332390394`*^9, 3.849121350607689*^9}, {3.849122528474345*^9, 
  3.849122549550758*^9}, {3.849124048030546*^9, 3.849124097232483*^9}, {
  3.8491241404895115`*^9, 3.8491241546357822`*^9}, {3.849219098815353*^9, 
  3.849219098815353*^9}, {3.849222551525283*^9, 3.849222551525283*^9}, {
  3.8496462146025825`*^9, 3.8496462430531435`*^9}, {3.8499822946665077`*^9, 
  3.8499825652413*^9}, {3.8499826228214626`*^9, 3.849982691523181*^9}, {
  3.8499833304653125`*^9, 3.8499833304653125`*^9}, {3.8499847769264946`*^9, 
  3.849984780433679*^9}, {3.850268033617416*^9, 
  3.850268033620365*^9}},ExpressionUUID->"6d4ae44e-7084-4449-9def-\
8a1ff7872f40"],

Cell[TextData[{
 "This ",
 StyleBox["global",
  FontSlant->"Italic"],
 " error term means that if one distance measurement is very off, it can \
disrupt the structure of the entire solution [since the error term will be \
much larger, which will not constrain the other measurements as much]. In the \
antibody-virus version of this problem, we implement a separate local error \
for each distance measurement"
}], "Subitem",
 CellChangeTimes->{{3.849121275275652*^9, 3.8491212825333056`*^9}, {
  3.8491213332390394`*^9, 3.849121350607689*^9}, {3.849122528474345*^9, 
  3.849122549550758*^9}, {3.849124048030546*^9, 3.849124097232483*^9}, {
  3.8491241404895115`*^9, 3.8491241546357822`*^9}, {3.849219098815353*^9, 
  3.849219098815353*^9}, {3.849222551525283*^9, 3.849222551525283*^9}, {
  3.8496462146025825`*^9, 3.8496462430531435`*^9}, {3.8499822946665077`*^9, 
  3.8499825652413*^9}, {3.8499826228214626`*^9, 3.849982691523181*^9}, {
  3.8499833304653125`*^9, 3.8499833304653125`*^9}, {3.8499847769264946`*^9, 
  3.849984780433679*^9}, {3.850268034009243*^9, 
  3.8502681116092277`*^9}},ExpressionUUID->"252bae0a-d23e-4fad-81e5-\
297cc18d5e27"],

Cell[CellGroupData[{

Cell[TextData[{
 "Alternate method: Use Schur\[CloseCurlyQuote]s complement lemma to minimize \
",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      SubscriptBox[
       StyleBox["G",
        FontWeight->"Bold"], 
       RowBox[{"j", "\[InvisibleComma]", "j"}]], "-", 
      RowBox[{"2", 
       SubscriptBox[
        StyleBox["G",
         FontWeight->"Bold"], 
        RowBox[{"j", "\[InvisibleComma]", "k"}]]}], "+", 
      SubscriptBox[
       StyleBox["G",
        FontWeight->"Bold"], 
       RowBox[{"k", "\[InvisibleComma]", "k"}]], "-", 
      SuperscriptBox[
       RowBox[{"(", 
        SubscriptBox[
         StyleBox["D",
          FontWeight->"Bold"], 
         RowBox[{"j", "\[InvisibleComma]", "k"}]], ")"}], "2"]}], ")"}], "2"],
    TraditionalForm]],ExpressionUUID->"97ff1c46-5911-4e84-9f47-b82ad1fe2899"],
 " for all measured virus-antibody pairs. This leads to ",
 StyleBox["slightly",
  FontSlant->"Italic"],
 " more accurate results, but it takes far longer to perform the SVD, and it \
cannot handle LessThan/GreaterThan values, so it is not the default method"
}], "Subitem",
 CellChangeTimes->{{3.849121275275652*^9, 3.8491212825333056`*^9}, {
  3.8491213332390394`*^9, 3.849121350607689*^9}, {3.849122528474345*^9, 
  3.849122549550758*^9}, {3.849124048030546*^9, 3.849124097232483*^9}, {
  3.8491241404895115`*^9, 3.8491241546357822`*^9}, {3.849219098815353*^9, 
  3.849219098815353*^9}, {3.849222551525283*^9, 3.849222551525283*^9}, {
  3.8496462146025825`*^9, 3.8496462661863627`*^9}, {3.8499838780874753`*^9, 
  3.8499839536836247`*^9}, {3.8502250623910866`*^9, 3.8502251423126864`*^9}, {
  3.8502680285244913`*^9, 
  3.8502680285317554`*^9}},ExpressionUUID->"1bf0cead-0271-400e-8962-\
478ffbd304ca"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sdpCityCity", "[", 
   RowBox[{"distMatrix_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"n", "=", 
       RowBox[{"Length", "@", "distMatrix"}]}], ",", "G", ",", "Gmat", ",", 
      "t", ",", "tmat", ",", "expr", ",", "constraints", ",", "U", ",", 
      "\[CapitalSigma]", ",", "V", ",", "coords"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Switch", "[", 
      RowBox[{
       RowBox[{"OptionValue", "[", "Method", "]"}], ",", 
       "\[IndentingNewLine]", "\"\<NuclearNorm\>\"", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Gmat", "=", 
        RowBox[{"G", "/.", 
         RowBox[{"SemidefiniteOptimization", "[", 
          RowBox[{"error", ",", "\[IndentingNewLine]", 
           RowBox[{"Flatten", "[", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"(*", " ", 
                RowBox[{
                "G", " ", "should", " ", "be", " ", "positive", " ", 
                 "semidefinite"}], " ", "*)"}], "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"VectorGreaterEqual", "[", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"G", ",", "0"}], "}"}], ",", " ", 
                  RowBox[{"{", 
                   RowBox[{"\"\<SemidefiniteCone\>\"", ",", "n"}], "}"}]}], 
                 "]"}], ",", "\[IndentingNewLine]", 
                RowBox[{"(*", " ", 
                 RowBox[{
                 "Points", " ", "are", " ", "centered", " ", "around", " ", 
                  "the", " ", "origin"}], " ", "*)"}], "\[IndentingNewLine]", 
                RowBox[{"Table", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Sum", "[", 
                    RowBox[{
                    TemplateBox[{"G", "j", "k"},
                    "IndexedDefault"], ",", 
                    RowBox[{"{", 
                    RowBox[{"j", ",", "n"}], "}"}]}], "]"}], "\[Equal]", 
                   "0"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"k", ",", "n"}], "}"}]}], "]"}], ",", 
                RowBox[{"error", ">", "0"}]}], "}"}], ",", 
              "\[IndentingNewLine]", 
              RowBox[{"Table", "[", "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{"Switch", "[", 
                 RowBox[{
                  TemplateBox[{"distMatrix", "j", "k"},
                   "IndexedDefault"], ",", "\[IndentingNewLine]", 
                  RowBox[{"_Real", "|", "_Integer"}], ",", 
                  RowBox[{
                   RowBox[{"-", "error"}], "<", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    TemplateBox[{"G", "j", "j"},
                    "IndexedDefault"], "-", 
                    RowBox[{"2", 
                    TemplateBox[{"G", "j", "k"},
                    "IndexedDefault"]}], "+", 
                    TemplateBox[{"G", "k", "k"},
                    "IndexedDefault"]}], ")"}], "-", 
                    SuperscriptBox[
                    TemplateBox[{"distMatrix", "j", "k"},
                    "IndexedDefault"], "2"]}], "<", "error"}], ",", 
                  "\[IndentingNewLine]", "_GreaterThan", ",", 
                  RowBox[{
                   RowBox[{"-", "error"}], "<", 
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    TemplateBox[{"G", "j", "j"},
                    "IndexedDefault"], "-", 
                    RowBox[{"2", 
                    TemplateBox[{"G", "j", "k"},
                    "IndexedDefault"]}], "+", 
                    TemplateBox[{"G", "k", "k"},
                    "IndexedDefault"]}], ")"}], "-", 
                    SuperscriptBox[
                    RowBox[{"First", "[", 
                    TemplateBox[{"distMatrix", "j", "k"},
                    "IndexedDefault"], "]"}], "2"]}]}], ",", 
                  "\[IndentingNewLine]", "_LessThan", ",", 
                  RowBox[{
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    TemplateBox[{"G", "j", "j"},
                    "IndexedDefault"], "-", 
                    RowBox[{"2", 
                    TemplateBox[{"G", "j", "k"},
                    "IndexedDefault"]}], "+", 
                    TemplateBox[{"G", "k", "k"},
                    "IndexedDefault"]}], ")"}], "-", 
                    SuperscriptBox[
                    RowBox[{"First", "[", 
                    TemplateBox[{"distMatrix", "j", "k"},
                    "IndexedDefault"], "]"}], "2"]}], "<", "error"}], ",", 
                  "\[IndentingNewLine]", "_Missing", ",", 
                  RowBox[{"{", "}"}]}], "\[IndentingNewLine]", "]"}], ",", 
                RowBox[{"{", 
                 RowBox[{"j", ",", "n"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"k", ",", 
                  RowBox[{"j", "+", "1"}], ",", "n"}], "}"}]}], "]"}]}], 
             "\[IndentingNewLine]", "}"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"G", ",", "error"}], "}"}]}], "]"}]}]}], ",", 
       "\[IndentingNewLine]", "\"\<SchurComplement\>\"", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"Replace", " ", 
         RowBox[{"upper", "/", "lower"}], " ", "bounds", " ", "by", " ", 
         "their", " ", "value"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"distMatrix", ",", 
            RowBox[{"_GreaterThan", "|", "_LessThan"}], ",", "All"}], "]"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Echo", "[", 
            RowBox[{
            "\"\<LessThan/GreaterThan values converted into concrete values\>\
\"", ",", "\"\<Warning!\>\""}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"distMatrix", "=", 
            RowBox[{"distMatrix", "/.", 
             RowBox[{
              RowBox[{
               RowBox[{"GreaterThan", "[", "val_", "]"}], "|", 
               RowBox[{"LessThan", "[", "val_", "]"}]}], ":>", 
              "val"}]}]}]}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"tmat", "=", 
         RowBox[{"Array", "[", 
          RowBox[{
           RowBox[{
            TemplateBox[{"t", "#1", "#2"},
             "IndexedDefault"], "&"}], ",", 
           RowBox[{"{", 
            RowBox[{"n", ",", "n"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"expr", "=", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             TemplateBox[{"G", "j", "j"},
              "IndexedDefault"], "-", 
             RowBox[{"2", 
              TemplateBox[{"G", "j", "k"},
               "IndexedDefault"]}], "+", 
             TemplateBox[{"G", "k", "k"},
              "IndexedDefault"]}], ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "n"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"k", ",", "n"}], "}"}]}], "]"}], "-", 
          SuperscriptBox["distMatrix", "2"]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"constraints", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"Constraints", " ", "from", " ", 
             RowBox[{"Schur", "'"}], "s", " ", "complement", " ", 
             "condition"}], " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"Switch", "[", 
               RowBox[{
                TemplateBox[{"distMatrix", "j", "k"},
                 "IndexedDefault"], ",", "\[IndentingNewLine]", 
                RowBox[{"_Real", "|", "_Integer"}], ",", 
                RowBox[{
                 TagBox[
                  RowBox[{"(", "\[NoBreak]", GridBox[{
                    {
                    TemplateBox[{"t", "j", "k"},
                    "IndexedDefault"], 
                    TemplateBox[{"expr", "j", "k"},
                    "IndexedDefault"]},
                    {
                    TemplateBox[{"expr", "j", "k"},
                    "IndexedDefault"], "1"}
                    },
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
                    GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}}], "\[NoBreak]", ")"}],
                  Function[BoxForm`e$, 
                   MatrixForm[BoxForm`e$]]], 
                 UnderscriptBox["\[VectorGreaterEqual]", 
                  TemplateBox[{"2"},
                   "SemidefiniteConeList"]], "0"}], ",", 
                "\[IndentingNewLine]", "_Missing", ",", 
                RowBox[{
                 TemplateBox[{"t", "j", "k"},
                  "IndexedDefault"], "==", "0"}]}], "\[IndentingNewLine]", 
               "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"j", ",", "n"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"k", ",", "n"}], "}"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"(*", " ", 
              RowBox[{
              "G", " ", "should", " ", "be", " ", "positive", " ", 
               "semidefinite"}], " ", "*)"}], "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"VectorGreaterEqual", "[", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"G", ",", "0"}], "}"}], ",", " ", 
                RowBox[{"{", 
                 RowBox[{"\"\<SemidefiniteCone\>\"", ",", "n"}], "}"}]}], 
               "]"}], ",", 
              RowBox[{"(*", " ", 
               RowBox[{
               "Points", " ", "are", " ", "centered", " ", "around", " ", 
                "the", " ", "origin"}], " ", "*)"}], "\[IndentingNewLine]", 
              RowBox[{"Table", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"Sum", "[", 
                  RowBox[{
                   TemplateBox[{"G", "j", "k"},
                    "IndexedDefault"], ",", 
                   RowBox[{"{", 
                    RowBox[{"j", ",", "n"}], "}"}]}], "]"}], "\[Equal]", 
                 "0"}], ",", 
                RowBox[{"{", 
                 RowBox[{"k", ",", "n"}], "}"}]}], "]"}]}], "}"}]}], 
           "\[IndentingNewLine]", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Gmat", "=", 
         RowBox[{"G", "/.", 
          RowBox[{"SemidefiniteOptimization", "[", 
           RowBox[{
            RowBox[{"Total", "[", 
             RowBox[{"tmat", ",", "2"}], "]"}], ",", "constraints", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"t", "\[Element]", 
               RowBox[{"Matrices", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"n", ",", "n"}], "}"}], ",", "Reals", ",", 
                 RowBox[{"Symmetric", "[", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "2"}], "}"}], "]"}]}], "]"}]}], ",", 
              RowBox[{"G", "\[Element]", 
               RowBox[{"Matrices", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"n", ",", "n"}], "}"}], ",", "Reals"}], "]"}]}]}], 
             "}"}]}], "]"}]}]}]}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"OptionValue", "[", "\"\<ReturnGramMatrix\>\"", "]"}], ",", 
       RowBox[{"Return", "[", "Gmat", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"U", ",", "\[CapitalSigma]", ",", "V"}], "}"}], "=", 
      RowBox[{"SingularValueDecomposition", "[", 
       RowBox[{"Gmat", ",", "2"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"coords", "=", 
      RowBox[{"U", ".", 
       SqrtBox["\[CapitalSigma]"]}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"Final", " ", 
        RowBox[{"(", "optional", ")"}], " ", "post"}], "-", 
       RowBox[{"processing", " ", "step"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"OptionValue", "[", "\"\<AddFinalMDS\>\"", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "MDS", " ", "on", " ", "all", " ", "data", " ", "using", " ", "LRE", 
         " ", "as", " ", "initial", " ", "conditions"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"OptionValue", "[", "\"\<Verbose\>\"", "]"}], ",", 
          RowBox[{
          "PrintTemporary", "[", "\"\<Starting Final MDS\>\"", "]"}]}], "]"}],
         ";", "\[IndentingNewLine]", 
        RowBox[{"metricMDS", "[", 
         RowBox[{"distMatrix", ",", 
          RowBox[{"\"\<SearchMethod\>\"", "\[Rule]", "Automatic"}], ",", 
          RowBox[{"\"\<InitialPoints\>\"", "\[Rule]", "coords"}], ",", 
          RowBox[{"\"\<Comparing\>\"", "->", 
           RowBox[{"OptionValue", "[", "\"\<Comparing\>\"", "]"}]}], ",", 
          RowBox[{"\"\<PenalizeError\>\"", "\[Rule]", 
           RowBox[{"OptionValue", "[", "\"\<PenalizeError\>\"", "]"}]}]}], 
         "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"Otherwise", ",", " ", 
         RowBox[{
         "return", " ", "the", " ", "SDP", " ", "results", " ", 
          "directly"}]}], " ", "*)"}], "\[IndentingNewLine]", "coords"}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.849228474721824*^9, 3.849228506912672*^9}, {
   3.8492287705623407`*^9, 3.8492287963295135`*^9}, {3.849228850991743*^9, 
   3.8492290016141095`*^9}, {3.8492293049368453`*^9, 
   3.8492293062021737`*^9}, {3.8492359005529284`*^9, 3.849235901060766*^9}, {
   3.849236007252763*^9, 3.8492360083412557`*^9}, 3.8492361257187953`*^9, {
   3.849236183533552*^9, 3.849236189289014*^9}, {3.84923624682026*^9, 
   3.8492362784226418`*^9}, {3.849237316732112*^9, 3.8492373335676947`*^9}, {
   3.8492375475454483`*^9, 3.849237556978899*^9}, 3.8492376564809527`*^9, {
   3.8492378339936557`*^9, 3.849238115976596*^9}, {3.8492381509271665`*^9, 
   3.8492382046482806`*^9}, {3.849238334084465*^9, 3.8492383587791786`*^9}, {
   3.8496431966642685`*^9, 3.8496432194629316`*^9}, {3.8496433093997946`*^9, 
   3.849643359811252*^9}, {3.8496434453798046`*^9, 3.8496434897612677`*^9}, {
   3.8496435842316093`*^9, 3.8496436456899033`*^9}, {3.8496436900642514`*^9, 
   3.8496437189189425`*^9}, {3.849643791858218*^9, 3.8496437933728795`*^9}, {
   3.8496438312021437`*^9, 3.849643908041865*^9}, {3.8496439514292154`*^9, 
   3.8496440032278337`*^9}, {3.8496440360586543`*^9, 3.849644038179714*^9}, {
   3.8496440713484945`*^9, 3.8496441495002995`*^9}, {3.8496442170279236`*^9, 
   3.849644264907381*^9}, {3.84964430096069*^9, 3.8496443035385423`*^9}, 
   3.8496443674611826`*^9, {3.849644415355728*^9, 3.849644433428603*^9}, {
   3.8496447491839266`*^9, 3.8496447897108345`*^9}, {3.8496448415921745`*^9, 
   3.849644922142063*^9}, 3.8496449554029284`*^9, {3.8496451612179413`*^9, 
   3.8496452010838237`*^9}, 3.84964529391883*^9, {3.8496458658765087`*^9, 
   3.849645895626856*^9}, {3.8496462947822*^9, 3.8496463154797907`*^9}, {
   3.849646936749155*^9, 3.8496469369589233`*^9}, {3.849646973875888*^9, 
   3.849647026056812*^9}, {3.8496473011664677`*^9, 3.849647306006437*^9}, {
   3.849647341761591*^9, 3.8496473643733053`*^9}, {3.849647663008082*^9, 
   3.849647789507995*^9}, {3.849753404287936*^9, 3.8497534355742555`*^9}, {
   3.849975739762029*^9, 3.8499757455099587`*^9}, {3.8499834315666313`*^9, 
   3.84998343167618*^9}, {3.849983491852919*^9, 3.8499835410461426`*^9}, {
   3.849983609885192*^9, 3.8499836103683033`*^9}, {3.8499837424471235`*^9, 
   3.849983746103157*^9}, {3.849984115597034*^9, 3.849984207835744*^9}, {
   3.8499842415225534`*^9, 3.8499842652145147`*^9}, {3.849984566628721*^9, 
   3.849984590568945*^9}, 3.849984652592225*^9, {3.8499848188741007`*^9, 
   3.8499848522772493`*^9}, {3.849984892206953*^9, 3.849984962992816*^9}, 
   3.849985051780268*^9, {3.84998711502164*^9, 3.8499871777255926`*^9}, {
   3.8502209515853043`*^9, 3.8502209953858213`*^9}, 3.8502210378166027`*^9, {
   3.850221268124102*^9, 3.8502212999560947`*^9}, {3.850221348888342*^9, 
   3.8502213623122497`*^9}, {3.8502214394873424`*^9, 3.850221480066753*^9}, {
   3.8502215677316084`*^9, 3.850221608286022*^9}, {3.8502216681549325`*^9, 
   3.850221715898614*^9}, {3.850221770303192*^9, 3.850221885237797*^9}, {
   3.8502219224596505`*^9, 3.8502220550834675`*^9}, {3.850222119181529*^9, 
   3.8502221216215506`*^9}, 3.8502221961125317`*^9, 3.8502223190250053`*^9, {
   3.850222496060388*^9, 3.850222499017488*^9}, {3.8502229977020617`*^9, 
   3.850223015460384*^9}, 3.8502230571367655`*^9, {3.8502230996476727`*^9, 
   3.8502231316033335`*^9}, {3.8502231858665905`*^9, 
   3.8502232495186973`*^9}, {3.8502233419699125`*^9, 3.850223390579051*^9}, {
   3.850223570603041*^9, 3.8502235917984047`*^9}, {3.850247478442772*^9, 
   3.8502475018320265`*^9}, {3.8502476930121512`*^9, 3.850247704201706*^9}, {
   3.850247744320429*^9, 3.850247770930292*^9}, {3.850264621104364*^9, 
   3.8502646598964868`*^9}, 3.850265466754114*^9, 3.850582173730748*^9, {
   3.850582764519727*^9, 3.8505827663723435`*^9}, {3.8505827981734724`*^9, 
   3.8505828028837643`*^9}, {3.8506485343362136`*^9, 
   3.8506486197521005`*^9}, {3.851787403246418*^9, 3.851787410183529*^9}, {
   3.8523242229344845`*^9, 3.8523242496292753`*^9}, {3.853159470544702*^9, 
   3.8531594850427713`*^9}, {3.8561884038490863`*^9, 3.8561884216292253`*^9}, 
   3.8561884592117133`*^9, {3.8561939010968275`*^9, 3.856193940921949*^9}, {
   3.856199811050336*^9, 3.8561998239468594`*^9}},
 CellLabel->"In[42]:=",ExpressionUUID->"5e248845-9ea5-4c3b-bb53-f615075a8759"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{"Example", ":", " ", 
     RowBox[{
      RowBox[{"30", " ", "cities", " ", "with", " ", "element"}], "-", 
      RowBox[{"wise", " ", "error", " ", "\[Sigma]"}]}]}], "=", "0.3"}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"coords", ",", "distMatrix"}], "}"}], "=", 
     RowBox[{"exampleData", "[", 
      RowBox[{"30", ",", "0.3"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"coordsSDP", "=", 
     RowBox[{"sdp", "[", "distMatrix", "]"}]}], ";"}], "\n", 
   RowBox[{"analyzeMDS", "[", 
    RowBox[{"coords", ",", "coordsSDP", ",", 
     RowBox[{"LegendLabel", "->", "\"\<SDP\>\""}]}], "]"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.849983674542453*^9, 3.849983695119182*^9}, 
   3.8499841350414553`*^9, 3.8499841940171413`*^9, {3.849984978124979*^9, 
   3.849985015028835*^9}, 3.849986826453046*^9, {3.849986916302271*^9, 
   3.8499869425990868`*^9}, {3.850222087276943*^9, 3.850222129913333*^9}, 
   3.850245666073987*^9, {3.8505827361123595`*^9, 3.850582749427345*^9}, {
   3.8505828351762004`*^9, 3.8505828376063004`*^9}, {3.850648498850033*^9, 
   3.8506485001560893`*^9}, {3.8506486631419325`*^9, 3.8506486947693996`*^9}, 
   3.8517848608450527`*^9, {3.8517849509784317`*^9, 3.8517849570140467`*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"9f93b218-6c39-4080-a17d-d8320c052df9"]
}, Open  ]]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJzt3X9QVGee73HuvXV3Z/du1b3eW3X37tTGX2Qmk2uyybpO1juZTdZMIomD
AQUBARsFFVEkKCoR2Y4/cHoaUBANkkR0iIom6uokV2Yy0WSnmMxu3Ephqkbr
1gZra6r/c/wn//Ef9ytP8uR4fvWhu+nTp/v9qi6rOX369NMtnE8/z3l+zKt9
ZeXG/5iXl9fyLfln5brWJdu3r9td8t/kh1VNLQ31TRvWv9S0Y0P9hu2La/+T
bOz7D3l5a2T/+/cnAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAssiJEycOevD+
++/7XdJEfPLJJ93d3VJ+eZtffPGF9yf+4Q9/OH36tDxRnm773uXILh9X6t4B
ACCtxsbGPvzww/b29o1TLly48MmDJBS2bt0qGeF3Saft2LFjUnL1jiTd5L68
WS9PlN1kZ0k3/fblUNaDb3QgH+YMvBsAQPpIMqpTugSB9VFVM0p/qZIh1UN5
O8aKnrwFL8kolUrZbefOnXqLvH05lDEZ1T7yVcH0FUJ9jBLEKX87AIB0Umd+
p1gUUttKc5GSIbEl78UYbZNfR3/cfFfVQFPDqapN6w9Hgs82XuVZstu0WmsB
ABkobiwG61Svos3a8qneo0uFUeWpNdqkYigb9XcDp09DdqAFFQCygEssyhZT
jkgoSEycOHFicqoKpjq0qIdkTwkjVdVSXVZM1S75UfWBUV1Z/vCHP5heTg4o
D8lx5CE5lOzp8YKg0datW+W9WK+Hqkqfy3VSqQaqz8FaKtvtRlJgWlABIDu4
xKK6gqbuSyCqa3aqNVK1GSpDQ0MSZ+q+PMXYI0U9V1KjfYpEjBxQ7bBz506d
ehIockz1FGMvoOle1tQ1Put7Ucd3aRBWpbK+ov58XDKaFlQAyBpOsShZJsll
2qiSUbbLHVWnk/sqDlSWyb+SEZIgxtEKslF2M1YPVcukcaOqcKlgUl1k5dHp
doJ1iXgViy4567RD3EbmyakW1GBdgQUAONGnfQkv4/g71RppygJrnGlO1THV
OGltYJSDmFo1VTGse+qKpAsVZ77Eogr0gI7uBACY6NO+adyi/CjJaBuLtuGi
YsVav1PxZ80UXfHUW5zSRxLndDwqlXyJRdWCav2eAAAIIo/XFvWW6caiS9ip
h+LumZL3MnOxqDoRJVxmAEBGcTnt/2GKcUsKY1G/btw9vdMXKK0HUZc+db9Z
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
Js9njlSR86qETnTKwMDAzZs31Xa54/spV878UqT8/Py8vLyCgoL0vOjo6Ki8
bnpeKzHyX9PQ0DBr1qy4C+QFl2kEmdONEWTplAuxODmVjPLr9/yylQfXzf20
a64E4ljPvK5Nj75cXNTZN0i7vV/k/yUWi125el3+F17d39vS3hntOyU/pnba
QDmjqrVHFy1apGKxra0tf4q64/spV+JJFzJVsShZr6Pflrxx+ShS8loz9AHe
mZI3Rb9E5qf5tBhHkLncGEGWTjkSi9rY2NjZozt72spPHmr+7EZ2fv8Min8b
//eD3f2l9R3LNhwubRkqax1e3XZBThH3f6zvCEeOpqQKL2d+FYjWU7dU0DKq
JqKKmpJYlHqxJL7LDufOnZPXkmRM/rUmpxI2JcexZVpOXTJRqpDuiR8gegRZ
3JvfJc0huRaLyARSSXzv6q9WN7z2VSdhu1tR48Dymt2yWzIvJNEgZ1TJPqf6
hcSH7CD/JvMqqZKqWJTIi3sQlTUi+UuZKmGTPIgLUyxOTtUiJYizIxn1CDL3
GyPI0olYRPr98sNfF2886OVL8tLq8Mm330nsVeRE6uXML1WPVLUlJiklsaje
tfvVUrWP1KCTrzBKNqkadzIHcWeNxcmva/pZ0Jr6zQgy1xsjyNKJWESa/dv4
v5dv2uex4Uh2K6jcldilRnU6jXvalxO7NRbVRiGR6nLujbubxJM6uOpUI0w7
6F5A6lDWWJQjyLPkIdlTXYJ0fzvyfiXo3fcpLy+XfVQtz0sbsuoLqroqGQNX
nqgyUejPIWqg97TdaHqD6kOwvrptLHp8p5nvmxFkrn8FjCBLJ2IR6TQxMbGt
/ZCXPgb6VtoyVL9933RfSHfV8HLmNJ5yJQLkPKy6o7S1tanTvvVkHnc31ZKp
yiA7q6qZ0MkoEaC6/cizVH9La09UlVyqPuulQ47a371NWH0y8upSKlVs92Oq
LrKqDKqE+qqlKrk1FvUb1wfRzzXVK9XT3d+gUyyqFnLfexEnT40gc1rFQG6M
IEsz7ytoMF8fkjc2Nla88aD3TPzqtLD+p9N9ITmZ69O192ep/BK66id31Pnc
eBwvu0nu6DLIaV+iSp3eVSzKyVwiyXgE2V/trHNBxZaxBVhlh0v5Vfi6v0cp
jOym76sXdQoXeUUpg67E6S8bulS6pdr4LCm5daN+g3qL+nyMXYPUZ2hq9HaK
RXVd2FoBDxz5rri5vva1moetqxjcby2pjTKCLM281BaZrw+pcvLtd6ZVVQwl
OmhLNUhOtzuNqoCYnqLP/Do7PO6mt+g99UPqVG8KIxVSOvjU000ZUV5e7lL+
uFU/lWv6mO51avWoqUerqV5sG4uqJHE3qv8j4/cN9QmYvsk4xaIK37QN85w5
4+PjPa/8rWkVg5/Uzl+6LiJnXUaQpV/cWGS+PqSQ/C6tbrsw3VhMYNCWjkXv
gy90o6L1IWPjocfdJp0jQ9WbdJXNVGZ9nlepJK9lfAsub0e9nHtMqNqfcYux
pde0s0p/0yuqa6B652RiUV141YeSH1VhPMaiOqDp7QTR5eF+21UMLg11+120
HBU3FpmvDynUsC083UxUt+m+kI5F7wMQnM7wk1N1NJ04Hndz2dOpx6l1u27k
lI1x8z1uLKpAN9X+dMcba2uzSx6ZXjSxWDSWQV2oTSAWbQ8YLP0ddbbTNfe0
ubUMJIALYR65xyLz9SG1du87lEBtUZ4y3RdSF55sz/ZOXPLOGFged3PZ09RY
6vR0/UZ0ZxWpYLoM1osbi+panurfYqQObh3vkIZYlKerNFSvYm1WdS8GseiR
1MS37Yn8bUHNX/8o9EzZ7qVrf/J86AAXwpy4xyLz9SG1OvsGvfxGpeQXTDV1
WtsqnegzvDV6bGPRfbfJeLEYtxHVSOpTKhyNHWBsy+8Si3IEPf2dkdPQfrXd
drYcXYZkYlF9dTFe1szNWDz3VsR2FYOzx8PJH1wi7+TZy8+WNJt6hvyguPmF
0P0JdtSFsE9/+/HPXt/fGw5dHDxAFdI9FpmvD6klf3Elm7umHYtb+hJ4Le+X
F9VJXvc/sXZuVFfZdCdSL7tNxmtEzbN0ubFeWzTuIFU51UjrNOREXbJ0ikXV
WGobqfpqqWmMp4pv2WiqRcqPca+fetmoXtT4HhOIxRmddy497ne5aXzSVFV8
a+ei331+I8kjq54hP14fdeoZsnj5ltVtF5auXBfd8D3dD/b1bQt/8fOcvi7m
HovM14fUkr/TxtaIl9mu9E12lqck9nJ6IheXIfnnpqj7OgisxzG2MXrczSky
dLCaupVaK5umBIxbH3SpHbsPfre9FKvLb3qimgrA/T1av5BYB2hYvxuo7xUe
Y1F9jFnQE1VIDB3b+qhexWCo7amRiylognv38sjyjZ0uf1wFtdH/U9TUuuZx
Uz9YKUxqp+sPFvdYdJmv7/7cztW1tVWFoYqXVlWGGFYDj2Kx2LKqHR4z8X4j
T2jP727/v8ReS4+jt10mQ9V6jEGg603GIFD1rAR2sw7Z0NT5XyWjevTq1au6
yiZPlI3WARrWlzBRCWLdrq4qutSa9UhD01cIVT9V21WLq7oUaH2iWthC1yLV
E+Xfe1PUSH+dvKok6v2qfeT9qgGVeVPNtpKh+m3aDmbUH28WjFtUUr6Kgcee
IUuef5F+sCbuseg0X1/J5q7tVQtHwg/JF5tbx+bLZ3hkxxL5b01bsRFo7139
1dLq+F1S5S+6cP1P5Rtvki+nRiWoc7ucctXpvXyKNSnkhKxOznLy1/PPWM/J
cXczzutiu4STTkZFjqMnNpeddSzql1Bz6XhZF8M0q7aONnVh0ZrRxgl59Kek
HtItt8Zy2vbMyXvwuqeeK9VYCdV1T1VCHZR5X49D0RMgqFeRLfrV9cdi+gCz
YJabGeKxZ8jqFUvS0w82QNxj0Xa+Pqk/SiaaKt3yY2/zYuqM8OjCP74vdUaX
P9vSlqHlNbtlt1R1k1NnXT1HWdzJtNWeaibSBHaz9myxPl1PqapiQv41Bqta
N1m/hG2imajJdozRqcYGGtnGontpdTmdLk2q6V5Nn4B+af2KpilVJ7/+APVz
1aGMLbQuhc+OOVFnjrFnyKqm3vLVFWpmOVNNZ01ZAbFoEnfcopqv74GqYqjR
WulW9e7Lw/3pKTaygHyJamnvLN54UK23qKqHckf+bKWS+Or+3oTbTnOZmr47
C5aWcKfanLP+bSZD9wyRM3Z3/Tczyw00zi0sX/9NNae6dub6wQaUl1lu2vZ2
PpCMFS9Zv13wBQOJuX379vnLH3R0v1G3tb1++75/iBx/9/LIZ2OfM5YqYVLb
cp8jLuhUpTg71lucOapnSMnmru7Nj5nO1feT8es647L63vbQIzPRDza4PM6J
eub8/Z4P8knK52xb6SYWgcwhyeh+FTK4VOccMjEu1TOkZm2NVP2s5+rK0qUq
FosaB4pqdvxk3ZyU94MNLu8LS8m3+sHTF1/d31tRVmTbiJrj9W4go9yc4ncp
Uk91efW7FAGgeoZI/Jn6gahbZfEz6rLFs+VtLFxl4n1hKU0+7c4tT1m/fvTv
fDqXh7oAQEY5Pjj8cmGBVABNp2vZsqZyZWhqJce/LdzMwlUmiS1D/NvR65KM
qs4ogSi1797mxR9fS7YjPQAgVSYmJjY1bOnaYI7Fk83zXl5/oKA2+v3nq177
SS9LIJkkFosAgMwnybitcd3gK3NUT1T592Tz3JUrl7+8dg8rOTohFgEgu126
dGnXppc3rvr+utK/q9/yypsnz/zzv/yr34XKXMQiAABa1sciK28CALzL4lic
mJg4/c57xXVh00JjrLwJAHCSZbH4u89vqMU033lz79pNO4o2HXJaaGxHe4TL
zQAAk2yKxU8+ev/1bQv11H97ax4uXtvqstDY8cGcXmoTAGCVNbE4Pj7e27zY
NJ9DpDZfzyFvU2cM7fG71ACAzJI1sXh5uN92Mc3VNRudYlES0+9SAwAyS9bE
Yn9Hne2qYaHSJS6r3PpdagBAZsnlWJSb36UGAGSWrInFc29FbBfTrKqudsrE
sla63AAAHpDAChqZaXx8vKfxSVNVMbJxwaqmXqdYLGoc8LvUAIDMEvQ0NPrF
z4ePbX1UL6bZvfmxstpmlwuLpfUdfhcZAJBZsikWxdjY2NmjO3vayndsLPxR
6VaXq4qsvAkAsMqyWNQmJiba9nYu23DYtp5YUBtl5U0AgFW2xuLkVDKeOX9l
WWiPVAzVnKjy74rmE8V1YRYaAwDYyuJYBABguohFAAA0YhEAAI1YBABAIxYB
YEZl62mW9xUsgXhfetHki4MHbt++7fFZgXhrALRs/ZvlfQVL5r8v06LJcv8X
P/c0R2vmvzUgoLz/cU3rzzBAh/W9ABx25g7rewHcdzYtmix7yr/Htj4q21NY
hhn6EIBs5fsfl++H9b0AHHbmDut7AVx2jsVi4Ve3Gtf7ULEoWy4NdWdaaZFO
V69ePXfunN+lyF2+/3H5fljfC8BhZ+6wvhfAdueJiYnT77xXXBcuf/mHxtUh
VSxK5bGnrTxzSptl7ty5I6ETnTIwMHDz5k21Xe7IQ/6W7d69e1Kk/Pz8vLy8
goKCmXsh/QlI+MqLqpceHR1Vj8qdqDN5VH9oJnI026fIm9IHzxwbASBpfp/J
kiJnZskaSZxFixap03VbW1v+FHXH91O3yiZVyFTFomS9McXkvn7L8gmUl5fL
azU0NMgd+VHto2JRpbP6uNTOQvZU22fNmiU/qkjVJBZlT3lIPVF21h+y/Cj/
ShzrneVVTE9HEMVisXcvj4QjR5taO6J9p+S+936DGS7oZ7wAkV+bok2HvloB
ubrWdtHknZtL/S5mtpHzszrDW7NP6jLqTO57LCqqqCmJRYkhSSX9o2SivFP5
EIx5JLkpW+QVdSwq8mmodLN+LBJ/6hOTf601R1V+YdwoEak26sZhKYNsdKp4
IvPpVq9lGw6r6aZXNJ8obDi6vGb3mfNX5FG/C5gsYjE9xsfHS9a3y++PikX5
LWoPPWJdNHnpyjq/S5pVJBrUOdypeiLxITsY6zI+SlUsSgCZDqKyyRpz8rGo
2p9pu1MsTn6dsOpTNTU+qw/TFItC76//F+SJUoUkGYNIUq+lvVO+4euzmfEm
QbmjPRL0hRiIxfSQL1FFjQPG35/ita2R2nzToskSl36XNN1isdi1994+eai5
Nxy68MbuX/x8OFULfulaj3snFtXil5JXTFJKYlG9a1NgqeZZ25hTzaSmjS6x
OGn4YE1F1dtN++sKo/GAqqpOa2rgGFu9VjX1lq+uqCxdWrO2RmqLamNBbfT4
oKexZhmLWEyPaN8piTzrUsjrQmWh0iVrKleWbO5Sa0H6XdL0ka+dEohHdiy5
0vaXevzmSPih3ubFH/3yYvLHV1kgtRL33aTOYs0FtdHYNcXluS67STypg6tO
NcK0g+4Dow5lzRo5gjxLHpI9jd1jnMj7lRgybdSXVq2FVNcTTRvdY1EfUBhr
fE6xqOrs1gPaFhWZzNjqVRJq7K5/WP/lDjTOLSxf/1WdMbTH75ImhVhMj6bW
Dts2B+vN75Kmj2Ti2V0P68Gbxptsvzzcn8zBJU1094+4OxtP1xIccs6XM7bq
NKIaAK3BEXc31ZKpyiA7q6t4Qiej7gOjOrTIEaw9UeUgugeLlw45an9rm7C8
qHp1eRXro9b4ixuL+oDGt+wUi7oPjymUVVz63g04uxk7xrTtP9zeUne4raK/
o+7SUHcCzTK61Uu+xndvfsz0Z3s/GafqjEFv9SIW0+Ngd39Z63DcTJR9/C5p
msjXzv6dT9tmorp5nNzAie15Oy6VX8ZaldxRZ3XjcbzsJqmnyyC5JmGkck3F
omSBqQ+M7G9qmVQX/owtwCocXcqvwtf2Id2SqV7CvdYZNxZt21FtY1FXFY1d
gBR1LdJag0ZKmDrGFG+KNFf81Uj4Ianf3To2/9qB2Ud2LBkbG5vWMXWrV83a
Gqkhmv5m5c+5snRpFrR6EYvp8cGH13Xbu8tNvon5XdI0kS+r1j8rU79cL5Mb
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
45k=
    "], {{0, 241.2}, {363., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->120.],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
    Automatic],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->270,
  ImageSizeRaw->{363., 241.2},
  PlotRange->{{0, 363.}, {0, 241.2}}]], "Text",
 CellChangeTimes->{{3.850649062080307*^9, 3.8506490654034557`*^9}},
 CellLabel->
  "Out[237]=",ExpressionUUID->"3176638b-8a4d-47f8-ab47-9ae4137ece65"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Because", " ", "only", " ", "global", " ", "error", " ", "is", " ", 
     "implemented"}], ",", " ", 
    RowBox[{
    "large", " ", "outliers", " ", "will", " ", "completely", " ", "destroy", 
     " ", "the", " ", "solution"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"coords", ",", "distMatrix"}], "}"}], "=", 
     RowBox[{"exampleData", "[", 
      RowBox[{"30", ",", "0.1"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"distMatrix", "=", 
     RowBox[{"ReplacePart", "[", 
      RowBox[{"distMatrix", ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "2"}], "}"}]}], "}"}], "->", "100"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"coordsSDP", "=", 
     RowBox[{"sdp", "[", "distMatrix", "]"}]}], ";"}], "\n", 
   RowBox[{"analyzeMDS", "[", 
    RowBox[{"coords", ",", "coordsSDP", ",", 
     RowBox[{"LegendLabel", "->", "\"\<SDP\>\""}]}], "]"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.849983674542453*^9, 3.849983695119182*^9}, 
   3.8499841350414553`*^9, 3.8499841940171413`*^9, {3.8499865458549623`*^9, 
   3.8499865483208942`*^9}, 3.8499869114609966`*^9, 3.8499869537623715`*^9, {
   3.850245685701174*^9, 3.850245686748889*^9}, {3.850245731665346*^9, 
   3.850245739896638*^9}, 3.8502672867467537`*^9, {3.850267335290061*^9, 
   3.850267371918764*^9}, {3.85026744756958*^9, 3.850267490573595*^9}, 
   3.850648476049732*^9},
 CellLabel->"In[44]:=",ExpressionUUID->"062bdcfd-bd6c-4a3f-863d-0f747ad9b33a"],

Cell[TextData[{
 StyleBox["SDP Algorithm",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 " (",
 StyleBox["Antibody-Virus Distances",
  FontSlant->"Italic"],
 ")\nInput: \n(1) Distance matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{"D", 
    StyleBox["\[Element]",
     FontWeight->"Plain"], 
    StyleBox[
     SuperscriptBox["\[DoubleStruckCapitalR]", 
      RowBox[{"m", "\[Cross]", "n"}]],
     FontWeight->"Plain"]}], TraditionalForm]],
  FontWeight->"Bold",ExpressionUUID->"427dc050-f150-4dde-b271-b43fd7b678cb"],
 " giving the Euclidean distance between ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "b09fa8c8-2ae5-40f0-a511-cef73a40250c"],
 " viruses and ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "2f640668-dfab-4ee4-9cca-e34597ff2709"],
 " antibodies\n(2) The dimension ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "9bbe9e9e-dcbe-4789-8460-b10b184dca75"],
 " of the final coordinates (usually ",
 Cell[BoxData[
  FormBox[
   RowBox[{"d", "=", "2"}], TraditionalForm]],ExpressionUUID->
  "8e1e8dff-c3cb-4c17-8afb-1f7bfc958e83"],
 ")"
}], "Text",
 CellChangeTimes->{{3.848967272680441*^9, 3.8489672765157146`*^9}, {
   3.8489676366440783`*^9, 3.848967686587202*^9}, {3.84896814556619*^9, 
   3.848968207683409*^9}, {3.8489682745173073`*^9, 3.8489682771112633`*^9}, {
   3.848968434865632*^9, 3.84896843639318*^9}, {3.8489690255455055`*^9, 
   3.8489691010338016`*^9}, {3.848969183328517*^9, 3.8489692182741203`*^9}, 
   3.8489692740637407`*^9, {3.848969814784196*^9, 3.8489698172274437`*^9}, {
   3.8499757534311666`*^9, 3.8499757556560154`*^9}, {3.8499758239767075`*^9, 
   3.849975828685296*^9}, 3.849982081949044*^9, {3.849982271901188*^9, 
   3.849982272491952*^9}},ExpressionUUID->"2707da18-9b38-400d-8c68-\
07082da6ab0c"],

Cell[CellGroupData[{

Cell[TextData[{
 "Define the combined coordinates ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    StyleBox["Z",
     FontWeight->"Bold"], "=", 
    RowBox[{
     RowBox[{"(", GridBox[{
        {
         StyleBox["Vir",
          FontWeight->"Bold",
          FontSlant->"Italic"]},
        {
         StyleBox["Ab",
          FontWeight->"Bold",
          FontSlant->"Italic"]}
       }], ")"}], "\[Element]", 
     RowBox[{"(", GridBox[{
        {
         SuperscriptBox["\[DoubleStruckCapitalR]", 
          RowBox[{"m", "\[Cross]", "d"}]]},
        {
         SuperscriptBox["\[DoubleStruckCapitalR]", 
          RowBox[{"n", "\[Cross]", "d"}]]}
       }], ")"}]}]}], TraditionalForm]],ExpressionUUID->
  "47b6f07d-249e-429f-984a-112c9b6bf195"],
 " and Gram matrix ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     StyleBox["G",
      FontWeight->"Bold"], "=", 
     StyleBox["Z",
      FontWeight->"Bold"]}], "\[InvisibleComma]", 
    RowBox[{
     SuperscriptBox[
      StyleBox["Z",
       FontWeight->"Bold"], "T"], "=", 
     RowBox[{
      RowBox[{"(", GridBox[{
         {
          RowBox[{
           StyleBox["Vir",
            FontWeight->"Bold",
            FontSlant->"Italic"], 
           StyleBox[" ",
            FontWeight->"Bold"], 
           SuperscriptBox[
            StyleBox["Vir",
             FontWeight->"Bold",
             FontSlant->"Italic"], "T"]}], 
          RowBox[{
           StyleBox["Vir",
            FontWeight->"Bold",
            FontSlant->"Italic"], 
           StyleBox[" ",
            FontWeight->"Bold"], 
           SuperscriptBox[
            StyleBox["Ab",
             FontWeight->"Bold",
             FontSlant->"Italic"], "T"]}]},
         {
          RowBox[{
           StyleBox["Ab",
            FontWeight->"Bold",
            FontSlant->"Italic"], 
           StyleBox[" ",
            FontWeight->"Bold"], 
           SuperscriptBox[
            StyleBox["Vir",
             FontWeight->"Bold",
             FontSlant->"Italic"], "T"]}], 
          RowBox[{
           StyleBox["Ab",
            FontWeight->"Bold",
            FontSlant->"Italic"], 
           StyleBox[" ",
            FontWeight->"Bold"], 
           SuperscriptBox[
            StyleBox["Ab",
             FontWeight->"Bold",
             FontSlant->"Italic"], 
            StyleBox["T",
             FontWeight->"Plain"]]}]}
        }], ")"}], "=", 
      RowBox[{
       RowBox[{"(", GridBox[{
          {
           StyleBox[
            SubscriptBox[
             StyleBox["G",
              FontWeight->"Bold"], "11"],
            FontWeight->"Bold"], 
           StyleBox[
            SubscriptBox[
             StyleBox["G",
              FontWeight->"Bold"], "12"],
            FontWeight->"Bold"]},
          {
           StyleBox[
            SubscriptBox[
             StyleBox["G",
              FontWeight->"Bold"], "21"],
            FontWeight->"Bold"], 
           StyleBox[
            SubscriptBox[
             StyleBox["G",
              FontWeight->"Bold"], "22"],
            FontWeight->"Bold"]}
         }], ")"}], "\[Element]", 
       SuperscriptBox["\[DoubleStruckCapitalR]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"m", "+", "n"}], ")"}], "\[Cross]", 
         RowBox[{"(", 
          RowBox[{"m", "+", "n"}], ")"}]}]]}]}]}]}], TraditionalForm]],
  ExpressionUUID->"d6b49d87-127f-4738-9036-9c66d13b8ff0"],
 ". The squared-distance between virus ",
 Cell[BoxData[
  FormBox["j", TraditionalForm]],ExpressionUUID->
  "c6ecbfbf-32e4-4a7d-a31a-3fdc579dca32"],
 " and antibody ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "422e4219-d882-4b8c-9b98-558cbb066992"],
 " is related to the entries of this Gram matrix, ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     RowBox[{"(", 
      SubscriptBox[
       StyleBox["D",
        FontWeight->"Bold"], 
       RowBox[{"j", "\[InvisibleComma]", "k"}]], ")"}], "2"], "=", 
    RowBox[{
     SuperscriptBox[
      RowBox[{"\[LeftBracketingBar]", 
       RowBox[{
        SubscriptBox[
         StyleBox["Vir",
          FontWeight->"Bold",
          FontSlant->"Italic"], "j"], "-", 
        SubscriptBox[
         StyleBox["Ab",
          FontWeight->"Bold",
          FontSlant->"Italic"], "k"]}], "\[RightBracketingBar]"}], "2"], "=", 
     RowBox[{
      SubscriptBox[
       RowBox[{"(", 
        StyleBox[
         SubscriptBox[
          StyleBox["G",
           FontWeight->"Bold"], "11"],
         FontWeight->"Bold"], ")"}], 
       RowBox[{"j", "\[InvisibleComma]", "j"}]], "-", 
      RowBox[{"2", 
       SubscriptBox[
        RowBox[{"(", 
         StyleBox[
          SubscriptBox[
           StyleBox["G",
            FontWeight->"Bold"], "12"],
          FontWeight->"Bold"], ")"}], 
        RowBox[{"j", "\[InvisibleComma]", "k"}]]}], "+", 
      SubscriptBox[
       RowBox[{"(", 
        StyleBox[
         SubscriptBox[
          StyleBox["G",
           FontWeight->"Bold"], "22"],
         FontWeight->"Bold"], ")"}], 
       RowBox[{"k", "\[InvisibleComma]", "k"}]]}]}]}], TraditionalForm]],
  ExpressionUUID->"8a1252d6-ab16-4bf6-911d-e69abf91a7b3"],
 ", and each of these measurements will be an SDP constraint on the matrix ",
 Cell[BoxData[
  FormBox[
   StyleBox["G",
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "08c21aa0-8e58-4125-8b11-37b8612c3884"]
}], "Item",
 CellChangeTimes->{{3.849121275275652*^9, 3.8491212825333056`*^9}, {
  3.8491213332390394`*^9, 3.849121350607689*^9}, {3.849122528474345*^9, 
  3.849122549550758*^9}, {3.849124048030546*^9, 3.849124097232483*^9}, {
  3.8491241404895115`*^9, 3.8491241546357822`*^9}, {3.849219098815353*^9, 
  3.849219098815353*^9}, {3.849222551525283*^9, 3.849222551525283*^9}, {
  3.8496462146025825`*^9, 3.8496462430531435`*^9}, {3.8499822946665077`*^9, 
  3.8499825652413*^9}, {3.8499826228214626`*^9, 3.8499826364927464`*^9}, {
  3.8499832041338577`*^9, 3.849983317633303*^9}, {3.8499843035165873`*^9, 
  3.849984327935607*^9}},ExpressionUUID->"45017ef8-b964-4694-b391-\
fa6fdb572b9a"],

Cell[TextData[{
 "To account for error, the constraints are implemented as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"-", 
     SubscriptBox["error", 
      RowBox[{"j", "\[InvisibleComma]", "k"}]]}], "<", 
    RowBox[{
     SubscriptBox[
      RowBox[{"(", 
       StyleBox[
        SubscriptBox[
         StyleBox["G",
          FontWeight->"Bold"], "11"],
        FontWeight->"Bold"], ")"}], 
      RowBox[{"j", "\[InvisibleComma]", "j"}]], "-", 
     RowBox[{"2", 
      SubscriptBox[
       RowBox[{"(", 
        StyleBox[
         SubscriptBox[
          StyleBox["G",
           FontWeight->"Bold"], "12"],
         FontWeight->"Bold"], ")"}], 
       RowBox[{"j", "\[InvisibleComma]", "k"}]]}], "+", 
     SubscriptBox[
      RowBox[{"(", 
       StyleBox[
        SubscriptBox[
         StyleBox["G",
          FontWeight->"Bold"], "22"],
        FontWeight->"Bold"], ")"}], 
      RowBox[{"k", "\[InvisibleComma]", "k"}]], "-", 
     SuperscriptBox[
      RowBox[{"(", 
       SubscriptBox[
        StyleBox["D",
         FontWeight->"Bold"], 
        RowBox[{"j", "\[InvisibleComma]", "k"}]], ")"}], "2"]}], "<", 
    SubscriptBox["error", 
     RowBox[{"j", "\[InvisibleComma]", "k"}]]}], TraditionalForm]],
  ExpressionUUID->"63d3fdf3-f3e0-4b65-b995-01dfa650f575"],
 ", where ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["error", 
    RowBox[{"j", "\[InvisibleComma]", "k"}]], TraditionalForm]],
  ExpressionUUID->"15223cec-f9e8-48bc-a395-66d0006eff5a"],
 " is chosen to be as small as possible during the minimization process"
}], "Subitem",
 CellChangeTimes->{{3.849121275275652*^9, 3.8491212825333056`*^9}, {
  3.8491213332390394`*^9, 3.849121350607689*^9}, {3.849122528474345*^9, 
  3.849122549550758*^9}, {3.849124048030546*^9, 3.849124097232483*^9}, {
  3.8491241404895115`*^9, 3.8491241546357822`*^9}, {3.849219098815353*^9, 
  3.849219098815353*^9}, {3.849222551525283*^9, 3.849222551525283*^9}, {
  3.8496462146025825`*^9, 3.8496462430531435`*^9}, {3.8499822946665077`*^9, 
  3.8499825652413*^9}, {3.8499826228214626`*^9, 3.849982691523181*^9}, {
  3.8499833304653125`*^9, 3.8499833304653125`*^9}, {3.8502681224346647`*^9, 
  3.8502681336564445`*^9}},ExpressionUUID->"b0c8775a-b8e2-434e-8046-\
b19bd8d2875e"],

Cell[TextData[{
 "These ",
 StyleBox["local",
  FontSlant->"Italic"],
 " ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["error", 
    RowBox[{"j", "\[InvisibleComma]", "k"}]], TraditionalForm]],
  ExpressionUUID->"10926cf9-8572-4622-95a9-55cd0e5bb2f4"],
 " terms make this function robust to outliers, since even if one distance \
measurement is off, the other measurements will still be as tightly \
constrained as possible. Note that the other embedding functions (like cMDS, \
mMDS, and LRE), as well as the city-city SDP implementation, effectively use \
a global error term and hence are far less robust to outliers"
}], "Subitem",
 CellChangeTimes->{{3.849121275275652*^9, 3.8491212825333056`*^9}, {
  3.8491213332390394`*^9, 3.849121350607689*^9}, {3.849122528474345*^9, 
  3.849122549550758*^9}, {3.849124048030546*^9, 3.849124097232483*^9}, {
  3.8491241404895115`*^9, 3.8491241546357822`*^9}, {3.849219098815353*^9, 
  3.849219098815353*^9}, {3.849222551525283*^9, 3.849222551525283*^9}, {
  3.8496462146025825`*^9, 3.8496462430531435`*^9}, {3.8499822946665077`*^9, 
  3.8499825652413*^9}, {3.8499826228214626`*^9, 3.849982691523181*^9}, {
  3.8499833304653125`*^9, 3.8499833304653125`*^9}, {3.8499847769264946`*^9, 
  3.849984780433679*^9}, {3.850268034009243*^9, 
  3.8502682254441495`*^9}},ExpressionUUID->"e5d429aa-8241-43f8-9304-\
e938ec8a4d2c"],

Cell[CellGroupData[{

Cell[TextData[{
 "Alternate method: Use Schur\[CloseCurlyQuote]s complement lemma to minimize \
",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    RowBox[{"(", 
     RowBox[{
      SubscriptBox[
       RowBox[{"(", 
        StyleBox[
         SubscriptBox[
          StyleBox["G",
           FontWeight->"Bold"], "11"],
         FontWeight->"Bold"], ")"}], 
       RowBox[{"j", "\[InvisibleComma]", "j"}]], "-", 
      RowBox[{"2", 
       SubscriptBox[
        RowBox[{"(", 
         StyleBox[
          SubscriptBox[
           StyleBox["G",
            FontWeight->"Bold"], "12"],
          FontWeight->"Bold"], ")"}], 
        RowBox[{"j", "\[InvisibleComma]", "k"}]]}], "+", 
      SubscriptBox[
       RowBox[{"(", 
        StyleBox[
         SubscriptBox[
          StyleBox["G",
           FontWeight->"Bold"], "22"],
         FontWeight->"Bold"], ")"}], 
       RowBox[{"k", "\[InvisibleComma]", "k"}]], "-", 
      SuperscriptBox[
       RowBox[{"(", 
        SubscriptBox[
         StyleBox["D",
          FontWeight->"Bold"], 
         RowBox[{"j", "\[InvisibleComma]", "k"}]], ")"}], "2"]}], ")"}], "2"],
    TraditionalForm]],ExpressionUUID->"e7251d30-735e-4a9d-bb49-9ff0c2a28418"],
 " for all measured virus-antibody pairs. This leads to ",
 StyleBox["slightly",
  FontSlant->"Italic"],
 " more accurate results, but it takes far longer to perform the SVD, and it \
cannot handle LessThan/GreaterThan values, so it is not the default method"
}], "Subitem",
 CellChangeTimes->{{3.849121275275652*^9, 3.8491212825333056`*^9}, {
  3.8491213332390394`*^9, 3.849121350607689*^9}, {3.849122528474345*^9, 
  3.849122549550758*^9}, {3.849124048030546*^9, 3.849124097232483*^9}, {
  3.8491241404895115`*^9, 3.8491241546357822`*^9}, {3.849219098815353*^9, 
  3.849219098815353*^9}, {3.849222551525283*^9, 3.849222551525283*^9}, {
  3.8496462146025825`*^9, 3.8496462661863627`*^9}, {3.8499838780874753`*^9, 
  3.8499839536836247`*^9}, {3.8502250623910866`*^9, 
  3.8502251231033106`*^9}},ExpressionUUID->"1d240c9d-fc9d-4fea-9749-\
6b9ce4ea36ae"],

Cell[BoxData[
 RowBox[{
  RowBox[{"sdpAbVirus", "[", 
   RowBox[{"distMatrix_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "m", ",", "n", ",", "G", ",", "Gmat", ",", "error", ",", "errorMat", ",",
       "t", ",", "tmat", ",", "expr", ",", "constraints", ",", "U", ",", 
      "\[CapitalSigma]", ",", "V", ",", "coords"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"m", ",", "n"}], "}"}], "=", 
      RowBox[{"Dimensions", "@", "distMatrix"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Switch", "[", 
      RowBox[{
       RowBox[{"OptionValue", "[", "Method", "]"}], ",", 
       "\[IndentingNewLine]", "\"\<NuclearNorm\>\"", ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"Gmat", ",", "errorMat"}], "}"}], "=", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"G", ",", "error"}], "}"}], "/.", 
          RowBox[{"SemidefiniteOptimization", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              FractionBox["1", 
               SuperscriptBox["10", "3."]], 
              RowBox[{"OptionValue", "[", "\"\<TracePrefactor\>\"", "]"}], 
              FractionBox[
               RowBox[{"1.", 
                RowBox[{"Tr", "[", "G", "]"}]}], 
               RowBox[{"m", "+", "n"}]]}], "+", 
             RowBox[{"Total", "[", 
              RowBox[{"error", ",", "2"}], "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Flatten", "[", 
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{"(*", " ", 
               RowBox[{"G", " ", "is", " ", "positive", " ", "semidefinite"}],
                " ", "*)"}], "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{"VectorGreaterEqual", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"G", ",", "0"}], "}"}], ",", " ", 
                 RowBox[{"{", 
                  RowBox[{"\"\<SemidefiniteCone\>\"", ",", 
                   RowBox[{"m", "+", "n"}]}], "}"}]}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{
                "Virus", " ", "coordinates", " ", "are", " ", "centered", " ",
                  "at", " ", "the", " ", "origin"}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"Table", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Sum", "[", 
                   RowBox[{
                    TemplateBox[{"G", "j", "k"},
                    "IndexedDefault"], ",", 
                    RowBox[{"{", 
                    RowBox[{"k", ",", "m"}], "}"}]}], "]"}], "\[Equal]", 
                  "0"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"j", ",", "m"}], "}"}]}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{"Errors", " ", "are", " ", "positive"}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"VectorGreaterEqual", "[", 
                RowBox[{"{", 
                 RowBox[{"error", ",", "0"}], "}"}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", " ", 
                RowBox[{"Distance", " ", "constrants"}], " ", "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"Table", "[", "\[IndentingNewLine]", 
                RowBox[{
                 RowBox[{"Switch", "[", 
                  RowBox[{
                   TemplateBox[{"distMatrix", "j", "k"},
                    "IndexedDefault"], ",", "\[IndentingNewLine]", 
                   RowBox[{"_Real", "|", "_Integer"}], ",", 
                   RowBox[{
                    RowBox[{"-", 
                    TemplateBox[{"error", "j", "k"},
                    "IndexedDefault"]}], "<", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    TemplateBox[{"G", "j", "j"},
                    "IndexedDefault"], "-", 
                    RowBox[{"2", 
                    TemplateBox[{"G", "j", 
                    RowBox[{"m", "+", "k"}]},
                    "IndexedDefault"]}], "+", 
                    TemplateBox[{"G", 
                    RowBox[{"m", "+", "k"}], 
                    RowBox[{"m", "+", "k"}]},
                    "IndexedDefault"]}], ")"}], "-", 
                    SuperscriptBox[
                    TemplateBox[{"distMatrix", "j", "k"},
                    "IndexedDefault"], "2"]}], "<", 
                    TemplateBox[{"error", "j", "k"},
                    "IndexedDefault"]}], ",", "\[IndentingNewLine]", 
                   "_GreaterThan", ",", 
                   RowBox[{
                    RowBox[{"-", 
                    TemplateBox[{"error", "j", "k"},
                    "IndexedDefault"]}], "<", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    TemplateBox[{"G", "j", "j"},
                    "IndexedDefault"], "-", 
                    RowBox[{"2", 
                    TemplateBox[{"G", "j", 
                    RowBox[{"m", "+", "k"}]},
                    "IndexedDefault"]}], "+", 
                    TemplateBox[{"G", 
                    RowBox[{"m", "+", "k"}], 
                    RowBox[{"m", "+", "k"}]},
                    "IndexedDefault"]}], ")"}], "-", 
                    SuperscriptBox[
                    RowBox[{"First", "[", 
                    TemplateBox[{"distMatrix", "j", "k"},
                    "IndexedDefault"], "]"}], "2"]}]}], ",", 
                   "\[IndentingNewLine]", "_LessThan", ",", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    TemplateBox[{"G", "j", "j"},
                    "IndexedDefault"], "-", 
                    RowBox[{"2", 
                    TemplateBox[{"G", "j", 
                    RowBox[{"m", "+", "k"}]},
                    "IndexedDefault"]}], "+", 
                    TemplateBox[{"G", 
                    RowBox[{"m", "+", "k"}], 
                    RowBox[{"m", "+", "k"}]},
                    "IndexedDefault"]}], ")"}], "-", 
                    SuperscriptBox[
                    RowBox[{"First", "[", 
                    TemplateBox[{"distMatrix", "j", "k"},
                    "IndexedDefault"], "]"}], "2"]}], "<", 
                    TemplateBox[{"error", "j", "k"},
                    "IndexedDefault"]}], ",", "\[IndentingNewLine]", 
                   "_Missing", ",", "Nothing"}], "\[IndentingNewLine]", "]"}],
                  ",", 
                 RowBox[{"{", 
                  RowBox[{"j", ",", "m"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"k", ",", "n"}], "}"}]}], "]"}]}], 
              "\[IndentingNewLine]", "}"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"G", "\[Element]", 
               RowBox[{"Matrices", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"m", "+", "n"}], ",", 
                   RowBox[{"m", "+", "n"}]}], "}"}], ",", "Reals"}], "]"}]}], 
              ",", 
              RowBox[{"error", "\[Element]", 
               RowBox[{"Matrices", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"m", ",", "n"}], "}"}], ",", "Reals"}], "]"}]}]}], 
             "}"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"OptionValue", "[", "\"\<ReturnErrorMatrix\>\"", "]"}], ",", 
          RowBox[{"Return", "[", "errorMat", "]"}]}], "]"}]}], ",", 
       "\[IndentingNewLine]", "\"\<SchurComplement\>\"", ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"Replace", " ", 
         RowBox[{"upper", "/", "lower"}], " ", "bounds", " ", "by", " ", 
         "their", " ", "value"}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"MemberQ", "[", 
           RowBox[{"distMatrix", ",", 
            RowBox[{"_GreaterThan", "|", "_LessThan"}], ",", "All"}], "]"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Echo", "[", 
            RowBox[{
            "\"\<LessThan/GreaterThan values converted into concrete values\>\
\"", ",", "\"\<Warning!\>\""}], "]"}], ";", "\[IndentingNewLine]", 
           RowBox[{"distMatrix", "=", 
            RowBox[{"distMatrix", "/.", 
             RowBox[{
              RowBox[{
               RowBox[{"GreaterThan", "[", "val_", "]"}], "|", 
               RowBox[{"LessThan", "[", "val_", "]"}]}], ":>", 
              "val"}]}]}]}]}], "\[IndentingNewLine]", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"tmat", "=", 
         RowBox[{"Array", "[", 
          RowBox[{
           RowBox[{
            TemplateBox[{"t", "#1", "#2"},
             "IndexedDefault"], "&"}], ",", 
           RowBox[{"{", 
            RowBox[{"m", ",", "n"}], "}"}]}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"expr", "=", 
         RowBox[{
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{
             TemplateBox[{"G", "j", "j"},
              "IndexedDefault"], "-", 
             RowBox[{"2", 
              TemplateBox[{"G", "j", "k"},
               "IndexedDefault"]}], "+", 
             TemplateBox[{"G", "k", "k"},
              "IndexedDefault"]}], ",", 
            RowBox[{"{", 
             RowBox[{"j", ",", "m"}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{"k", ",", 
              RowBox[{"m", "+", "1"}], ",", 
              RowBox[{"m", "+", "n"}]}], "}"}]}], "]"}], "-", 
          SuperscriptBox["distMatrix", "2"]}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"constraints", "=", 
         RowBox[{"Flatten", "[", 
          RowBox[{"{", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{"G", " ", "is", " ", "positive", " ", "semidefinite"}], 
            " ", "*)"}], "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"VectorGreaterEqual", "[", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"G", ",", "0"}], "}"}], ",", " ", 
              RowBox[{"{", 
               RowBox[{"\"\<SemidefiniteCone\>\"", ",", 
                RowBox[{"m", "+", "n"}]}], "}"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
             "Virus", " ", "coordinates", " ", "are", " ", "centered", " ", 
              "at", " ", "the", " ", "origin"}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"Sum", "[", 
                RowBox[{
                 TemplateBox[{"G", "j", "k"},
                  "IndexedDefault"], ",", 
                 RowBox[{"{", 
                  RowBox[{"j", ",", "m"}], "}"}]}], "]"}], "\[Equal]", "0"}], 
              ",", 
              RowBox[{"{", 
               RowBox[{"k", ",", "m"}], "}"}]}], "]"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{"Distance", " ", "constraints", " ", "from", " ", 
              RowBox[{"Schur", "'"}], "s", " ", "complement", " ", 
              "condition"}], " ", "*)"}], "\[IndentingNewLine]", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"Switch", "[", 
               RowBox[{
                TemplateBox[{"distMatrix", "j", "k"},
                 "IndexedDefault"], ",", "\[IndentingNewLine]", 
                RowBox[{"_Real", "|", "_Integer"}], ",", 
                RowBox[{
                 TagBox[
                  RowBox[{"(", "\[NoBreak]", GridBox[{
                    {
                    TemplateBox[{"t", "j", "k"},
                    "IndexedDefault"], 
                    TemplateBox[{"expr", "j", "k"},
                    "IndexedDefault"]},
                    {
                    TemplateBox[{"expr", "j", "k"},
                    "IndexedDefault"], "1"}
                    },
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
                    GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.7]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.4]}, 
                    Offset[0.2]}}], "\[NoBreak]", ")"}],
                  Function[BoxForm`e$, 
                   MatrixForm[BoxForm`e$]]], 
                 UnderscriptBox["\[VectorGreaterEqual]", 
                  TemplateBox[{"2"},
                   "SemidefiniteConeList"]], "0"}], ",", 
                "\[IndentingNewLine]", "_Missing", ",", 
                RowBox[{
                 TemplateBox[{"t", "j", "k"},
                  "IndexedDefault"], "==", "0"}]}], "\[IndentingNewLine]", 
               "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"j", ",", "m"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"k", ",", "n"}], "}"}]}], "]"}]}], 
           "\[IndentingNewLine]", "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"Gmat", "=", 
         RowBox[{"G", "/.", 
          RowBox[{"SemidefiniteOptimization", "[", 
           RowBox[{
            RowBox[{"Total", "[", 
             RowBox[{"tmat", ",", "2"}], "]"}], ",", "constraints", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"t", "\[Element]", 
               RowBox[{"Matrices", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"m", ",", "n"}], "}"}], ",", "Reals"}], "]"}]}], 
              ",", 
              RowBox[{"G", "\[Element]", 
               RowBox[{"Matrices", "[", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"m", "+", "n"}], ",", 
                   RowBox[{"m", "+", "n"}]}], "}"}], ",", "Reals"}], 
                "]"}]}]}], "}"}]}], "]"}]}]}]}]}], "\[IndentingNewLine]", 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"OptionValue", "[", "\"\<ReturnGramMatrix\>\"", "]"}], ",", 
       RowBox[{"Return", "[", "Gmat", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"U", ",", "\[CapitalSigma]", ",", "V"}], "}"}], "=", 
      RowBox[{"SingularValueDecomposition", "[", 
       RowBox[{"Gmat", ",", 
        RowBox[{"OptionValue", "[", "\"\<Dimensions\>\"", "]"}]}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"coords", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", 
            RowBox[{";;", "m"}], "]"}], "]"}], ",", 
          RowBox[{"#", "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"m", "+", "1"}], ";;"}], "]"}], "]"}]}], "}"}], "&"}], 
       "[", 
       RowBox[{"U", ".", 
        SqrtBox["\[CapitalSigma]"]}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"Final", " ", 
        RowBox[{"(", "optional", ")"}], " ", "post"}], "-", 
       RowBox[{"processing", " ", "step"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"OptionValue", "[", "\"\<AddFinalMDS\>\"", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "MDS", " ", "on", " ", "all", " ", "data", " ", "using", " ", "SDP", 
         " ", "as", " ", "initial", " ", "conditions"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"OptionValue", "[", "\"\<Verbose\>\"", "]"}], ",", 
          RowBox[{
          "PrintTemporary", "[", "\"\<Starting Final MDS\>\"", "]"}]}], "]"}],
         ";", "\[IndentingNewLine]", 
        RowBox[{"metricMDS", "[", 
         RowBox[{"distMatrix", ",", 
          RowBox[{"\"\<SearchMethod\>\"", "\[Rule]", 
           RowBox[{"OptionValue", "[", "\"\<SearchMethod\>\"", "]"}]}], ",", 
          RowBox[{"\"\<SearchPoints\>\"", "\[Rule]", 
           RowBox[{"OptionValue", "[", "\"\<SearchPoints\>\"", "]"}]}], ",", 
          RowBox[{"\"\<InitialPoints\>\"", "\[Rule]", "coords"}], ",", 
          RowBox[{"\"\<Comparing\>\"", "->", 
           RowBox[{"OptionValue", "[", "\"\<Comparing\>\"", "]"}]}], ",", 
          RowBox[{"\"\<PenalizeError\>\"", "\[Rule]", 
           RowBox[{"OptionValue", "[", "\"\<PenalizeError\>\"", "]"}]}], ",", 
          RowBox[{"\"\<Dimensions\>\"", "\[Rule]", 
           RowBox[{"OptionValue", "[", "\"\<Dimensions\>\"", "]"}]}]}], 
         "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"Otherwise", ",", " ", 
         RowBox[{
         "return", " ", "the", " ", "SDP", " ", "results", " ", 
          "directly"}]}], " ", "*)"}], "\[IndentingNewLine]", "coords"}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.849228474721824*^9, 3.849228506912672*^9}, {
   3.8492287705623407`*^9, 3.8492287963295135`*^9}, {3.849228850991743*^9, 
   3.8492290016141095`*^9}, {3.8492293049368453`*^9, 
   3.8492293062021737`*^9}, {3.8492359005529284`*^9, 3.849235901060766*^9}, {
   3.849236007252763*^9, 3.8492360083412557`*^9}, 3.8492361257187953`*^9, {
   3.849236183533552*^9, 3.849236189289014*^9}, {3.84923624682026*^9, 
   3.8492362784226418`*^9}, {3.849237316732112*^9, 3.8492373335676947`*^9}, {
   3.8492375475454483`*^9, 3.849237556978899*^9}, 3.8492376564809527`*^9, {
   3.8492378339936557`*^9, 3.849238115976596*^9}, {3.8492381509271665`*^9, 
   3.8492382046482806`*^9}, {3.849238334084465*^9, 3.8492383587791786`*^9}, {
   3.8496431966642685`*^9, 3.8496432194629316`*^9}, {3.8496433093997946`*^9, 
   3.849643359811252*^9}, {3.8496434453798046`*^9, 3.8496434897612677`*^9}, {
   3.8496435842316093`*^9, 3.8496436456899033`*^9}, {3.8496436900642514`*^9, 
   3.8496437189189425`*^9}, {3.849643791858218*^9, 3.8496437933728795`*^9}, {
   3.8496438312021437`*^9, 3.849643908041865*^9}, {3.8496439514292154`*^9, 
   3.8496440032278337`*^9}, {3.8496440360586543`*^9, 3.849644038179714*^9}, {
   3.8496440713484945`*^9, 3.8496441495002995`*^9}, {3.8496442170279236`*^9, 
   3.849644264907381*^9}, {3.84964430096069*^9, 3.8496443035385423`*^9}, 
   3.8496443674611826`*^9, {3.849644415355728*^9, 3.849644433428603*^9}, {
   3.8496447491839266`*^9, 3.8496447897108345`*^9}, {3.8496448415921745`*^9, 
   3.849644922142063*^9}, 3.8496449554029284`*^9, {3.8496451612179413`*^9, 
   3.8496452010838237`*^9}, 3.84964529391883*^9, {3.8496458658765087`*^9, 
   3.849645895626856*^9}, {3.8496462947822*^9, 3.8496463154797907`*^9}, {
   3.849646936749155*^9, 3.8496469369589233`*^9}, {3.849646973875888*^9, 
   3.849647026056812*^9}, {3.8496473011664677`*^9, 3.849647306006437*^9}, {
   3.849647341761591*^9, 3.8496473643733053`*^9}, {3.849647663008082*^9, 
   3.849647789507995*^9}, {3.849753404287936*^9, 3.8497534355742555`*^9}, {
   3.849975739762029*^9, 3.8499757455099587`*^9}, {3.8499834315666313`*^9, 
   3.84998343167618*^9}, {3.849983491852919*^9, 3.8499835410461426`*^9}, {
   3.849983609885192*^9, 3.8499836103683033`*^9}, {3.8499837424471235`*^9, 
   3.849983746103157*^9}, {3.849984115597034*^9, 3.849984207835744*^9}, {
   3.8499842415225534`*^9, 3.8499842652145147`*^9}, {3.849984566628721*^9, 
   3.849984590568945*^9}, 3.8499849684433274`*^9, {3.849985198917451*^9, 
   3.849985213184946*^9}, {3.8499872162723217`*^9, 3.849987262953337*^9}, {
   3.850224570280714*^9, 3.850224614600864*^9}, {3.850224648413559*^9, 
   3.8502246567584147`*^9}, {3.850224719532305*^9, 3.8502247651597214`*^9}, {
   3.8502459168337708`*^9, 3.850245925779419*^9}, {3.85024597298715*^9, 
   3.8502459869540987`*^9}, {3.850246863448721*^9, 3.8502469051203337`*^9}, 
   3.8502472572644997`*^9, 3.8502473370786314`*^9, {3.8502478288916407`*^9, 
   3.8502478748206825`*^9}, {3.850264686661636*^9, 3.850264689560236*^9}, {
   3.850265356674713*^9, 3.8502653571973495`*^9}, 3.8502654414230366`*^9, 
   3.8502655945527*^9, {3.8502658661408243`*^9, 3.85026586686066*^9}, {
   3.8502671020239882`*^9, 3.8502671325440645`*^9}, {3.850582884019824*^9, 
   3.8505828944442167`*^9}, {3.8506487290108805`*^9, 
   3.8506488232225723`*^9}, {3.850648856064248*^9, 3.8506488580568156`*^9}, {
   3.8506488982485557`*^9, 3.8506489309906816`*^9}, {3.8506532223240023`*^9, 
   3.8506532239926577`*^9}, {3.851787416753668*^9, 3.8517874229710937`*^9}, 
   3.8518027148879614`*^9, 3.8523242635715175`*^9, {3.853159491678093*^9, 
   3.853159491849557*^9}, {3.853371590635503*^9, 3.8533716025069647`*^9}, {
   3.8533716376600246`*^9, 3.8533716462946105`*^9}, {3.857394901040001*^9, 
   3.8573949048780136`*^9}, {3.857394970751743*^9, 3.8573949765685673`*^9}, 
   3.8573956370028343`*^9, {3.8594244253143015`*^9, 3.8594244374086046`*^9}, 
   3.8598477801482496`*^9},
 CellLabel->"",ExpressionUUID->"d141bb56-4d59-4a78-84d0-33594d913db6"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"coords", ",", "distMatrix"}], "}"}], "=", 
     RowBox[{"exampleData", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"numViruses", "=", "15"}], ",", 
         RowBox[{"numAntibodies", "=", "20"}]}], "}"}], ",", 
       RowBox[{"\[Sigma]", "=", "0.1"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"coordsSDP", "=", 
     RowBox[{"sdp", "[", "distMatrix", "]"}]}], ";"}], "\n", 
   RowBox[{"analyzeMDS", "[", 
    RowBox[{"coords", ",", "coordsSDP", ",", 
     RowBox[{"LegendLabel", "->", "\"\<SDP\>\""}]}], "]"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.849983674542453*^9, 3.849983695119182*^9}, 
   3.8499841350414553`*^9, 3.8499841940171413`*^9, {3.8499865458549623`*^9, 
   3.8499865483208942`*^9}, 3.8499869114609966`*^9, 3.8499869537623715`*^9, {
   3.850245685701174*^9, 3.850245686748889*^9}, {3.850245731665346*^9, 
   3.850245739896638*^9}, 3.8502672867467537`*^9, 3.8505818398003855`*^9, {
   3.850582863423871*^9, 3.850582874959427*^9}, {3.8505829204932885`*^9, 
   3.850582958816802*^9}},
 CellLabel->"In[46]:=",ExpressionUUID->"dc5f9f2e-9968-406d-b150-9aeefe3c676c"]
}, Open  ]]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
rlUPr16/WVskyr+j/FeT17695UE925G98dahe3rXPbB04373wnppjxkFANQt
SXPN9HJiXZwZHZO8C032tm/0Dm74MLwkwqaOLX6573NXX6vqDt56D/6KJw/t
6Hww9O7y8u8ov3nz5u4n29sffnBN+0Nta54I7XAo6zo+fK5SGwUAyDd9tqAG
epm19cJ8Dbfv2YOhyS61TsnBPfuOSJaluYGl0Xvw23f9QELcc3d5+XeU52aP
AQCqgXkY4p5D45/6zBfKjPXCfE6dH5+QvJNqpl6Pln+lHpr88r1KbQ+E0nvw
Q+/Ls+8ur8gd5VF7rG3jwMETo4wcCwBITh+V6E/YomI9SmA5/lfmsf77e/DD
OvDbt6FxRzkAoApJjH5wbduSz94lP/z0hRXys/3KU6wX22gQe3f5ApUTAICS
1VWsJy+GvPx3l3NHOQCgChHrUa8dq+733F3OHeUAgCpUVKwHJF9FtcV6kh4F
bVsGJdlD7y7njnIAQHVKv7Yee1G74tvoFkO3Ouql84SPhcsd5QCAKpZJrHsi
tXpinTvKAQA1h1iPinXuKAcA1BxiPSrWF6gYAAAsHGKdWAcA5EZsBzbD82DW
2FUQ6wAAVJXkd7QF1Gisp9xRHwCANNVbrKd8Wz0AAGki1ol1AEBu1E+s+/sY
LFDxAABIUzmxHpB5rPvr45kUDwCANJUc61WCWEeeXLly5cKFC1mtWmSyagAV
VOuxHsrNemIdN27ckNgamjc8PHz9+nWdLj/IW9mW7datW1KkxsZG+VVsbm4u
YQmyCUMO9wzBnU2ny07QNjezW6qT+QZl02SnFeZ33eTkpL4rP7g7wZB3o7ZO
lhb6EflSzMKBWlHCs9uqH7EOmxyZJSvlW25qatLDdV9fX+M8/SHzQ7dmkxay
5Fjv7u5etGiRuSgmGxsa6x0dHTqDzCwf0enVGetSWvvsy3xl8g3qVkj55Qdz
cqKxrmdHugd0ZiFz6nTZavmvnhIYsqNkTrP3ZGbzSyL/lX/tdgxZS+DjQFXJ
U5obxDoMOT7rEd7NbqmL6ZE881hXWtTSYl2ZdJbt8swmgeUmeLU1wkthpJz6
sxRVtki+RDtPJfRlimyIiXUl36buBPdrlfjWb1z+dU9gdP8HjgYS8TrRnCNJ
GWRiVZ3/VKHZ2dmLl68ODJ7c3ntg6MRZ+Xl6ejrrQtULYp1YzzHNLzmGR1Wv
JDtkhiqJs/JjvWDFkKdGaddwq5NkqL0fdKPcmJZt1Np3YHpUrBfunCHob0Xg
4ov+MrhHAzO/2aXyQanCk+yh5ubmzr3647aNAy2bjuoTtZb3jLR2n1y6fs/5
8Ql5N+sC5h+xTqxn6+bNm7/8+U9eOtJzfKDr0vf2/Pxnr1XqUXqm1ubvhKYt
rhVZY5kqEuuSOLrVURulM2TencBDvzi7hHp5IjSmtZk9MNET6wXrFyOwq830
wPzmTMleoDb10BofIKm9s//gsieOSJq7j8CWoN/VP8izMhcasU6sZ+idtydP
9T/yo7/95NSxxe8NN04O3n114BPf3vZXv5q8Vv7CNQukVuWfTepcbi7oRLtr
luezntm0i1rhTqc4EZjB9AHTRblZI0uQT8lbMqfdPcxDYygqdCQHzSV1d0WB
ibI6PSnSDdGO+qZHmUne0InK7CIteZLyy1cWKKHpGuFukV5PD0z0x7pZYOBK
RFSsa5uPu0C3nLh4+apkuhvo7TtfXrl2w4bO1pWtX+zd3iUn81mXNM+IdWI9
K5Lp333qwXdP3fv+yH32S/L9+0/dL++Ws3BTaU1y4LUP1xIccsyXI7Z2mtIG
WDc4YmfTZmTTHq5XgYWJTtMHTDt0yRLcnvCyENODK3mHOk8zhbZaB1qPZTbT
j87MZvfMNw3XQs8KAjFnb6y9M3W7tEKtS4ttGNFNDlwWkcLowmVp7hUTN75j
Y90s0C5PVKybPniBkwqN+2pu90jZzMzMisf73Xr6iicP7eh8UM7Y5exd/t7f
fO6uF3YtmZqayrq8uVUnsR57V3vWRa47t2/fPvnMw/JnHsh0k+yHvvWVck7p
Q4/bsTR/7Vqh/ODmUZLZJApNGSTdJIw0+DTWJQsCfcBMbzcT3BrBdjRruCfZ
kKiWisA1a7NqDVM71k2feSmk/CDl1w3UUwI9SwnkZqD/YWhbeuzXoUt2p5tz
Cd1F/lp/bKyHtsOHxrqpqpv+e4Zei3ebOOrW+fGJZVuHA5m+sndMMl3+ogN/
4Md7Pp91eXOLWCfWM/F3Pxqb6PuPoZmuLzmln7j030tevunVXFR3OD2GBz5i
jvYmoRLOZqaYOc1bGruBip4mlwka/Xigxi0Jm2RDoirsEs1RPQ3cRNN9aHct
C5Q/kJuBifpxextDr3e4xYg6dZHP2nfwaTOCZ1s8sW4ac0JjXbsUCtPG4mZ6
Yf7kx1PaOjR04uzynpFgVb1rq/wth/6BZ13e3CLWifVMXPrensnBuz2x/uH5
/EBXycs3sZ785jWtHYf+MmhFVY/tCWcrRDfqasVcIiO0zCYmNHpkXfYmJN8c
c8+1maI17qj5o2I9NLaSxLq2AMhm2snuL7/uMU9Q6u35DZbQwC0z1rVHgek1
4Wlmb4i7l7CubO89ENJTbtXD7oU2/QPPury5lddYL1bWRa47EtmBdjn39Z1d
K0pevon15GOxRqVwYb6ObCIg4WyeOaPi0p1uIiy22dll2tVNW4EsxNNiXPFY
t3sUyIYkuQYdG+tKFmUu5TeEdZ+IjXW7Yu5OjC1nYEXJ58+35w+fXtk7Rqxn
Lpexjup39oU9URfW9SXvvnSkp+Tlm3uQk19b9xzV7YBLOJtnzkBje9THzYbY
w6YVda+03QdPu715evVXPNbNQkzLuWSo/46wqFgPDWiZaJYcmCE21k23B/s8
h1gv0+tvXGvtPpmwEX5y8O6sy5tbxDoy8Ys3r14d+IT/2vpPx0+Uswo95rtt
3VHMUT1q/LFArPtnK8TFemwjvE2q3mbs0+TJbirsUhJZaWh7tbFAsV6Yr7ab
cA+9Sc2IivWo+rvpZxg4eYuNdVPZD1wgINbLMTs727zmaffWth2r7ner6qd3
fynr8uYWsY5M3L59+9C3vhLaOqd/9S/sWiJHiXJWkfzyugalud7qtlRrHznT
iT3JbIW4RvgGp8uce23dnkHS0AyEnmTzC1Y3AG0M9zeDVzzWA+/qyGwN3ssi
GtOhsR7V9VFXWlSsm+8lcJ5TWqzHDoxQV86MjrVsOhpI9rYtg5LsWmeXP+23
Dt1zvOfzcmKfdWFzyxPrDUVKs9jIgV9NXntxd5N7hV2mjO399M9/9lr5q9A4
kwOvp4Z4YZ7+rPVo90Aty7FbsBPOFhUT5sQg0K3drewHEjzhpWd3me66XCXE
euCmP01tuyd8IMF1gf7LIg1h7RjN80LnD73VzhPr5h58t90gavDYKPo90hPe
Njc31/fsQTfZ5dU5MNG8YWjPviOMRbPQPE9wayimPzmxjhJIsh/e+ZCOUyFp
Lv9ODt59eveXfvvL1ysydrTptRX6mDZ5V+prdvSY6q2dp9qUXcJs7i1vhrkb
WtJW35VM0WVqUWWie4Obu4okeyDJ42zMmYbdwq8pHFob1WvT8pYWXp+Aplkv
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
og5TC/1Xk6aUY112WpIckVpYpVqGy1TxWNc90NTUFFtNLjPWdUWeX9HkJYkl
waptLOUsxC9qb2jzDq3xSlsw7N4vst8qe9ozMzOz4vH+0Hr6x+rsXXs9C4mN
dfdQLP8+9dxL8kPb2m9VcHNSk8tY17/KbMtQfqyn8FeTspRjXX8NYkNEdqkb
6zpRyCmB5zAeO5sknS5cO8WJwAymF58uyo11WYJ8St6SOYs9X+3o6JBfIa3b
+lPbDjKzUcnPJGUny4oqUhKlfdG1c6NdDPmgZrowe37IYuYMnajMLtXd7q7d
c5ITu6V1Qr4gPUmTb1Z+M2VfmZaxCh6jzo9PLNs67M90eS3vGfEspIRYl3r6
H/zhHxHr1cNEYbbFKDPW0/mrSVmasW46PiU5CAeuospRXTt3yT7XEHGjIXY2
bZTWMphvU5hkl+9Ru+3Jp7T3tdsTXnNQ2xOK7VCne0DWImvX4nk+a4JMf82M
JO0YWkjPhYyiSlKYrxRresradZ+YS/a6r9xYN7vaLMR8NvCXpR/371JPrOv+
yUHTWZn0FFSOTvZE+eLciWWt5cRZiexAiLfvfHnl2g0bOlu7Vj28ev1myX2p
znsWUsKhWDOdWK8GctCQ3yhzRMq2MGXGejp/NSlLM9Z1XyUMJkPzV5iqt/yg
6WAvJ8lskmKmDBIiknoaFhrrkgsScPYSZH7TJmOWKfPYVxA0iRJui6xUlm9+
1oVH5ZEJOJlT4kxK656HRNE5K1US2Ub73NWcnpn9YK6t2J+SfeVONLvUTNFv
xO7Xp99a4DKNJ9a1M0bsPsk9/dLdKkZlj73bew8EWuBXPL63d33Tm8/dNXVs
8bun7p0cvLu/65MyMfkyPUehoZd+8eAXH9JYv6vxz4n1zMmfm6kIVEOslymd
v5qUpRnrel7kr0W6tC4W+IjJEZNECWczU8yc5i39LQ1Em0aeCW79eCBxEp7U
aRqaz8a2XdinHIGJsVcxQiu8pZVE3w10pw+0hITGeiHiTyMwUX8r7DM03eeB
cz9PrOv5Q8VvQqw5UWeYlT1APX/49MresY8y/clD/Y99+r3hxvdH7rNf395w
78zMTMJleo5Cej39U5/5wp5D4xLoNR3r+XhKl/yOyZ+//nnWdPapdP5qUpZJ
rCe/GG2aiN237KbghLMVogNIa5GmAhsos/neNeNkXYEbqJNsi9Z57Sn2FQF3
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
jVgHACA3iHUAAHKDWAcAIDfsJ7gR6wAA1DS3tu7vAE+sAwBQtUJjPclj+LIt
9kLjdj8AiDI7O3vhxcHRoS2nD2z84cuHeUp1VSHWQ9HTAABCvfP25Au7llwd
+MTUscXvnrr3zefukv9OTU1lXa7sydnOxctXBwZPbu89MHTirPw8PT2dfjGI
9VDEOgAESGyNvHzhmXX/6b3hxvdH7jMv+e/xns9nXboszc3NnXv1x20bB1o2
HV3ZO9Y5MLG8Z6S1++TS9XvOj0/Iu2kWhlgPFdvqTqwDqB8mtv766yulem5n
ur5kYtZlzIzsnJ39B5c9cUTSvGvflcBLgn5X/+Dt27dTKw+xHkqzO8l+qIe9
AaCefSy2Vj387ql73ViXCnvWxczMxctXZedoiLfvfHnl2g0bOltlR61ev1lq
7jKxecPQmdGx1MpDrIci1gFA2bFFrAfMzMyseLxf6+krnjy0o/NBu9eB/Le1
++SHdfauvakViVgPRawDQOHjsfVhcnVtDW2Enxy8O+uSZuP8+MSyrcOyZ6Ri
LiHu9jroXfeAvLW8ZyS1IhHroYh1AChYsWUamXesut+tqvd13Z91SbMxdOKs
RLbnhEcmyltyXpRakYj1UMQ6ABSs2DKvti2DkuwaYRLobx26Ryqkf/PYQFb3
c2Vre++B3zdlRF+e6GpfIjOkViSetx6KWEcmrly5cuHChfTXe+vWreHh4Rs3
bqS/alS5j2Ir7pXV/VzZev7wae0X5491mSe1IplYh41Yzx/JLAnNoXkSYdev
X9fp8kPmcaap2tjYKL91zc3NlV345OSkLN/zbnd3t/7Cy8+VXXVh/kRF97mc
rmgx5F+zIvlhKJq8a76mAFla6EdkNy7EVtSzj2LL+zLzpH8/V7Zef+Oadorz
9DroXLt22dbh1IpErIci1vNEjvOSlfKFNjU16cG/r6+vcZ7+kHkQaNJpISse
67KBsslR70puSvJWKtblBMk+XzI7WQrQ0dEhq5BTCPnBlEdjXc9n9AvSmYXM
qdMXLVok/w2cmUisy5zyln5QZjZfq/xX/pWNMjP7T2zgZ2LL/7Kvv6d8P1e2
Zmdnm9c87el10P/Yp5dtG27fciC1ItlPcEttpdWPWM8NOdprXriZJTU7zYXM
Y11pUSsb6xJ/GnP+2TQNy9wPkqQSrPqzZLrsW9ntdp5K6MsUWVHgNEPWG3Ve
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
ZcuXL9v2vc6BieU9I63dJ5eu33N+fGJubi7rMn6IWAeA/JFMX7RokRzh+/r6
pKp+5cqVjo4O+W9TU1NUshPrHu+8PXl851evDnxi6tjid0/d++Zzd+3ofFAC
vWvfFX21bDq6q3/w9u3bWZeUWAeAHNJ6+vDwsD1Rkz0w0SDWo9y8efOFXUve
G258f+Q+85L/9q57wMS6vJo3DJ0ZHcu6sMQ6AOSN1Mfl2C619cB0qbbLdEn8
0E/Vc6z7L5dfHjst1XM70/UlE+1Y/7DO3rU3w61QxDoA5MyNGzf65gWmE+uu
ubm5c6/+uG3jQMumoyt7x0Ivl58+sPHdU/e6sS4V9kCsy2ez3iBiHQDqxdDQ
kHacC323DmNdUntn/8FlTxyRNA8EtH25PHmsy3Ky3iYAqEYNcbIuYO0xneik
zh46Qx3G+sXLVyXT3UAPXC6PaoSfHLzb/UjW2wQA1YjBqyvr1q1bTU1N2jE+
ap56i/WfXbn8SOtXV6342vpvrLf7tLuXy2dnZ59Z80m3qt7/2KcDM6/szb7L
HABUIWK9gm7cuKGZHtX8rjY7Uith+qQCfuLJ+6aOLZZ0lkr38NZ7WjseD411
vVx+4oXD33r0T7XOLh9569A9veseWLpxf2DmZVvD7zIAgDpHrIfyX5gYGhpy
P2La3v2ZXqin2vo7b0++3Pe5QO37w2QPq7Pr5XKpsC9ZsbVz7do1bV9Z0/5Q
25onJO7dOdu3HMh64wCgGsXGen1edm/2unDhQmD+K1eumEFpYhdeP7H+2uhz
UkN3G9Ulr0Mr7PqpM6NjLZuOei7Ey1nB8eFz2W4aAFSn2Fjnhp1YkvJ6nuPG
faj6ifXjA12BsWX0JTVxN6zN5fK5ubm+Zw+GJrvU05s3DO3Zd+TmzZvZbhoA
VCdivUx6i3ryTC/UU6yffWHP1LHFgUyXKevWPOJGtn25XJL9/PhES9deqZjr
Te7y7/KekbaNAwdPjFbDyLEAUJ2I9XLcunWrsbHRM05sqPqJ9Xfenvz+U/cH
Yv2lnsVtWwa5XA4AC4FYL4dpfg/FKHPi5e8deuXp3/eEl38l0ztWr3IHpeFy
OQBUBLFeDol1T8+6qO5zdRXrYmpq6sWD27e0N7Uv+8sVTx4KZDqXywFggTQw
xnUqQmPdf0tdDm5D4HI5AKSMWE9HVKyz8wEAFUSypINYBwCkgGRJR2ys+5vf
2fkAgCSI9XQkifXYTozpFxsAUFuI9XQQ6wCAFBDr6Qh9dltNx3ruu/EDQC0i
1tORv9p64DcntvxZlxcA6gKxng5iPevyAkBdoCk1HcR61uUFAKBiiPWsywsA
QMUQ61mXFwCAiiHWsy4vAAAVQ6xnXV4AAComf2PCE+sAgLpFrGddXgAAKiY0
1mtaTZ+TAABQDmI96/ICAFAxxHrW5QUAoGKI9azLCwBAxYQ+wa2mEesAgLqV
mzQ3eJoAAKBu5S/WAQCoW8Q6AAC5QawDAJAbxDoAALlBrAMAkBvEOgAAuUGs
AwCQG8Q6AAC5QawDAJAbxDoAALlBrAMAkBvEOgAAuZG/J7gBAAAAAAAAAAAA
QHL/Hxo8qas=
    "], {{0, 241.2}, {401.4, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->120.],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
    Automatic],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->270,
  ImageSizeRaw->{401.4, 241.2},
  PlotRange->{{0, 401.4}, {0, 241.2}}]], "Text",
 CellChangeTimes->{{3.8506482474912615`*^9, 3.8506482505625377`*^9}},
 CellLabel->
  "Out[142]=",ExpressionUUID->"cdb0cc07-c1ca-44ba-9cc9-9abac9966964"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Because", " ", "we", " ", "allow", " ", "different", " ", "errors", " ", 
     "for", " ", "each", " ", "measurement"}], ",", " ", 
    RowBox[{
    "large", " ", "outliers", " ", "can", " ", "be", " ", "handled"}]}], " ", 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"coords", ",", "distMatrix"}], "}"}], "=", 
     RowBox[{"exampleData", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"20", ",", "30"}], "}"}], ",", "0.1"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"distMatrix", "=", 
     RowBox[{"ReplacePart", "[", 
      RowBox[{"distMatrix", ",", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"1", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"2", ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"3", ",", "1"}], "}"}]}], "}"}], "->", "100."}]}], "]"}]}],
     ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"coordsSDP", "=", 
     RowBox[{"sdp", "[", "distMatrix", "]"}]}], ";"}], "\n", 
   RowBox[{"analyzeMDS", "[", 
    RowBox[{"coords", ",", "coordsSDP", ",", 
     RowBox[{"LegendLabel", "->", "\"\<SDP\>\""}]}], "]"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.849983674542453*^9, 3.849983695119182*^9}, 
   3.8499841350414553`*^9, 3.8499841940171413`*^9, {3.8499865458549623`*^9, 
   3.8499865483208942`*^9}, 3.8499869114609966`*^9, 3.8499869537623715`*^9, {
   3.850245685701174*^9, 3.850245686748889*^9}, {3.850245731665346*^9, 
   3.850245739896638*^9}, 3.8502672867467537`*^9, {3.850267335290061*^9, 
   3.850267371918764*^9}, 3.850648256794679*^9, {3.8517862560736637`*^9, 
   3.8517862793812203`*^9}, {3.851786366768617*^9, 3.8517863925480027`*^9}, {
   3.8517865273016434`*^9, 3.851786539825933*^9}, {3.851786686305313*^9, 
   3.8517866864307833`*^9}},
 CellLabel->"In[47]:=",ExpressionUUID->"d54f72f0-2011-495f-86f2-f76e9aebc188"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
qJgi1WJ3r+6p5BTNaUMhX5NW1eT7lb9PKTHTP5aU2c9dHF20eVjE7df64m2n
vn/xB1GRlKF1aaf/6//519B6Foh/36gqFWpda7/y/yLZkYyYIeBUlj4lSC21
biY+xbkJB0ZR5a6uk7vkHqUl76qhaDDtlNY0mLufYMwu9z2dtidn6exrdya8
/j1rf0KpE+q0BOQqcnVNnudcIzK9LRvi9GNoIj3VzpJSUphpFKs95epaJmbI
XsvK1bopahOJOTdwH9bT/UXq0bqWT+pLJzKCVkTF6fZB+frcg+Vf4uhpUbaI
O6oTfnxwtnwqzfmtvQNRkcS/86jWL7y6UJ3uaj2RTFWbPGld/8YyovWSsM/V
7kq5I9mtP7klah245llJklpqXe8tMcVkUP8KpvDljdrBjidOMPnKTBpEImI9
lYVqXbwg36Ydg37FtmVUgnZdTk0UMy9yUYnfvNfIo3xkBCch5S9QUuvWQ6LQ
kEmlRPupTFvPVM9MOZixFfssKSv3oClSc0S/EXten35rgQqzR+s6GaNomTQI
+tW7DXP3uygbkfWdHvjdY+3bzzy77EG3qd73xNfutOV3j63d0ldq5Ptfe72l
e0hP11dH78V7v/qwJP5f/tr/+Fu/fU+pN5CMkA+ty9+VGbZLZE5vimhzwL1v
VD6pKXVqqXVTxytp8EILP3CK8YgxUcxg5ogJaT7SbzOgNlWeEbeeHjBOzEaQ
2tCcW7Tvwq5yBA4WHcVo8ra+S0qJfhqYTh/oCQnVeiFCJYGD+ldh36i1zAO3
bs//mtYfEl+EWKdE1TMT1PreAyeW9p5X57ZtHBSza5tdhP7x/nt7Vz20cO0e
+UjCvLjnSBnxv/3u5ba1/Qt6jkkMUn94tPMlSfn/9qX7Xx06snfv3vrVeg6e
0qX/rfIfql2jda0/uQHKrdutANd7vgopaT1+iZkuYvcjuys4ZrBCtIC0FWka
sIE0m/ukOk6uFVhAHScv2ua1j9gjAm740L8u09r1jJNqHj2aKyklWl9ykyGR
mMCVaF2nOpio5FdNTHyta5z13m9WVUx/YyKxfXDlqjjXtKbvyHflyhVtD69o
n9e2YpP2z8tr0ebhkbPvVH45+WMzVVC3Elgv1LXNDTpbQ9/nQH8uRiV1PaiX
itbjT0iI8kVhpo1s5BUzmCdk1Ix397jpspaDpdZPAm1eM+0k9DYV9V9TtGrk
13qpKYnzz1uJ1u006NSI8rSeVFM0f5hpJEnZcHJysmXFC3Y/ufuSVnb7xoEb
N24kckUDWs8OudR6oHu2Tqml1s3OafH/Kz2+toUbM5gnZNS3Gap7yYiZ+iU3
zDgTjHUEWWeF2WgkoUu0ov5riv43+bVeakpqoHU5XW2uVwm9daN1m6bScXui
KuHkyPnW9Yc8Wpfm/JHhswleUUHr2SFBrUtF8e13L/cPHtvaOzB09LS8T7xC
GAdt3cg9sK6b6oWaL3DT/o34dxjjC1edoVr3BysU03rRTngb+RtQucdZOiQh
zTa5Np4NYaL+a4rOVPFrvdSU6PHQrepMrivRulb27GF9tF6UmP+2Q2/+5z+d
97j+YSe7tH96enrny/tCzS7t9JbuoR27D05NTSV4RQWtZ4dEtK5bELet7Ze/
JZ1KsXjbKakTLly949zF0aJbECeItncSXAeaIjXWevzhdS1bM5vLna9oz2OM
GaxQrBO+yRlSccfW7QByq9ROfv+SPa0Ehv61mKEcd9zT0wnvH0fW8feoqkip
KdEKT2AZiIYvOmMhzkF3JKs8rVd169rUMZWuUB74/T8Jdfo9zb8nn8rPamzX
I7dcufG2du0yc9vkp9yT5Ra97+iIf+dYe4VUKP4T0XoWqFzrugXxok0HdWFF
4CWiL7oFcVLoXS4fTi+ksXmsWR/hudVcmEHfG6248dg9xjGDRQnIVAwC09rd
xn7A4EXnpxWK7ZcSNeUg9L9GvVz0ttYU0SVSRkpMiQVO1K1sAmHcZASy4C5w
c2tTWhOLr3X97up9OMyPlEmLharcvFoeWxv4x9yx/6I6XT4Vv6ed/CA6j8JD
1IloPTtUrnXdgtgzlFN0C+LKMU2zPG1DXXutmwk8oY9p0zagrRXTirS1onYr
I5i75M1gdn2Rb1k/HRsbMw1Y3VvbXeDmXiKA9u14/vjN+u5AVcft/dY9WuNs
5qPnJpUS/bPX49pjr0Ph7om6R7RJs54oP2/NMDSzU42pOWhKtIQ1jJSwLqjX
jNtToEMXsyv6pTTUunX/v604/dd/419JmD+d93jZ/6fZBK1nhwq1/s9bEFse
f3zrkY7ly1a0z1u9ZrWutmjt2pVssm2MjBIfpUqX2mtdGbq7E68+iVVl0TGD
+3di9kCQP6Shu/u/uXf4osGGrF3OQh9IGtjPTeIxG28OzWzcamoFegndyy7q
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
    "], {{0, 241.2}, {401.4, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->120.],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
    Automatic],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->270,
  ImageSizeRaw->{401.4, 241.2},
  PlotRange->{{0, 401.4}, {0, 241.2}}]], "Text",
 CellChangeTimes->{{3.8502673920988283`*^9, 3.850267395506971*^9}},
 CellLabel->
  "Out[1352]=",ExpressionUUID->"66c43fc9-2fb5-49fe-a7ac-af87b0d3138a"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"(*", " ", 
   RowBox[{"Example", ":", " ", 
    RowBox[{
    "Can", " ", "handle", " ", "Missing", " ", "values", " ", "as", " ", 
     "well", " ", "as", " ", 
     RowBox[{"GreaterThan", "/", "LessThan"}], " ", 
     RowBox[{"bounds", ".", " ", "Final"}], " ", "MDS", " ", "improves", " ", 
     "the", " ", "results"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"coords", ",", "distMatrix"}], "}"}], "=", 
     RowBox[{"exampleData", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"10", ",", "15"}], "}"}], ",", "0.1", ",", 
       RowBox[{"\"\<FractionMissing\>\"", "->", "0.2"}], ",", 
       RowBox[{"\"\<FractionGreaterThan\>\"", "->", "0.3"}], ",", 
       RowBox[{"\"\<FractionLessThan\>\"", "->", "0.3"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"Grid", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"(", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Echo", "[", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"coordsSDP", "=", 
               RowBox[{"sdp", "[", 
                RowBox[{"distMatrix", ",", 
                 RowBox[{"Sequence", "@@", "#"}]}], "]"}]}], ";"}], "//", 
             "Timing"}], ",", "\"\<Timing:\>\"", ",", "First"}], "]"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"analyzeMDS", "[", 
           RowBox[{"coords", ",", "coordsSDP", ",", 
            RowBox[{"\"\<AddToPlotLabel\>\"", "\[Rule]", 
             RowBox[{
              RowBox[{"ToString", "@", 
               RowBox[{"Column", "@", "#"}]}], "<>", "\"\<\\n\>\""}]}], ",", 
            RowBox[{"\"\<ShowLegend\>\"", "\[Rule]", "False"}]}], "]"}]}], 
         "\[IndentingNewLine]", ")"}], "&"}], "/@", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"\"\<AddFinalMDS\>\"", "\[Rule]", "False"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"\"\<AddFinalMDS\>\"", "\[Rule]", "True"}], "}"}]}], 
        "}"}]}], "}"}], ",", 
     RowBox[{"Spacings", "\[Rule]", "3"}]}], "]"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.8523133606175566`*^9, 3.8523133776684356`*^9}},
 CellLabel->"In[48]:=",ExpressionUUID->"705df25b-cf98-45e9-b74f-56a9cd70f507"],

Cell[TextData[{
 StyleBox["Timing,",
  FontColor->RGBColor[0.92, 0.43, 0]],
 " SDP without final MDS:  0.1 sec\n",
 StyleBox["Timing,",
  FontColor->RGBColor[0.92, 0.43, 0]],
 " SDP with final MDS:       10 sec"
}], "Text",
 CellChangeTimes->{{3.849876508816414*^9, 3.8498765627369704`*^9}, 
   3.849876730965323*^9, {3.849876931797871*^9, 3.8498769318593993`*^9}, {
   3.850245609403616*^9, 3.8502456351214595`*^9}, {3.8502482059535046`*^9, 
   3.850248236507482*^9}, 3.8506482756895523`*^9, 3.8506491437561607`*^9, {
   3.852313389291951*^9, 
   3.852313389329856*^9}},ExpressionUUID->"aecf9a51-3b3a-47d3-ab95-\
6fdbaf64533a"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
H5m0TUxUv6LiVouA8Em5MPxmmRveB5DdOerqhFGN/ePpbcOLi4veH9pMyqZ8
nNaOItE+YyfnqPyEN9ZIuufCwoJ8EJU3QlvnVpn6B1+Q/8ovg3tEh2iRlU7b
dBbmCRulOD/TsrGM61U1pbKl5+6N4YtXbfmY+2ACJbz42zB/X0/1cyuSWgTE
wbI7l9v+x9fa//1rmtq/sLnctveHk3r1REMqNTrTPnyuZdNw49qn16xe2bH+
ucZUkZOuS+etbU7Pf/mV98e1Goz+v6SqpAm5e8rnz5+Mn6rrGFzTPSbrv6ze
Msk/6tOHZT0fHN4f0NYD72iR8Xfr1i11UhH5GfL1xSanzv9184CrVLV6w57j
pybDHOQSqepuCS/+rpCqXImwFgGRU6nqew/8qaobEq8CTVVLd64auerp5nXP
/N+nt3/7i6P3L7xRc21sxfTI8oZV3127aY8+UjV2j1yYec+XB3WCVIXguuf8
l191bB6SAGW1VV/+9EzLRrc7u4aAFhl/+vO4RpJ82zf+0PlOCHLLdannw9+G
QKrSo/g7R6pyLvJaBERL1vzedf/FyRdVfqWqG9c/3tn+nfmT3/nt5Hf1k8Sr
4Y5vPdd7exf91h1napvT7394NczOS6pCQN3zF7/8VVMqW/JjZ/vwOVntYxWs
aJHxp3+NDFfNCM3CwsIzLRudBCup7Y0dffKOCH+QpCo9ir9zIacqw17iPX3b
J14/E6u+YCUOtQiIlnbM1Pce+NOFD54POlXJm27Xpse/OHq/IVJpwWrdk99+
ujWT2bF34evfeH84V0hVCKJ7Li4udm3dJR8mnWzGT43OPNXUFZNdAWmR8Ref
1yifz7dv/OHqDXusthg8173j6Scefvqxmr3b10+fOx3+956kKj2Kv3OhpSp5
Ex04dMywl7g0hfr04fr2TP/gC3HeWyA+tQiIinY6ZSeRypdU9fabJ6aG7i0a
qdQ0+9J9L+7ORvKpklSFILrn8VOT9Rv3ujrkxO2lBIJAiwzOzMzMWmfsL8s+
Pz8ft9fo9bfOPtOyUX0m1PblXtO+/bnVf3F64D79Lt+bWx75aPaS/dzkCTpc
UE6upEaq0qP4OxdOqvrZZz9v7Oiz30v8sdrWq59cD3QY5YlhLQKc8KvLyEem
VCrlKlL5kqpOHMxIS7VJVdJzB3oanM/Q4dJwUg9JVfC9e+bz+aZU1tUZ0uTG
da290W6TpEUGSvt4X5JNLVJnsIz/a3Tj+scvdj1QdJfv/Ztq5K8299VqcklO
3rOkKj2Kv3MhpCrJStIpzOfsKtIdOgbjFqwqpRYBZr50mVu3bmkfmYTDSOVL
qpLEJM3UJlXJtGX9KuczdLg0ljk4LTypCr53z/fe/8DVF1VqWtM9Njl13q8x
uEWLDJr376q0q7ovi/fxbiV3+c6sf9jm7nxXFZyixd95P3XSUquG733BQN4m
da29Dq+mLcHqsdrW+OwKWCm1CCjKe5eROeg/Mi27cw7A0FLVgZEtVh1WTfLX
/bu6nM/Q4dJwUg9JVfC9ex44dMzVBdq0o6t6t+3wawyu0CLjT/8a2e8iGDkn
u3yHNhhSlZ5VqnL4YYBU5aM9Y6/Upw87bxDSUwaH9wc0GFcqqBYBQTBEqiU3
VdSXVHXxwtnpkeX2TfbMyWjKBakKvnfPzvRAyZ06im6NbOvc6tcYnKNFxt/V
q1fVCySVPP7pwMku36ENhlSlR6pyLtBUlcvlmrqG3PaIJ1uH5ubmghiPc5VV
iwDfaded0W+FDjlVFQqFzPqHzfvYax12Z9ejCwsL3h+oDKQq+N49m1q73LZL
NTW0pPwag0O0yPiT+qnV8Ip4jZzs8h3aYEhVeqQq5wJNVa+ePL2me8xtg2js
Hz86/loQ43Go4moR4DupCebUEHKqEh/NXhrb8pC51cpvTmQfnD532pdHKQOp
Cr53z7bOra5OVaHtAdi+8Yd+jcEJWmRF0M7amkqlblqbn5+PeqT/zsku36EN
hlSlR6pyLtBU1dO3vYL2Z9BUXC0C/KXt21NTU6Nf5+U3//hau34KOlUt3QlW
2zpWTo8sVyfalZ/XxlaM9jzy6ZWLEV6ph1QF37tndueow2OQ9ZPcRe7o1xgc
jZMWGXuSfJc5E9wBIG452eU7tMGQqvRIVc4F+rYqey/x5o50EONxohJrEeAv
/Un/7IWQquKJVAXfG8E7706XsXdHffpwmOcApEVWBH9PMx4OJ7t8hzYYUpUe
qcq5QN9W5e3PEMle4ppKrEWAvxy+BeyLatRPIlikKvjeCPL5/DMtG91uhGxK
ZcM8upAWWREkodh8jRjbrxTjs8v3rVu31PKJz1mpI0Sqci7Qt1V5+zOkRmd6
+rYHMR4nKrQWAT5y+BZI8kY8rVBI8416LCHJ3C3q4UQviEYw8fqZ1Rv2OG+X
a7rHDhw65uMASqJFIlDx3OU74UhVMfHWmUlXp1VXU3N24tArx6MeOwDg90hS
IZDPjetSzzvcGik3kxvzURNVJp/PX5g8vm+oLdtdKz//4dgB+U3Ug0o0UlVM
5HK5VU29blNVXceg3DHqsQMAfo9UFQ5pf7XN6ZLBSm7wRGPP1U+uRz1eAFWu
6I4KpKpIZHeOurpYfGP/eHrbMBvfACBWSFWhmZubW93QYbOnh/xJkheRCkAI
+K4qPgqFwhMNKYdnAuzeNyudYv7Lr6IeNQDgLqSqMC0uLu4ePVi7rl8ClGqg
0h/lH4394/XtmcHh/RxEDyAcpKpYufrJ9bqOwZLBSlpGY/fIhZn3oh4vAMDI
JlU5P2kk7dWVXC736snTPX3bG1pSzR3pzvTAoVeOz83NsTsHgNCQquJGgtVj
ta2N/eNWkap1x5na5vT7H16lWQBADNmnKtorAFQlq1TFxrQI5fP59LbhVU29
kq30+zM0Zycau0cyO/YufP2bqMcIACiOVAUACcTu37E1Nzf3k/FT+v0Z9o0d
Zn8GAIg5UlWlyOfzH/707P5dXQM9DScOZqbPneYgLABlI1UBAOAjUlVFuHH9
493pp6Z216iLqF4bWzE9snxzyyMfzV6KemgAKhKpCgAAH5Gq4k8i1YtdD8yf
/M5vJ7+rnyRe7d9UI3+NeoAAKg+pCgAAH+kv/mjmPFURrAJSKBR2bXr8i6P3
GyKVFqwy6x+OeowAKg+pCgAAH+lT1anLv9ZPrlKV3D7aJ1Kt3n7zxNTQvUUj
lZpmX7ov6jECqDykKgAAfESqirkTBzPXxlbYpKqFN2qiHiOAykOqAgDAR6Sq
mBvoaZDcZJOqZIp6jAAqD6kKAAAfkapi7sDIFquDqtQkf416jAAqD6kqfFxk
GQCqGKkq5i5eODs9spzjqgD4S5+qXH3aJwK4pV1t0FVXjXrUAAB3SFUxVygU
MusfNp9WXTuoamfXo1GPEUDlMaQqQ/13O0X4RGJOf7VBUhUAVLHM3UhVMfTR
7KWxLQ+Zj66S35zIPjh97nTUAwRQeUhVITBcbZBUBQBVjO+qKoIEq20dK6dH
ln9x9H4JU/Lz2tiK0Z5HPr1ycXFxMerRISjsgoXgkKqCZr7aIKkKAKqYfapy
jq5q4Grp8YEZRTn/DCZT1INFhSFVBc18tUFSFQBUMZtURVf1wtXnYZYtiiJV
ITikqqCZrzZIqgIqBdvDY2JhYeG99z/YMfJSZ3qgrXOr/Dxw6NilS5cKhULU
QyuCVBUQUhW8I1UhODYH1VL/fWG+2iCpCqgUfCqO3OLi4vFTk+tSzzduebl9
+FxqdKZ736z8bM5OrOkeq2vtnZw6H/UYjUhVASFVwTtSFYLDd1VBM19tkFQF
VAqqYrTmv/xK8tTTf/OCJKnNf3u16LR6w55n23rm5uaiHuzvkaoCQqqCd6Qq
BIdUFTTz1QZJVUCloCpG6Be//FVda29zdsIqT2lT+/C52uZ0LpeLesj/jlQV
EFIVvCNVITikqqCZrzboKlVxBAcQIapiVBYXF9elnm/dcaZkpFJTanTmqaau
mBxmRaoKCKkK3pGqEBxSVQgMVxt0lapY/kCEqIpR2TP2ypruMYeRSk316cO7
Rw9GPfDbSFUBIVXBO1IVgkOqCof+aoOkKqBSUBUjkcvlapvTNsdSWU2rmnqj
HvttpKqAkKpQBvOOPc7XInYECt/CwsI7705nd462dW6Vqadv+8TrZ+Kzg7c9
UlX4SFVApaAqRmJy6rzbL6rU1Ng/HvXYbyNVBYRUhTIY3oZlrEVRP4OkyOfz
Bw4dq+sYlPrfPnyue9+sOuNrffpwfXumf/CFmOzjbYNUFT5SFVApqIqRkO4p
LbWMVCUtOOqx30aqCgipCmUgVVWEn33288aOPglQVnspyJ8eq229+sn1qEdq
h1QVPlcnoGD5AxHyXhXjv20thjrTA6nRGVIVVd2AVIUykKriT7JSUypbsuxL
ha/rGIxzsCJVxQfLH4gb7+/KeF6mNubaOreWcVCVmqIe+22kqoCQqlAGUlXM
FQoFaZQO90+Q1vBYbWtsN1eSquKD5Q/Ejfd35eZYXqY25rI7R8vbAzA1OhP1
2G/TN1b4iFSFMpCqYm7P2Cv16cPO63xzdmJweH/Uoy6OVBUfLH8gbnxJVZvj
d5namHvn3WlXTVa/433UY7+NVBUQf/efj/rZICR8uIozaYtNXUNuS/2TrUPx
3FBJqooPlj8QN36lqs0xu0xtzP3rv/7rE6trG9c+vWb1yo71zzWmtjs8zKqu
YzDqsd9GqgoBHRMOsarE2asnT5dxxtfG/vGj469FPfYiSFXxwfIH4sbHVLU5
TpepjbMb1z/enX7qre0rvjh6/8IbNdfGVkyPLG9Y9d21m/aU/KIqJruFZO4W
9XCqEx0TDrGqxFlPn9ONZoajq9o6t0Y99iJIVfHB8gfixvu70vCFS0wuUxtb
Eqle7Hpg/uR3fjv5Xf0k8Wq441vP9Vpu0mwfPtfY0ZfP56N+BreRpEJAx4RD
3leVK1eusJtBQMo746ukquaOdNRjL4JUFR8sfyBuvL8rDV+4fP/ZzVE/p/iS
zy27Nj0uS8wQqbRg1VZbYxWpatf1x+d0u6SqENAx4ZD3VWVN99izbT2czTUI
ZZ/xtaElFfXYi6D4xwc9Aogb7+9K0xcuK25c/zjqpxVTb795Ymro3qKRSk2z
L91n3mK5esOexo6++ESqJRprKOiYcMiXHbml1DzRtju9bTgmX4hXjfLO+Joa
nenp2x712Iug+McHPQKIG39TlQpWmfUPR/20YurEwcy1sRU2qUqWnhambu/y
t+Xl+vbMi3tfjtvOOTTWENAx4ZCPh8c29o8/07KRYOWjt85MlnHG1+bsxKFX
jkc99iIo/vFBjwDixvdUpb5wifppxdRAT4PkJptUJVNDS0qmts6t2Z2jk1Pn
4/nxhsYaAldnWS8q6meAkPh70qHWHWc60wNRP6fqkcvlVjX1uk1VdR2D8bxS
CcU/PkhVQNwEkaokOET9tGLqwMgWq4Oq1CR/DX9UhULh5s2bt27dcn4XGisQ
H/6mKpn+unmAY6x8lN052pydcB6pGvvH09uGFxcXox54EZwANj5IVUDcBJGq
ZIr6acXUxQtnp0eW2x9XFf6o1q5dK6vBkSNHnN+FZgof8R2cR76nqu59s40d
fVE/repRKBSeaEg5PBOgLPza5vT8l19FPeriKP7xQaoC4sb7XkYx+cKlIkhv
zax/2Hxade07vp1dj4Y8pGw2q15HUhWiIqvfN/885HAiVZn5nqpkWr1hT9RP
q6pc/eR6XcdgyWB1O892j1yYeS/q8Vqi+McHqQqoIC/ufbnoMbZ1qeEYfuFS
KT6avTS25SHz0VXymxPZB6fPnQ5tJBLxtEhFqkKESFUeBZGq2ofPFX2sfD7/
4U/P7t/VNdDTcOJgRkpW3M6lE1sSrB6rbW3sH7eKVK07ztQ2p9//8Go89/1T
KP7xQaoCKogU9qeausynhE2NzrTV1sTqC5fKIsFqW8dKSabqUl/y89rYitGe
Rz69cjG0Znrz5s2amhr9d46kKkSFVOVREKmqe9+s+YFuXP94d/qpqd01+ssU
bm55RGpa+M+6EkkmTW8bXtXUK9lKfW8ly1n+0ZydaOweyezYu/D1b6IeYwkU
//ggVQGVJZfL1TanzcFq7aY9O9pr4vCFC9yan59XB1Ip99xzD6kK0SJVeRRE
qpLJ8CgSqV7sesC8PU3K/v5NNVym0Lm5ubmfjJ/q6dve0JJq7kh3pgf2jR2W
X8b5KyoNxR8Ayial/tm2ntUb9piDVUvtg9F+4YIySHrSIlU2m7169SqpCtEi
VXkURKpKjc7oH6JQKOza9LjVKUy5TGFyUPwBwAtJSa+ePP2D7sE13WPa91Yx
v0wtrKhUVVNTc/PmzaU7uwKSqhAtUpVHIRxX9fabJ6aG7uVwWlD8AcC7fD5/
5cqV7M7RirhMLaxcvXp1Zub3W6FJVYgcqcqjMs/fqmNOVWu6x/QPceJg5trY
CptUxWUKKxEXKwQAwC+kKkSOVBWcxcXFZ1o2du+bdX4JWrUrQlMqq5/PQE+D
+UBaLlNY6bhYIQAAfiFVIXKkqkBNTp3/6+YBV6lq9YY9x09N6mdyYGSL1UFV
XKawQnGxQlQHV9/LRz1YANWMVIXIkaqC1r7xh83ZCYeRSm65LvW84aRDFy+c
5TKFVYOLFaKaOO8gtA8AgSo7VRUV3DhRxUhVQVtYWHimZaOTYNW640xjR98v
fvkrwxzkc3hm/cNcprAKcLFCVBlSFQAvbjrmZFY0VkSLVBWCfD7fvvGH5mtk
6I+lqt+4t2vrLnOkUj6avTS25SEuU1i5uFghqhKpCoAXPu5CTKpC5EhVoXn9
rbPPtGw0XCPj9vdTW16ubU6/evK0/dUGJVht61jJZQorFBcrRFUiVQHwglSF
auJ8fXa4VsOG+RoZO0Zeeu/9D7hGRtXjYoWoSqQqAF6wByAAwBUuVoiqRKoC
EBM0VgBIIIo/qgOpCkBM0FgBIIEo/qgOpCoAMUFjBYAEovijOpCqAMQEjRUA
EoiLFaI6kKoAxASpCgAqhToNkS/nzKT4ozqQqgDEhLoupNCfG6okGisABC2f
z3/407P7d3UN9DScOJiZPnfaeZgq+TGSVIXqQKoCUNForAAQqBvXP96dfmpq
d4265vK1sRXTI8tJVYABqQpARaOxAkBwJFK92PXA/Mnv/Hbyu/pJgtWWhtvZ
6h9fa7efSFVICOebGkhVAGKIxgoAASkUCrs2Pf7F0fsNkUpNC2/U+LJxnlQF
AEDkaKwAEJC33zwxNXRv0UilJlIVAADVgcYKAAE5cTBzbWwFqQoAgKpHYwWA
gAz0NCy8UUOqAgCg6tFYASAgB0a2WB1URaoCAKCaZO4W9XAAoHpcvHB2emR5
0KmKixUCABLO1UlEAzqzKI0VAAJSKBQy6x82n1bd33MAlofiDwCoGtIlT13+
tZfJ+xhorAAQnI9mL41tech8dJX85kT2QVIVAADekaoAoOpJsNrWsXJ6ZPkX
R++XMCU/r42tGO155NMrF0lVAAB45yVV+bWvII0VAIKWz+cvTB7fN9SW7a6V
n/9w7ID8ZulOFyBVAQDgkcdU5bAX27djGisARIVUBQCAd6QqAEAkKP4AgKpB
qgIARILiDwCoGqQqAEAkKP4AgKpBqgIARILiDwCoGqQqAEAkMneLejgAAJSP
VAUAiATFHwBQNUhVAJAcbq8z+P+3d7+vcdx3Asf7L+zD4hpy6KClDxIoIpQe
pSbYFjYKKLFAtoiiJDYKa9lxYpW6de0oB/ERuW6d4mvcC22ISyMlpTVJi+qU
ci1UIPJMotAHoqhwenr71I91c7cw59i7q+9oZ3e+M/N6sYRgWcvMGL4fvbXz
I/zJg/tg8QegMlQVQH30s+a3XzlujMUfgMpQVQD1oaoAYBBUFUB9qCoAGARV
BVAfqgoABkFVAdSHqgKAQeizqnK5c5RHlgAMh6oCgEGIYcIarADDEcOan7L4
A1AZMUxYgxVgOGJY81MWfwAqI4YJa7BCNRT1MFnCxbDmpyz+AFRGDBPWYIVq
yHQHm6I3tqZiWPNTFn8AKiOGCWuwQjWoqvjFsOanLP4A0cp6VzonpcQwYQ1W
qAZVFb8Y1vyUxR8gWlHNi1KI4YgZrFANqip+Maz5KYs/QLSimhelEMMRM1ih
GlRV/GJY81MWf4BoRTUvSiGGI2awQjWoqnhkOvVdVQHwkBgaoVxCjtigL0wz
WKEaVFU8Mv1bqCoAHqKqsgqsqoH+pGSwQjWoqnioKgD6oaqyUlVAXlRVPMpS
VQ/K8Z0B6JOqykpVAXlRVfEoS1Xl+G4A5EhVZaWqgLyoqnioKgD6oaqyUlVA
XlRVPFQVAP1QVVmpKiAvqioepfi3sPgDREtVZaWqgLyU4if5msj0bzHQZ2f0
YPEHiJaqyiqSqnIbKIAcDegMwHw30oIPEC1VlVUkVZX7fgEVkOkR5EP4bKVE
VBUA/VBVWakqIFqW9H1TVQD0wwjOSlUB0bKk75uqAqAfRnBWqgqIliV931QV
AP0wgrNSVUC0LOn7lunqM1UFMDRluUDYCM5KVQHRsqTnK7bjafEHaijTz9Wq
qkRiOGIGa3nt7Ox8/Kv3r7566uzM0ZtvzC3fud1qtYreKKojhgWqSmI7nhZ/
oIZUFYNjsJbUHz/97Wuz33rvtZHPrj+29c7IvcWDywsHnn/6iU/uflT0plER
lvR8xXY8Lf5ADakqBsdgLaMkqb5z6subb//Tf/3snx98JXl19bmR5KtFbyBV
YEnPV2zH0+IP1FBZqooyMlhLp9Vqvfrc1z+7/thDSZWG1dyzjxe9jVRBbBVQ
drEdT4s/UEOqisExWEvn5z+9+d75L3ZMqvbr7ve+VPQ2UgWxVUDZxXY8Lf5A
DakqBsdgLZ2bb8zdWzzYo6q23hkpehupgtgqoOxiO54Wf6CGVBWDY7CWztmZ
o0k39aiq5FX0NlIFsVVA2cV2PC3+QA2pKgbHYC2d1xde6HZRVfuVfLXobaQK
YquAsovteM59Xr5vDhAnVcXgGKal8+EH7y8vHHBdFYMWWwWUXWzH0+IP1JCq
YnAM1tJptVpzzz7+6G3V04uqLpz6WtHbSBXEVgFlF9vxtPgDNaSqGByDtYw+
ufvR4gtfffTqquRPbja/snzndtEbSBXEVgFlF9vxtPgDNaSqGByn1pdUElYv
T44uLxz47PpjSUwl/723ePDSzBN/+N2H9+/fL3rrqILYKqDsYjueFnyghlQV
g2OwAh3FVgFlF9vxtPgDNaSqGByDFegotgoou9iOp8UfqKEvZFT09lImBivQ
UWwVQL4s/sO3s7Pz8a/ev/rqqbMzR2++Mbd853ar1Sp6owDIh8EKdKSqqs3i
P2R//PS3r81+673XRtoXw95bPLi8cOD5p5/45O5HRW8aADkwWAFqyOI/TElS
fefUlx99IkaSV1efG0m+WvQGAtAvg7VYW1tbv/jlcvPCpWdOvpS8Zk6fu/WT
dzc2NoreLqDiLP5D02q1Xn3u659df6zbQwbnnn286G0EYHdlZWVsbCy9qm50
dHRpaSn8VG2DtSg7Ozuvv/mDw5PzT00vnrh4Z/rK3eQ1dWnlyOy1Iyfmzsx/
2/n2wOBY/Ifm5z+9+d75L3ZMqvbr7ve+VPQ2AtTa5uZm0lAd71jSaDRWV1dD
3sRgLcSf/vyXY5Onk4BKSur5f1199JV86clDE6u//7ToLQWqyeI/NDffmLu3
eLBHVW29M1L0NgLUV6vVGhkZaTfU2NjYysrK2tpaUlLNZjNtqyS79nwfg3X4
klY6PtWcurTSsafSVxJchyfnhRUwCBb/oTk7czTpph5VlbyK3kaA+lpaWmqn
U5JRD30pKay0tvZ8H4M1XNZnHHR86kGSw4cnXjxx8U7vpErD6slDE04FBHJn
8R+a1xde6HZRVfuVfLXobQSor0ajkfyUPjLS+bSB9Eqr7e3t3u9jsIbL5UbT
311868jstZCkar/Gm7fmL14teteBqrH4D82HH7y/vHDAdVUAEdrc3GxH09LS
Use/kH6Stba21vutDNZw/VfVxsbG8VPnw5Oq/frmxPn19fWi9x6oFIv/0LRa
rblnH3/0turpRVUXTn2t6G0EqKmkqsbGxhqNxsrKSse/oKoGof+q+uHbt5+a
XsxaVcfO3Lh+48dF7z1QKRb/Yfrk7keLL3z10aurkj+52fzK8p3bRW8gAJ2l
96zY84YVBmu4/qtq5vS5PW9S0fHqqmdOvlT03gOVYvEfsiSsXp4cXV448Nn1
x5KYSv57b/HgpZkn/vC7D+/fv1/01gHQwfb2djupul119SCDNVz/VXVy9uz+
qmp8crbovQcqZe7zit4cAIhOequKbucHPsgwDdd/VT1z8qVuD6jq/Tr69FTR
ew9UisUfAHpIz/0Lua36rsGaRf9V1bxwKfCe6g++pi6tzJw+V/TeA5Vi8QeA
btKkGh0dDXzI0VwXg97UMuq/qv7j3Z9luq16enP1N9/6UdF7D1SKdR4AOtpH
Uu0arFnkcmf1bxx/MWtVHZ6cT76x6L0HKsXiD0CVfCFYjzdJGiq9lipTUu0a
rFnk8hTg5oVL481bmW6rPvvyRXeIAvJl8QegSvqvqs3NzaSk9pdUuwZrFrlU
VfIP9C9HpwLvBDh95e6h8dnNv/6t6F0HqsbiD0CVLAXr+O1JUjUajXZSNZvN
fWyAwRoul6pKrP7+08OT83uGVZJUx6YXPlj5dbF7DVSSxR8A2vpPql2DNYu8
qmr3/8LqyUMTx87c6JZUE6+8e2h89jcfrzr3DxgEi38pbG1t/eKXy80Ll545
+VLymjl97tZP3nWlLUCOWq1WmlQhz6XqxmANl2NVJXZ2dmZfvviN4y8mbdX+
3Gr6yt3kf8abt45NL8y98v2tv/+jqD0F4pes/OkVte0zwJeWltyqqDKSGfH6
mz84PDn/1PTiiYt3kgHRnhFHZq8dOTF3Zv7bWU/4B6Cjqamp9iS9fPlyP+9j
sIbLt6ra1tfX/+3Gv8+cPnf06anxydmTs2evLF5L/tBHVEA3D15O+5BGo7G6
uhryJhb/mP3pz385Nnk6CahuD45PvvTkoYnV339a9JYClNva2lo6Q3tfjbW9
vd37rQzWcIOoKoBMWq3WyMhIe/0fGxtbWVlJJkJSUunDNRJJdu35Phb/aCWt
dHyqGXLt7eHJeWEF0I8Hp2dvybTt/VbdBmvg+/cwgP0umKoCCre0tNReYx+9
nDYprLS29nwfVZWjHCdmUs2HJ148cfFO4H1inzw04VRAgH178Fz63vqpKgXx
EMcEKFz7itqRkZGOX02ngxMVhinH6fDdxbeOzF4Lf6bhePPW/MWrBe47AG2q
KpxjAhRrc3OzHU3dHreRfpK171+psQ95TYeNjY3jp86HJ1X79c2J8+vr68Ue
AQBUVTeZTt6oyTEBipVU1djYWKPR6HbrV1VViLwm5g/fvv3U9GLWqjp25sb1
Gz8u9ggAoKq6SY7Af//n+ZCXqgIikV51u+cNK1RVjvKamDOnz+15k4qOV1c9
c/KlYo8AAKqqm0xVVfTGAuxub2+3k6rbVVcPUlU56mdiZjovItGxqsYnZ4s+
BgB1p6q6UVVAuaS3qgh5NLyqylGfVRU4a9rjpuPHVUefnir6GADUnarqRlUB
JZKe+xdyW/VdVZWrYqtq6tLKzOlzRR8DgLpTValHT7QIH3NtRe8BUFNpUo2O
jgY+vWiui0FvaiUVW1XjzVtvvvWjoo8BQN11m6f1rKr9Tbr0G4veA6CO9pFU
uz6rylWxVXV4cn5jY6PoYwBQdz6rSqkqYGjC707Q402ShkqvpcqUVLuqKlcF
VtWxMzdmX754//79oo8BQN2pqpSqAoam/6ra3NxMSmp/SbWrqnJVVFVNX7l7
aHx2869/K/oAALDPqgr/eaD3L1qjoqqAoVkK1vHbk6RqNBrtNbbZbO5jA1RV
jgqpqiSpjk0vfLDy66L3HoD/te+qCh8BQ96jfVNVQCn0n1S7qipXw6+qiVfe
PTQ++5uPV537BxAJVZVSVUD8Wq1WmlQhz6XqRlXlaJhVNd68dWx6Ye6V72/9
/R9F7zcA/09VpVQVEL+pqal2Ul2+fLmf91FVORpmVV1ZvLa+vu4jKoDYqKqU
qgIit7a2ll6y2vtqrO3t7d5vpapyNMyqKnpfAehMVaUerapwqgoYgvTRVHtK
+qv3W6mqHKkqAFRVqp+xqKqAIUifTqWqoqKqAFBVKVUF1Efvqgr/pL6boe1I
DFQVADWvqkw/JKgqoDL2rCq/ZQrncAGgqsJ/SWgsApWhqnLkcAGwv1PrVZWx
CJSaqgKAHKkqVQXUkKoCgBypKlUF1JCqAoAcqSpVBdSQqgKAHKkqVQXUkKoC
gBzNfV7RmzNsqgqop7yqqvIPscq0g5XZawCyqmFJPUhVAfXU+1dqmaqqGqcu
dONjOwBCqCpVBdRQjp9Vqaqso8FHXQDVo6rCq6rojQXIjaoKNKCqqvZBA6gh
VaWqgBpSVYFUFQAhVJWqAmpIVQVSVQCEUFWqCqghVRVIVQEQQlW5ZBioIVUV
SFUBEKLmVQVQT6oqkKoCIISqAqghVRVIVQEQQlUB1JCqCqSqAAihqgBqSFUF
UlUAhFBVADWkqgKpKgBCqCqAGlJVgVQVACFUFUAN5bX4Vz4QVBUAIVQVQA1Z
/AOpKgBCGKwANWTxDzSgqvIAeoCKMVgBasjiH2gQVQVA9cx9XtGbA8AwWPAD
qSoAQhisADVk8Q+kqgAIYbAC1JDFP5CqAiCEwQpQQ07/DqSqAAhhmALUkMUf
AHJksALUkMUfAHJksALUkMUfAHJksALUkMUfAHJksALUkMUfAHJksALUkMUf
AHJksALUkMUfAHJksALUkMUfAHJksALUkMUfAHJksALUkMUfAHJksALUkMUf
AHJksALUkMUfAHJksALUkMUfAHJksALUkMUfAHI093lFbw4Aw2DBB4AcGawA
AAAAAAAAAAAAlMv/ABiLEbQ=
    "], {{0, 303.}, {569., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->144.],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
    Automatic],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->300,
  ImageSizeRaw->{569., 303.},
  PlotRange->{{0, 569.}, {0, 303.}}]], "Text",
 CellChangeTimes->{{3.852313401649619*^9, 3.85231343035396*^9}},
 CellLabel->
  "Out[362]=",ExpressionUUID->"eae05f48-7a50-4fb3-b068-1e487f4b2a90"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"(*", " ", 
   RowBox[{"===", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"Adrian", "'"}], "s", " ", "antibody"}], "-", 
     RowBox[{"virus", " ", "data"}]}], " ", "==="}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"coords", ",", "distMatrix"}], "}"}], "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Values", "@", "coordsVirusStem"}], ",", 
         RowBox[{"Values", "@", "coordsAbStem"}]}], "}"}], ",", 
       RowBox[{
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"data", "[", 
           RowBox[{"virus", ",", "antibody"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"virus", ",", "labelVirus"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"antibody", ",", "labelAbStem"}], "}"}]}], "]"}], "/.", 
        RowBox[{"val_Real", "\[RuleDelayed]", 
         RowBox[{"Log10", "[", 
          FractionBox["val", 
           SuperscriptBox["10", 
            RowBox[{"-", "10."}]]], "]"}]}]}]}], "}"}]}], ";"}], "*)"}], "\n", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"coords", ",", "distMatrix"}], "}"}], "=", 
    InterpretationBox[
     DynamicModuleBox[{Typeset`open = False}, 
      TemplateBox[{"List", "ListIcon", 
        GridBox[{{
           RowBox[{
             TagBox["\"Head: \"", "IconizedLabel"], "\[InvisibleSpace]", 
             TagBox["List", "IconizedItem"]}]}, {
           RowBox[{
             TagBox["\"Length: \"", "IconizedLabel"], "\[InvisibleSpace]", 
             TagBox["2", "IconizedItem"]}]}, {
           RowBox[{
             TagBox["\"Byte count: \"", "IconizedLabel"], "\[InvisibleSpace]", 
             TagBox["64168", "IconizedItem"]}]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
         "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
        Dynamic[Typeset`open]},
       "IconizedObject"]],
     {{CompressedData["
1:eJwBQQO+/CFib1JlAgAAADMAAAACAAAAsnuudE9s8D/WoJpYsRzEv3kHXfy3
HvQ/JO0pLkra5j+6CvT8YoP1P4CXg2ShTs0/bJvUhTTD9D8/aVexTvDgP9mm
tgujl/U/RneXh++C6j8YswHN5971PxTrRjHyZ+U/afag8uUw8z94zOVEmBLO
Pys/iJJPh/Q/UiG10zC/3z9YEdiS373zPzptlpLAGeI/j2LD0RQI8z+1qFCU
T4HkP0bBklgl3PU/1zj+tMvv8T/Y4yakSPDsP5S37ZJ9BO0/tLpum6ZE7z8q
DhRIxTfTP+upJNkHbvI/WCmsEish1j/ltR0L5GL0P049jIkzou4/eb/HDofG
8j9kJ3g2zR7tPxSHbWV7L/c/W7kpyd038j+A40WGvoXzP6atpA2MDeI/6YlP
tEJK9T/fDj2mStrRP6xItdqbM/g/2pbK+g7j6D91xHmZNwPwP7Mcvst6u9Y/
hU7rxpOV8D/cNLe963PoP7yCAQdkJe8/mLmf7vPd6j9KJqMZGjDxP94L/oDW
sdE/77GollG+8L+GBvOjPmHsP35rOQJ6OPC/DGN1Y4kiwz8QVVuqFN/vv+DY
dFmelqA//+/MIBwX8L+o+VYFwJrQPwMUBdv1kvK/v2ERhPcRzT+IxSL2Pffv
v0Es4y8qwsg/RFoWqCDi7L/1qtCvRvzYv4Jonw2UoPC/kGzHQJFYxD8L7yq1
PaHxv0KXhUu3BdM/uePL9kg0879bkWxvDmHSP6uV0DmO3vG/LIwv/w+u2z+M
qn/Iexfzv0ajo3woDNM/ZLqUzhfL7r93Fmxfos7Wv7kizqoJpvK/xYo5ok2u
6D8/CA27MFn4vyChGY6yne0/PVdA1AXO9b8H4xgvX1j3P/FXop/BvfK/AwZb
3Jfu9T8V7fTCbnryvy90+k5Mz/I/koEacBuc87+g6bID3wXxP14xS8glCfO/
U2yfVNLM3T/kfQfSOnXrv1LHNry5s/Q/7AjtL06g8r/49cQ8neLgPz6DoPkX
CPS/s77IO/og9z/5HVONQGLxv6zklHdqje8/gAkxhrq77b+VeORS5ivYP3E8
Xe8hHO6/eDtOO84a7j9sKLB5L6bzv6+YcK1Wufo/8n62CQ==
       "], CompressedData["
1:eJwBwQE+/iFib1JlAgAAABsAAAACAAAAlioicVZr+r8kSj0zEWrrv4dIZjKY
LQBAwlvSH4cNxT8p9HKqSuH8vzdl/eldfdS/0sA9/iun/L+qs8GH/XPvv0Ep
5hB8f7M/4+vjX0sZ9L/NfKkCI5n9v5Q8uHfLMOG/upwuyWmN8r+2WJ2KwS3r
v7tfpOxyHdM/ddsTyr9u179Rok8rQsDXP7Wl60JiSdy/cPQjRS337j9PD7u8
dtP1vzqu3clXruU/USEViccH3L++ckDSvyMBQAygNTLuxL6/Jcw/KG+9AcAt
e4WmgX3bv2lsErMOXvA/StC5p8OXz7+7etMPMbvRP0IHTya5M8i/BXRrYhjT
87/gLtR6jXjtv/gbPOAV7do/lMlxm5tDyj/kEtaJ9WT6vwXlAWgCi/K/f9Oo
zt/6+r/pnZYpJZP1v+cgPPnBL9q/Su5N///I5b8ZPv5a3lf2v1ZMzzphbey/
/TKJ7eP19T9S3yi7AGHkv8R0gc5mwwBAsiT2HKtlzb/HMnCdolbyv9saYLUU
QPq/YVzQxBi54b9YGuehJLP1vx0Yf6DCw+2/OjRvtME56790iuC6SyfyP2Rv
JvhrVeK/5ZXvfg==
       "]}, {{
        GreaterThan[3.2174839442139063`], -0.06651271215129462, 
        2.4253874745999577`, 
        GreaterThan[3.2174839442139063`], 0.48230176722344276`, 
        GreaterThan[3.2174839442139063`], 2.822745882063561, 
        0.32469391386177465`, 0.48230176722344276`, 1.0070646563783319`, 
        0.3636119798921444, 0.4530123911214551, 
        GreaterThan[3.2174839442139063`], -0.03432802877989338, 
        0.2509076997008561, 0.9433955765089544, -0.06651271215129462, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.0182010224962912`, 
        GreaterThan[3.2174839442139063`], 0.6887756552728448, 
        0.8281441073037862, 2.741490389771279, 2.3652220853338943`, 
        1.7954350719436614`, 0.5903959471840128}, {
        GreaterThan[3.2174839442139063`], 0.6946051989335688, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.3307586366782567`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.2981104311357121`, 
        1.4280699691190628`, 2.037553978526232, 1.4688787942540105`, 
        1.53219363716908, 
        GreaterThan[3.2174839442139063`], 0.8802417758954804, 
        1.1793794178817567`, 
        GreaterThan[3.2174839442139063`], 0.6646419755561257, 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[]}, {
        GreaterThan[3.2174839442139063`], 0.7909960182546486, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.4167453243909847`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.2755703725354766`, 
        0.9611504656601197, 1.2142582150752108`, 0.7839450067045987, 
        1.1346952732468518`, 
        GreaterThan[3.2174839442139063`], 0.8164931840372486, 
        1.1670827523850085`, 
        GreaterThan[3.2174839442139063`], 0.9828246058037746, 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 1.2032462266695219`, 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[]}, {
        GreaterThan[3.2174839442139063`], 0.7692986713723887, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.0133750793544105`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.1345375377785798`, 
        0.9177375614051566, 1.7096350559171976`, 1.0515229623733726`, 
        0.8309451954666127, 
        GreaterThan[3.2174839442139063`], 1.0819950252722983`, 
        1.0260507457767398`, 
        GreaterThan[3.2174839442139063`], 1.0043533873763706`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.8000018278179688`, 
        GreaterThan[3.2174839442139063`], 1.4649662048909606`, 
        1.3912527673505564`, 2.729099964783044, 2.6908249083998417`, 
        3.2091352429970654`, 1.2682502554469486`}, {
        GreaterThan[3.2174839442139063`], 0.8671302926162187, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.7293320256850326`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.7204842822269355`, 
        1.5035270312208917`, 2.4183606960896777`, 1.4854437298728127`, 
        1.1274676391537508`, 
        GreaterThan[3.2174839442139063`], 0.9972823859435878, 
        1.3552683383480677`, 
        GreaterThan[3.2174839442139063`], 0.5670334278005386, 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[]}, {
        GreaterThan[3.2174839442139063`], 0.6971456152711388, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.9338245702495949`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.5071442329067786`, 
        1.5577693836843736`, 2.194173154914351, 1.3335734131817498`, 
        1.0732211009647927`, 
        GreaterThan[3.2174839442139063`], 0.8779699599988736, 
        1.1889453492384927`, 
        GreaterThan[3.2174839442139063`], 0.6791025081679186, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.657447880134811, 
        GreaterThan[3.2174839442139063`], 1.1755697927349915`, 
        1.315088273088317, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.2450781560401323`, 
        1.338057875419756}, {
        GreaterThan[3.2174839442139063`], 0.7080042535772588, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.5758452570371297`, 
        GreaterThan[3.2174839442139063`], 1.919362645157099, 
        0.8273343729878476, 1.2395657314018247`, 1.8072682812371572`, 
        0.9972823859435878, 1.0298356957955916`, 
        GreaterThan[3.2174839442139063`], 0.6537738383935487, 
        1.1274676391537508`, 2.949904404284249, 0.48380973568954866`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.4061312402136237`, 
        GreaterThan[3.2174839442139063`], 0.8063156698081135, 
        0.9129656207041037, 
        GreaterThan[3.2174839442139063`], 2.302560355686001, 
        2.4143782911251868`, 0.7689339421867815}, {
        GreaterThan[3.2174839442139063`], 0.5814717739623987, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.9989118594384747`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.0840784306201408`, 
        1.3408128111402537`, 1.9808310616190956`, 1.2901895934285967`, 
        1.2468027758122737`, 
        GreaterThan[3.2174839442139063`], 0.7911908176061787, 
        1.2070227475344086`, 
        GreaterThan[3.2174839442139063`], 0.7080042535772588, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.529661300653685, 
        GreaterThan[3.2174839442139063`], 1.089056879759785, 
        1.183155915434013, 3.1118000068983447`, 2.3257782951539947`, 
        2.831072089399408, 1.1073456654720948`}, {
        GreaterThan[3.2174839442139063`], 0.8020413047395787, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.031454355643772, 
        GreaterThan[3.2174839442139063`], 2.7365639403226196`, 
        0.9864474594136646, 1.2395657314018247`, 1.6662458997059237`, 
        0.8924185323528576, 0.9539123201452476, 
        GreaterThan[3.2174839442139063`], 0.8526458722057166, 
        0.9900696686650506, 
        GreaterThan[3.2174839442139063`], 0.7080042535772588, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.9115624062946657`, 
        GreaterThan[3.2174839442139063`], 1.52283531366053, 1.503491066293381, 
        GreaterThan[3.2174839442139063`], 2.705639667979616, 
        GreaterThan[3.2174839442139063`], 1.308094652042313}, {
        GreaterThan[3.2174839442139063`], 0.7731103497988787, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.194173154914351, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.1094003382511257`, 
        1.3950550708947658`, 2.1146225919479926`, 1.3878160800314547`, 
        1.0587683140289965`, 
        GreaterThan[3.2174839442139063`], 1.0525400459340226`, 
        0.8562925647140707, 
        GreaterThan[3.2174839442139063`], 0.3174406784550886, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.998520882835038, 
        GreaterThan[3.2174839442139063`], 1.4998794489564318`, 
        1.398183145509941, 2.471500005074943, 2.4463973502085943`, 
        GreaterThan[3.2174839442139063`], 1.2260841159758238`}, {
        GreaterThan[3.2174839442139063`], 0.9792013467895727, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.8414258986627488`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.1905563524257086`, 
        2.179709280525574, 2.8812014497271488`, 1.3046546497321596`, 
        1.4999157142048267`, 
        GreaterThan[3.2174839442139063`], 1.3950550708947658`, 
        1.4962923999526407`, 
        GreaterThan[3.2174839442139063`], 0.9864474594136646, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.2560246305513636`, 
        GreaterThan[3.2174839442139063`], 1.7296344811359368`, 
        1.6140319822010383`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.5185139398778875`}, {
        GreaterThan[3.2174839442139063`], 1.2502567825805417`, 
        2.6606292258312365`, 
        GreaterThan[3.2174839442139063`], 2.280955414624756, 
        GreaterThan[3.2174839442139063`], 1.9047937609916428`, 
        1.7312148937886989`, 1.5505360426012138`, 1.6011557180350187`, 
        1.3914390199456288`, 1.7060177398204908`, 
        GreaterThan[3.2174839442139063`], 1.1057757895704217`, 
        1.6878201769879626`, 2.07846124072917, 1.0623834042146878`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.6507736294089321`, 
        GreaterThan[3.2174839442139063`], 1.8340644742997925`, 
        1.4708219495400128`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.4823017672234429`}, {
        GreaterThan[3.2174839442139063`], 0.8090771617730586, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.5179924735571977`, 
        GreaterThan[3.2174839442139063`], 1.4527654609839766`, 
        1.1056077265780888`, 1.1383165953673486`, 1.7168685646148276`, 
        0.9213597215336128, 1.1817058490387806`, 
        GreaterThan[3.2174839442139063`], 0.8634953538051456, 
        1.0296669721768006`, 1.6047740849694816`, 0.6103918395072987, 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[]}, {
        GreaterThan[3.2174839442139063`], 1.0296669721768006`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.5577693836843736`, 
        GreaterThan[3.2174839442139063`], 1.5937982905863686`, 
        1.3117326313815847`, 1.2684974701864566`, 1.3841981659956248`, 
        0.4946804400098587, 1.2721123175299678`, 
        GreaterThan[3.2174839442139063`], 1.0009015275703188`, 
        1.4238356497834856`, 2.179709280525574, 0.7043959182878686, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.4688787942540105`, 
        GreaterThan[3.2174839442139063`], 1.1417632302757879`, 
        0.8877297972880304, 
        GreaterThan[3.2174839442139063`], 2.489232643598077, 
        GreaterThan[3.2174839442139063`], 1.0290589500844995`}, {
        GreaterThan[3.2174839442139063`], 1.1273050849784567`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.6444254601872266`, 
        1.5613807217278457`, 2.4689839470029487`, 1.2648678584043807`, 
        1.3841981659956248`, 
        GreaterThan[3.2174839442139063`], 0.8924185323528576, 
        1.4202194233834247`, 
        GreaterThan[3.2174839442139063`], 0.8309451954666127, 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 1.5467873473855707`}, {
        GreaterThan[3.2174839442139063`], 0.9647403416560507, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 3.1777086311117486`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.3588960875814038`, 
        1.4529012783203528`, 2.3496577912490637`, 1.2757277089709986`, 
        1.6192359144928077`, 
        GreaterThan[3.2174839442139063`], 1.1527896345038318`, 
        1.1853313306355298`, 
        GreaterThan[3.2174839442139063`], 0.9430689164846007, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.8910577406369578`, 
        GreaterThan[3.2174839442139063`], 1.4869968884318225`, 
        1.4509877045550408`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.3278042410542032`, 
        1.3458832129317129`}, {
        GreaterThan[3.2174839442139063`], 1.3878160800314547`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.825346262562263, 
        2.0133750793544105`, 3.188556332158259, 1.8904347684471627`, 
        1.2157432826376051`, 
        GreaterThan[3.2174839442139063`], 1.3805856592578818`, 
        1.5939294981887098`, 
        GreaterThan[3.2174839442139063`], 1.3118851887968428`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.296809930966721, 
        GreaterThan[3.2174839442139063`], 1.563836918664545, 
        1.4469097921346012`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.1850319204327684`}, {
        GreaterThan[3.2174839442139063`], 0.6935616394040587, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.3243463392278536`, 
        GreaterThan[3.2174839442139063`], 2.8992810845048584`, 
        1.1021660484199318`, 1.1057757895704217`, 2.02784014457189, 
        1.1238620900319256`, 1.3588960875814038`, 
        GreaterThan[3.2174839442139063`], 0.8020413047395787, 
        1.0298356957955916`, 
        GreaterThan[3.2174839442139063`], 0.7297413055078686, 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[]}, {
        GreaterThan[3.2174839442139063`], 0.4657515477485587, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.631655267403971, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.0947590473779045`, 
        0.7875596495355087, 2.1363170882275275`, 0.7260944546433188, 
        0.6248408516998586, 
        GreaterThan[3.2174839442139063`], 0.29215413313790867`, 
        0.5595575401688287, 
        GreaterThan[3.2174839442139063`], 0.43685886884015857`, 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 0.7656824449723185}, {
        GreaterThan[3.2174839442139063`], 0.8904422557744381, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.2448324429804496`, 
        1.6922827630145376`, 2.8450546083944492`, 1.6443203980174144`, 
        1.0098756337121602`, 
        GreaterThan[3.2174839442139063`], 0.9094490469812666, 
        1.308116404981523, 
        GreaterThan[3.2174839442139063`], 1.1355142809987864`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.007856213393391, 
        GreaterThan[3.2174839442139063`], 1.0396520235819238`, 
        1.1539976866927997`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 0.9687630481972486}, {
       2.045826590594035, 1.1887809337794986`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.7385644670035696`, 
        GreaterThan[3.2174839442139063`], 1.6154956489867367`, 
        0.8490494609684457, 1.2540329986930587`, 1.3878160800314547`, 
        1.2287159545332726`, 1.4673668460776006`, 
        GreaterThan[3.2174839442139063`], 0.5976951859255123, 
        1.4021382913831177`, 2.6859405730879256`, 1.0081349721358588`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.2411028161973467`, 
        1.0343877835895667`, 1.0042353663594676`, 
        GreaterThan[3.2174839442139063`], 1.843618922849295, 
        1.372212151654062, 0.9927302039541427}, {
       2.2374865897972858`, 1.4346843289836697`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.0929272186894456`, 
        GreaterThan[3.2174839442139063`], 2.584694454763902, 
        1.6914364033880236`, 1.3552683383480677`, 1.5758452570371297`, 
        1.3516610517906726`, 1.3118851887968428`, 
        GreaterThan[3.2174839442139063`], 0.9828246058037746, 
        1.8324692329904162`, 
        GreaterThan[3.2174839442139063`], 0.8888049218266156, 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[]}, {2.1579296089959357`, 1.4202194233834247`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.2050197224727697`, 
        GreaterThan[3.2174839442139063`], 2.6208536411618235`, 
        1.8143881009901095`, 1.814498641287364, 1.7385644670035696`, 
        1.4601346777330557`, 1.4348204664942716`, 
        GreaterThan[3.2174839442139063`], 1.0298356957955916`, 
        1.9481884777923788`, 
        GreaterThan[3.2174839442139063`], 1.1997913669524167`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.105775789570422, 
        1.3586200343346453`, 1.3260489679467407`, 
        GreaterThan[3.2174839442139063`], 2.224719481759858, 
        1.709405656800057, 1.3685471975676564`}, {
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 1.5685067967980302`, 
        Missing[], 1.7422693935351286`, 
        Missing[], 
        Missing[], 
        Missing[], 0.652052848248105, 1.6188844849954505`, 
        Missing[], 1.246055196906444, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.2841824946369016`, 
        1.4746823703532508`, 1.0098756337121602`, 0.7926717891415673, 
        GreaterThan[3.2174839442139063`], 1.6488477083728936`, 
        1.0474306401555422`, 1.0448532172677316`}, {1.8000349892058387`, 
        GreaterThan[3.2174839442139063`], 1.0732307873624447`, 
        1.7240999037206428`, 1.894049532387387, 1.3733541693009337`, 
        1.2757231514983458`, 1.4854484164111927`, 2.082078316390344, 
        GreaterThan[3.2174839442139063`], 1.9627524066918378`, 
        GreaterThan[3.2174839442139063`], 1.5830782433607127`, 
        2.5360480993150856`, 1.6698611093696276`, 1.2829546048483906`, 
        1.3408101956883436`, 2.203897349679375, 2.757763353354612, 
        1.829419569254029, 2.1597896971098005`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.965299559179076, 
        2.1285349645420326`, 2.1497547201133966`}, {1.7494117407867777`, 
        GreaterThan[3.2174839442139063`], 1.0117600201753787`, 
        1.3552746628561307`, 1.2901866546280056`, 0.9249757699264287, 
        1.2178676909448327`, 1.2395640803399808`, 1.5686143894105198`, 
        2.6172376654053298`, 2.1073899881110387`, 
        GreaterThan[3.2174839442139063`], 1.3444266621581338`, 
        2.2918029279309016`, 1.2576430620452588`, 0.6863273277718286, 
        1.2901866546280056`, 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[]}, {1.5252229479102446`, 
        GreaterThan[3.2174839442139063`], 0.7875689991546088, 
        1.1817096217234486`, 1.2323319703914066`, 0.7297146018781487, 
        0.9430558449716527, 1.2034041643374738`, 1.4384409541077416`, 
        2.349658047520571, 1.6156219460306847`, 
        GreaterThan[3.2174839442139063`], 1.3118823932005788`, 
        2.393049330788431, 1.3010352940243406`, 0.6537801997719187, 
        1.3010352940243406`, 1.1051012445496424`, 1.624364614263031, 
        0.9401178667477186, 0.9956351945975499, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.184469969331844, 
        1.6140319822010383`, 1.0796153235269434`, 1.1291741029677673`}, {
       1.3371950100633128`, 
        GreaterThan[3.2174839442139063`], 0.5561475747719588, 
        1.0081434115113397`, 1.0840784306201408`, 0.6393181177186887, 
        0.6682440488426286, 0.8888160299073008, 1.3010352940243406`, 
        2.147165206733607, 2.067614600534416, 
        GreaterThan[3.2174839442139063`], 1.3842017161689826`, 
        1.9157449489736522`, 1.0659981983130478`, 0.2596497745785286, 
        1.4420563686385948`, 1.8302678009336417`, 2.3604987444680012`, 
        1.4038751599093995`, 1.7391449593259796`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.308658304920788, 
        2.5000607449231236`, 1.845668452287319, 1.9794117826344353`}, {
       1.4673678232268716`, 
        GreaterThan[3.2174839442139063`], 0.8888160299073008, 
        1.4782162928828806`, 1.727598666476444, 0.9483010978565956, 
        1.3625062245812498`, 1.4853114549043889`, 1.9337235732979527`, 
        2.751027486819759, 2.1977884434864987`, 
        GreaterThan[3.2174839442139063`], 1.3227310882905576`, 
        2.4364406210695257`, 1.3261977661074194`, 0.4549070282424087, 
        1.3805856592578818`, 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[]}, {1.5469192506201157`, 
        GreaterThan[3.2174839442139063`], 0.9466714203392997, 
        1.4420563686385948`, 1.6951728849301397`, 1.1021592518959846`, 
        0.9683686159903977, 1.3914332007609427`, 1.4529043090465847`, 
        2.5376869965921145`, 1.6409336428927577`, 
        GreaterThan[3.2174839442139063`], 1.5975424321719338`, 
        2.577462321960574, 1.4058971531683497`, 0.8671225080961587, 
        1.1600138296545948`, 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[]}, {1.0406868175998938`, 
        GreaterThan[3.2174839442139063`], 0.5272248000480487, 
        0.8345765893279837, 1.4274518793044246`, 0.7331364002098771, 
        0.8562726113713046, 1.2466403680911848`, 1.2611054638493884`, 
        2.3026507469386166`, 1.5866946049068498`, 
        GreaterThan[3.2174839442139063`], 1.3733541693009337`, 
        1.306682311019055, 1.561252429816968, 0.3934362067947587, 
        0.9755991519791256, 0.711638538232349, 0.7785853278629622, 
        0.12057393120584989`, 0.3380578754197561, 1.9466487339066763`, 
        GreaterThan[3.2174839442139063`], 2.2772650984449516`, 
        0.8840019247687871, 0.48230176722344276`, 1.4448563865035424`}, {
       1.4890635015599278`, 
        GreaterThan[3.2174839442139063`], 0.9755991519791256, 
        1.2612594896113236`, 1.5722306728659727`, 0.9828335516292827, 
        1.0913112179465978`, 1.3950492999613207`, 1.5324553133266687`, 
        2.5557666852729235`, 1.8000349892058387`, 
        GreaterThan[3.2174839442139063`], 1.5396875213393026`, 
        2.1977884434864987`, 1.4999120878162577`, 0.8924332203426417, 
        1.5071433412772157`, 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[]}, {1.2467962806693818`, 
        GreaterThan[3.2174839442139063`], 0.8707389202626916, 
        1.1600138296545948`, 1.5686143894105198`, 1.1960133865796216`, 
        1.0515356906300497`, 1.5793333849861226`, 1.5360714568227518`, 
        2.4834478296791764`, 1.7277162570808116`, 
        GreaterThan[3.2174839442139063`], 1.3191141827277086`, 
        1.836194175112808, 1.5250899889852025`, 0.8056525288984488, 
        1.2467962806693818`, 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 2.5448658338024988`, 2.2664164009977767`, 
        Missing[], 
        GreaterThan[3.2174839442139063`]}, {1.4745997312403347`, 
        GreaterThan[3.2174839442139063`], 0.8888160299073008, 
        1.2901866546280056`, 1.6698611093696276`, 0.9249757699264287, 
        1.2901866546280056`, 1.6590131838070357`, 1.843426179884696, 
        2.989679628565989, 2.1941726050233377`, 
        GreaterThan[3.2174839442139063`], 1.4637520218804168`, 
        2.2484117118396516`, 1.6192379808840556`, 0.8490413455140937, 
        1.4709838103970125`, 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[]}, {1.6662452815718898`, 
        GreaterThan[3.2174839442139063`], 1.0623834042146878`, 
        1.4312088381636636`, 1.6807090092190886`, 1.1166212905773256`, 
        1.2648756464143496`, 1.4673678232268716`, 1.5939265776686056`, 
        2.5593826288679877`, 2.0423030538738955`, 
        GreaterThan[3.2174839442139063`], 1.6120056668888196`, 
        2.311045701779195, 1.6590131838070357`, 1.0117600201753787`, 
        1.6590131838070357`, 1.662776713639878, 1.7889598478958502`, 
        1.3598734103327423`, 1.4869968884318225`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.284778030529883, 
        2.078659779726935, 1.2995508784990193`, 2.326184241108371}, {
       1.7313320124042382`, 
        GreaterThan[3.2174839442139063`], 0.8815841239015687, 
        1.5433032612423137`, 1.7855710933270166`, 1.0406868175998938`, 
        0.8852020626590936, 1.3805856592578818`, 1.7566433793850618`, 
        2.7980347411441655`, 2.0965421870527985`, 
        GreaterThan[3.2174839442139063`], 1.3082666437176136`, 
        2.6136217531775947`, 1.5324553133266687`, 0.9900638033478176, 
        1.8036507022814559`, 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[]}, {0.6971743984160588, 
        GreaterThan[3.2174839442139063`], 0.6646357713049286, 
        0.8418155529874447, 
        GreaterThan[3.2174839442139063`], 0.7911861816454587, 
        0.6537865610571086, 1.0226040331378297`, 0.7550260095407187, 
        2.1110060293993738`, 1.2612642014200917`, 
        GreaterThan[3.2174839442139063`], 1.0406842075865108`, 
        1.5413545507544153`, 1.0479237597413635`, 0.5236000302741287, 
        0.6284770062582686, 0.7333577879255855, 0.9498777040368748, 
        0.12057393120584989`, 0.5599066250361125, 2.585361450851787, 
        GreaterThan[3.2174839442139063`], 1.246055196906444, 
        0.7640266076920373, 0.41060854256836776`, 2.0953158357068}, {
       1.5433032612423137`, 
        GreaterThan[3.2174839442139063`], 1.0949267066460817`, 
        1.7168680144916317`, 
        GreaterThan[3.2174839442139063`], 1.5143754350534007`, 
        1.7855710933270166`, 1.7566433793850618`, 1.6770929220596107`, 
        GreaterThan[3.2174839442139063`], 2.295418860404126, 
        GreaterThan[3.2174839442139063`], 1.7385639436875355`, 
        2.2990348833418586`, 1.4926800859995297`, 1.3769693235790268`, 
        1.5541509691753377`, 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[]}, {1.6011578722681776`, 
        GreaterThan[3.2174839442139063`], 1.3335787319634467`, 
        1.6083900973866836`, 
        GreaterThan[3.2174839442139063`], 1.8469341385906615`, 
        1.6337015990257937`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 1.6228535298989417`, 
        GreaterThan[3.2174839442139063`], 1.6987883791540386`, 
        2.7293318653170906`, 2.016896779393545, 1.3082666437176136`, 
        1.4022809553649178`, 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[]}, {1.6928645373572675`, 
        GreaterThan[3.2174839442139063`], 1.6756683797841692`, 
        2.6762728259247512`, 
        GreaterThan[3.2174839442139063`], 1.9982331753174585`, 
        2.443516447558865, 2.4855936740223843`, 2.4243098202457563`, 
        GreaterThan[3.2174839442139063`], 2.968084896409098, 
        GreaterThan[3.2174839442139063`], 2.330088945748481, 
        3.0531491547041405`, 2.2255728805054837`, 
        GreaterThan[3.2174839442139063`], 2.150160602836307, 
        2.999440268162575, 2.9059749561982375`, 2.293468628958026, 
        2.071668488047513, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.617088449903595, 
        2.8024932241163674`, 2.155803487556062, 
        GreaterThan[3.2174839442139063`]}, {1.6915567799878788`, 
        GreaterThan[3.2174839442139063`], 1.6337015990257937`, 
        2.425592787615643, 
        GreaterThan[3.2174839442139063`], 1.9519045003491369`, 
        2.168860907205037, 2.1616291174096287`, 2.118237668667332, 
        GreaterThan[3.2174839442139063`], 2.378585537406897, 
        GreaterThan[3.2174839442139063`], 2.3243464750535185`, 
        2.957136147206359, 2.045919031957945, 
        GreaterThan[3.2174839442139063`], 2.0025277626634246`, 
        3.0995528886500545`, 2.8282292547370367`, 2.190611797813605, 
        2.0697198836257935`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.398297719968303, 2.72209071485586,
         2.1937421934709516`, 
        GreaterThan[3.2174839442139063`]}, {1.7819554198850673`, 
        GreaterThan[3.2174839442139063`], 1.4058971531683497`, 
        2.6750927094467776`, 
        GreaterThan[3.2174839442139063`], 1.6588903657874727`, 
        1.9591362299712687`, 1.8216205537902326`, 1.85065819189899, 
        GreaterThan[3.2174839442139063`], 2.7076362247112846`, 
        GreaterThan[3.2174839442139063`], 2.1254696127889487`, 
        2.823346339961309, 1.7601447049891896`, 
        GreaterThan[3.2174839442139063`], 1.7494117407867777`, 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 2.1217673449953227`, 2.0964537601948936`, 
        Missing[], 
        GreaterThan[3.2174839442139063`]}, {1.9229768090597936`, 
        GreaterThan[3.2174839442139063`], 1.5035279303059197`, 
        2.13993348309887, 2.497911605549176, 1.6517813293384147`, 
        1.8253466910927951`, 2.1616291174096287`, 2.2158681461516796`, 
        GreaterThan[3.2174839442139063`], 2.5159912806563915`, 
        GreaterThan[3.2174839442139063`], 2.2050202587995846`, 
        2.8414260225491286`, 2.0061434834436658`, 1.7457958089453252`, 
        1.7566433793850618`, 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[]}, {1.3625062245812498`, 
        GreaterThan[3.2174839442139063`], 0.8128831554226487, 
        1.7313320124042382`, 2.0206074263580827`, 1.2612594896113236`, 
        1.4167453243909847`, 1.8036507022814559`, 1.9085130701792412`, 
        2.837810088996979, 1.7638755653939993`, 
        GreaterThan[3.2174839442139063`], 1.1527815695360617`, 
        2.4509043891410887`, 1.6807090092190886`, 1.4926800859995297`, 
        1.4312088381636636`, 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[]}, {2.5051434529962937`, 
        GreaterThan[3.2174839442139063`], 2.295418860404126, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 2.349589608185141, 
        1.9736001091355586`, 1.7619528176204888`, 1.6517813293384147`, 
        GreaterThan[3.2174839442139063`], 2.2845710255255165`, 
        GreaterThan[3.2174839442139063`], 1.6843248835413747`, 
        2.2471923067288015`, 1.7131337618172233`, 2.201404351576033, 
        2.168860907205037, 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 2.1199592319984166`, 2.327892249691379, 
        Missing[], 
        GreaterThan[3.2174839442139063`]}, {1.6698611093696276`, 
        GreaterThan[3.2174839442139063`], 1.0949267066460817`, 
        1.6011578722681776`, 2.1218536469287197`, 1.3842017161689826`, 
        1.3769693235790268`, 1.8578898451406725`, 1.9446724173824457`, 
        2.7835709838090548`, 1.9482884991000906`, 
        GreaterThan[3.2174839442139063`], 1.4058971531683497`, 
        2.3251008742056904`, 1.7638755653939993`, 1.6264697124256007`, 
        1.5035279303059197`, 1.4509877045550408`, 1.7945159298399376`, 
        1.1560036693903981`, 1.4649662048909606`, 2.267786348176308, 
        GreaterThan[3.2174839442139063`], 2.492195858381871, 
        2.083653091847677, 1.0499928569201427`, 
        GreaterThan[3.2174839442139063`]}, {2.009759619562802, 
        GreaterThan[3.2174839442139063`], 1.814498641287364, 
        2.4219768256926617`, 2.523223167489114, 1.9591362299712687`, 
        2.3568898325187497`, 2.1869406746030946`, 2.1363175070605775`, 
        GreaterThan[3.2174839442139063`], 2.9354405214237485`, 
        GreaterThan[3.2174839442139063`], 1.5324553133266687`, 
        2.957136147206359, 1.8723536482518888`, 2.9752158594589186`, 
        2.1327015802707376`, 3.0206405005813357`, 2.955121788886798, 
        2.778394387221547, 2.6273494678124933`, 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 3.0664116574409848`, 
        2.8038911931277326`, 2.341727253160555, 
        GreaterThan[3.2174839442139063`]}, {2.0133753572956756`, 
        GreaterThan[3.2174839442139063`], 1.8253466910927951`, 
        2.3171145937011826`, 2.566614466784099, 1.9844479359608507`, 
        2.1905565372554276`, 2.1073899881110387`, 2.1905565372554276`, 
        3.210252055643499, 2.6172376654053298`, 
        GreaterThan[3.2174839442139063`], 1.6228535298989417`, 
        2.350383714158389, 2.009759619562802, 2.7727231496218265`, 
        1.9302087150655256`, 1.6277549084660907`, 2.2047926179450887`, 
        1.6940257532413352`, 1.697490887171057, 2.0635735245718902`, 
        GreaterThan[3.2174839442139063`], 2.2862633072234675`, 
        1.9108590952390916`, 1.4499718105668924`, 2.9226631890875825`}, {
       1.6264697124256007`, 
        GreaterThan[3.2174839442139063`], 1.2034041643374738`, 
        1.7494117407867777`, 1.9048973159924372`, 1.4565200133335177`, 
        1.4999120878162577`, 1.6373174785827687`, 1.6047740849694816`, 
        2.544918817292226, 1.8470419528775746`, 
        GreaterThan[3.2174839442139063`], 1.2287159545332726`, 
        2.1724768449257965`, 1.4565200133335177`, 2.0567668609170036`, 
        1.4312088381636636`, 1.46200845578399, 1.656500672601419, 
        1.2572944983622567`, 1.190611797813605, 1.7285647897530247`, 
        GreaterThan[3.2174839442139063`], 2.008191231541586, 
        1.373426962185743, 1.0070646563783319`, 2.088823325313767}, {
       1.9779064276371183`, 
        GreaterThan[3.2174839442139063`], 1.6810783464009065`, 
        2.0274474659279202`, 2.242953663274962, 1.756057678020762, 
        1.8067631654498735`, 1.6922827630145376`, 1.9140150641835134`, 
        GreaterThan[3.2174839442139063`], 2.2696390114134712`, 
        GreaterThan[3.2174839442139063`], 1.5347112933903266`, 
        2.0212141151884504`, 1.7171710268323102`, 2.136352687594891, 
        1.3794505605779812`, 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[], 
        Missing[]}, {
        Missing[], 
        Missing[], 2.17595226258085, 
        Missing[], 
        Missing[], 2.53763023032496, 
        Missing[], 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 
        GreaterThan[3.2174839442139063`], 
        Missing[], 
        Missing[], 
        Missing[], 1.9830034873118587`, 2.4508862220258014`, 
        Missing[], 2.664207463782108, 2.839158651233286, 2.819761028514099, 
        2.585435911971884, 2.553142396503208, 3.0601430998617514`, 
        GreaterThan[3.2174839442139063`], 2.9670038313889733`, 
        3.0188053157189465`, 2.3668262435051717`, 
        GreaterThan[3.2174839442139063`]}}},
     SelectWithContents->True,
     Selectable->False]}], ";", "\n", 
   RowBox[{"Echo", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"coordsSDP", "=", 
        RowBox[{"sdp", "[", 
         RowBox[{"distMatrix", ",", 
          RowBox[{"\"\<AddFinalMDS\>\"", "\[Rule]", "True"}]}], "]"}]}], 
       ";"}], "//", "Timing"}], ",", "\"\<Timing:\>\"", ",", "First"}], "]"}],
    ";", "\[IndentingNewLine]", 
   RowBox[{"analyzeMDS", "[", 
    RowBox[{"coords", ",", "coordsSDP", ",", 
     RowBox[{"LegendLabel", "->", "\"\<SDP\>\""}], ",", 
     RowBox[{"\"\<DistanceMatrix\>\"", "->", "distMatrix"}]}], "]"}]}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.8487640016296005`*^9, 3.8487641187319937`*^9}, {
   3.8487646416691027`*^9, 3.8487646963422356`*^9}, {3.8487677529181385`*^9, 
   3.8487677810569506`*^9}, {3.848767819630247*^9, 3.8487678199625993`*^9}, {
   3.8487678825946302`*^9, 3.8487679291088233`*^9}, {3.848769690183627*^9, 
   3.848769690303299*^9}, {3.8487700346025505`*^9, 3.848770036763449*^9}, 
   3.84877077723866*^9, {3.848770824588478*^9, 3.84877083654885*^9}, {
   3.848770881949006*^9, 3.8487708940546536`*^9}, {3.848936902647066*^9, 
   3.8489369433494463`*^9}, {3.8489373911932592`*^9, 
   3.8489373951780047`*^9}, {3.8489384081281996`*^9, 
   3.8489384103714104`*^9}, {3.8502697153871174`*^9, 3.850269728087821*^9}, {
   3.8502697601324787`*^9, 3.8502697646137223`*^9}, {3.8502702331950293`*^9, 
   3.850270257420392*^9}, {3.8502703571444206`*^9, 3.850270387461815*^9}, {
   3.8502704455076227`*^9, 3.8502704570360203`*^9}, {3.850270633596677*^9, 
   3.850270657782922*^9}, 3.8506483439465857`*^9},
 CellLabel->"In[49]:=",ExpressionUUID->"2941d878-e553-4777-8fd5-8e79fea93b14"],

Cell[TextData[{
 StyleBox["Timing,",
  FontColor->RGBColor[0.92, 0.43, 0]],
 " SDP with final MDS:  40 secs"
}], "Text",
 CellChangeTimes->{{3.849876508816414*^9, 3.8498765627369704`*^9}, 
   3.849876730965323*^9, {3.849876931797871*^9, 3.8498769318593993`*^9}, {
   3.850245609403616*^9, 3.8502456351214595`*^9}, {3.8502482059535046`*^9, 
   3.850248236507482*^9}, {3.8502708292804985`*^9, 3.8502708361185637`*^9}, 
   3.8506492997677526`*^9},ExpressionUUID->"7e3cdc2c-fb8d-458f-8dff-\
ea95c9fb0bc1"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
kxlSWjrbnXaXC5FgLbJkUk86qzF4HPZmiOr3XetyEAm3o2qP+Xkus9Z5LJvj
01T44PrVZUHrtDvbnM+id8u7ZgNaT5m//PnKm690He6oOdTRsGrNthWbj06u
7NZ2loqLFS0nF69/qWLdc7+++E/mg4yPjxetfs61t1CPqA8z0LorThMg0Ean
oEqqBAad65Dy0T9eSurpNn6lFobKNtH7up2QEl5Xp63Wzcniblp37YRXofYg
O1qPYzegPgJGJzVM2hbPmNbjiVa2yF2NEtQxa53ugEz/q+I0NQ1vt71quYfp
aJ2rjuqwPrSeNT6//NEr22fI6Of+uof0XnTS8fxYd9/LLo/HphZRH2agdVdO
dDc4TVd49OAW+l3pEZWnDrcEneuQMjY2tji2N1mtp1ZV9j68zoW8xF/pPdU8
SitB7F6Sxd064Qu0kDl9bF1NQDbkTn7vTzpLGAB3hpu7wX3Xuu28arp8VTjq
wKliY1uViiuXaYkc4OoTbbRUJOi/rvEPXjbySdW7mprWMzp1bSShYmSgZZal
SeU0n8wz1ftO/epdw9FSi6gPM9C6KwatLyyt61tv1frpHff97vLHQec6vBzs
P+E0m5PTqNburoHUziUTkRlaiMMJ+L2IQD+O2sfrMZmTMqRiYAlr1xv7FoO7
RpTpSBXCNYQ+Ba1bHvpja6uR8BaD21pPz4ZtB4t55hbbUAq5/5YdeSobSxo9
GxYX6w+46XUzrtd51zr/EhAJnyy2Pai0pWrNBls1L1uzx3zAFCLqwwy07oph
FuLJqU0r1p1quY/7gibb6S33LV9atH3PgZz7JWQNujMla5/zGA9Pd7h0Xcf/
M/b/pnYuidqyXaaNW22qCKTdp4qA24kpJNMfeRO4/Gfb8qcXL16UJiftSBv1
B9z0U3i5A16Ws5GahtocZlfatiV5mJs+4sxTluiKpNObVyizPDMev1UdMnca
8EFsT2e4BHnS3FKFk2l2eNofnlVG1ajsyHmWVjzvyMEAfC0yokFvOCd8YzkN
r6DHPzY6CE8FwIcy9FHwV4zn1pPFtqlFJXCsbG4EAt7SBwuzujI+Pt676WeG
WYipgjc5j0HZXPq3dFMf99vk1hzCWeYPf/xTWaOnpV4qNvd+/Mnv0jydDOzy
SqxcvFck0E1BBTIXzjx3Cs+TppfJrsnUeclslxAVszN0HFmYpjcxBavUCvgU
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
kN9+8tm8VVudnj/K57I3SloXDh0dKtt52uRZg9YX3rdq6ez3d//ASyf8SM/U
nY0lC6paXQfWozrvQU5AJTMvezRz5kwurtvb2wsT8JvAi252E2cyZa03NTVN
mTKl4BZ0sbZar6io4ASUmHbh7eHUOuVWrX3JV0bfIF8F5Z/eSOWEtc61I74D
nJiglLydrpr+a1kpg24UpZS7R4nlR0L/pX/VfgzXhTZAdvAYUpWHZW8kte4a
GO/UCU+aPrr+u/TR7rK7LnXe87ftL05tK7vDabaZZZWNkV87IHeh8plLeN3d
1BbjkjxwrTOc1dS0zoid6boMyUhYusHD1glPmaF88nvKKl0RfYmqT0n6tIUu
RLTO0LfJN0H/Wknf/I3Tv3oFhu8/oW4kxfNGqSNRHmhjqOo/eYuXkKo8LHsj
qfVvvvmmuqnDaXKhWOIJ9O2VP9I1fXT9XWR2fr+n7DsHa+74on/yMbdDGx5c
XFLm1Nszf83B4soN0V47IEdhf1EZ7tS8IndQgpDoLH2txxUNGVqUags3nJBD
1fvAF6Vrmq6RW9+W7U5aj9+qIfCvwjL4wj8Gi9YJSS+3lHakJjzMHjiuIVX5
WfZGUuvxRINdn1xIfc0va2opu0/VdH/dne899301fK53zZ0tlX//6Nxq11j3
hdW7bYf1Iz/vQfrQH93nlz86dbhloDN27rU9lz8+79ftklabOQiNe1x9OWOa
+KJ1Mg5ftdNFcYLAwwkM8Ben5pCHJ2w1zd3slo0GrceVH4blVst2S3qpKakH
5K4e9MYHjlNIVT6XvVHVOtH38mu2S7XS91688XD1hueKajura2pWz5+6f/Ud
g03f5Xa62nh/ofaOyaC4qodcI+J4xoPR0dGhM+fTn+g4f/jyysjxjpUf7ntQ
Zv651HnPC83zfj/yWfoHZxdQq8qcjNpcuhd4oxqaZdjXkIxD1OK3guIISwKJ
AeND6a6hI9Be9BGlVMPDDLCGnKRDHpQhdf1Elo10Oq4U8YVwoL5ElIl5bTcy
cos4517yT1+ZJYcSGqFfEY+nWzaatS4HtIxEOGmd+3z0A+r5BCAMRFjrxHsf
XKI6m1qLo/cVG/cfOf76iro937bBncPnSOvcbHfVeh7OeJA+5PRXts+wXRTv
H7ZPp0/TObg0Wr0UvGpxTeKgMp9KbA6a4g5YXRyuybgbWfrDeRSYEHVKDBgH
dNER9Eh4OohEcHkPqDN0U3CvtaX3mJJJHJ0kUyPzpeOa4FqBRXPqxao3k6+L
G9R8NNeOEb5ky7AIZUZiBvQRE13frlqXA6r5cdK6xOBZKhWs+zD3e4D8JNpa
d+Ktdy7IjK96+NwXfdOo8d5Te8eO4v94auvdX/RPc9V6LP9mPEiTb7755tju
RdRI1ytUbPa+bU+lMyhmW267wv5VW4X0RveRl2SkQskD2Y1kxOJjrZMLLDFg
Eu0m4mYFq2pmuXu5EKeeCsuYtZyaZapqXWLmKZP0hvLPF8hVAq6lWLxpiT+0
7Ut3/Tr4yPp2qUvwLTK3+l21btsPb6t1aapL/J7AY/F6FwcAwZKfWu89+obM
V2AJn7vUeU9/3Z3qpLLd1Xcs3nDE7PQ8nPEgTX7z4dkL7T+wdbrENlw492bK
x5eo5qTC4bgMt+wipb0YymMy2SIp5SPWrqWhx+YS0fDulhY3GdbLhTg12EnN
TpEGutH4HqqhZZb8W7xp2ci7q9doO96hZ8Op6kL7qk/wcTeC4VoMWpfOHFut
c0ghIX0sutPjicqPIbcABEV+an1rW7dEwdGbXxTVNJdOGnwy6H2tzdzvO0rv
McTVx/JyxoM0OffaHkswg95gH+iMpXx80br3h9e4dWzbVOSGKpftHpPFnTt1
uWFOyrDNs2iC1UPnUi/B++XIM9eyhVvcTumdtG6rLS9a5x4AukzV7Ob88x0z
iJIfzy9QsBVumlrniAKJmjB0sxe4PUsIssP4+Ph7H1zq7DlGZTu12uj96Oho
0JkKjPzU+sH+EzLj6+L1L3HMPDXby+c4zv3+i+KthoH1PJzxIE1I2Zbqk/56
cVdpyscXrXufi9XJwvFEG1kU4DGZIaWTLvXtojDXbmcd6VeXvgI6iKHH2Het
qxEFdCFexqBdtc7QoWQov8AufMJV62rDXN/omk/LibynB75z8+bNM+/+uqSh
k0pyjqFa0XJyadOxZWv2vPXOBfo06AwGQH5qXearoTb47JIWaYnXFBU6hc8t
nf8YZjzwkTde3uM0sM4v+vTU4ZaUjy/PIHsfWzeU6qrgPCYzpLR0tjvtLhei
TpuW1LPSagweh70Zovp917ocRHrOyaHmJ8KctG4raNooR7YkcNW6hD2o9Rxo
Pecgazdu27u8eHnd6iWxykVVazaoK3SQ6Hd19OThM27RWJg1WWTWQTKy+hBc
bdH9TlqvWGqj9Xye8SBN/vnTS+o8frY9JP/4ztF0TsFlvt7X7YSU6k7zj1m0
bk4Wd9O6aye8CjW9Ze5T72aXBjvlhE5q218tZEjr8USzXeRu+5Ca4KR1p/a7
xBlaKm+uWpfGvmWAAFrPLfoP92+ruG197R3VM9QpRql8fnUo7wKf8srmKjzr
4DPV+9S1flYsmu240l9VyZNlrZjxwC/opvVte8q2EsX1qJd3zaXaVzqn8D68
zqKU8Va9p5pj5CSI3UuyuFsnfIEWMqePrasJyIYyEbqXy48rYQDcGW7uBvdd
65ZPeWa2AuOwCGvaVutOoY980qS0Lt+LpZ6TmtZdJ0YAGeLKlSst5Q/poVBt
tY/c1maP7Q06p9kmb7XOsw7OXNCgxsItXNfXVnanrpiDtd8taeyZH/tboF0e
/lR85/cjn73eOlMfYactZ/c+evnj8+mfgnVGBa+hhTicgN9zO1ovqOk4ag+2
x2ROmpCKgSWsXW/sWwzucehZP6Z+Lp0UtG556I+trUbCWwzOBzQPi9j2YxQl
sE1v+6idQevyDL7eb+A0eawT/D0iEj4o9rY2mdbXvn2usLwib7UeT5i9NLbN
EuK+cEUNmV2dVPaXlXfNW1JG1T9q3c9atpnT5+FPJROQ2ft3LuA+NLrb9O9I
z9QTrY//6fPf+hLrIlFbtsu00afUXlPVI81b1afclZ1CMv2RN0Gehibb8qfk
FD4mZ5U26g+46afwcge8LGcjNQ21h58tbNsa5bFp+ogzzyugsevpDa9xxh3v
6gG5OmTuNOCD2G7Uh+Zluh51o5elXmzHAuRL8fhQJJ8Iz60Hxebauab1tfN4
rrB81nrcYQnX4i2Dk5PKljxFv43ymvrSTX2UhqevKarv5bD5PPyp5C4ysCvL
evLKnoRe8pOGuCbAc6fwPGm6SV2TqSuE8lRyliOIRBg6jixMw1OwqlOmyFx2
5vFxW2gXc4ABZVtC1nk5Vzq7ulApZcByB9QodxGrzIPHiaWjgGfJc7qTemZ0
I/MdoO+LjmB5qFy9IV4WZrV9cp+rJXI5/H25jt1glrkAoWr/imce9KL1PJwr
LM+17rqEq8S6z6lo5/dPlrXycHzQeQfJQaU0T67u+jBy/JYgZCb2FJL1aui7
6/Olq8ahHNJh5RS92nTrHuEagiGBOqO73BxL5m3noeX7qT6obplinZBJ7ymx
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
JyYmlq3Zowc/kNyXx7ZTbc1aebs9WGJx40BH7QMW9b+w/mF1PmHbF4len7gm
c5i1jiY8ACDyjI+Pz1vVQi5e2NBXu+gBaqRT0/tS5z1ibe5o5Z7bsp2nyezV
8+/dV/kd7nu/LXpq6c85avqp8ragL8tPMq31rA2yn/svHz1Tvc+iXY6NL94y
yK1s+q658mYNfdwyaJmd4NCGB5eW1ZidzjuqE9dkGrPWs1B9AgCAwHl16Owv
ljdTgW/oaF2wtufZ4phlapr+ur+t8kZFfU3xz7gkf2LlzqCvyU+yoHWDifzt
Ou57+TXyuKpdPTbe9inFORXtlo3ed8zmoAy0DgAAvM7LTxfUP7nqOZtpYNf/
aF7p5p/PL+9Y+/d6yDQ17aXztrb028DpbLbOskCUtB5PrOBW3dSxeP1LPEMg
OfeJslbXJdT1Zr4eVG/Y0d9LMACtAwBAPGH2mvU7Ziyom/3MkoN10/7W0dr4
0FNzn/n5ss2rV5c7Pd1MbXZu1C9fMk/aaEFfkJ9ETOs6+vp9anObWvfUKtfn
potpQfVOO9Ir05cgQOsAAMBIpDT9Wxcrj5XNrV29ksdYqfW9fJ7NLLL8er7y
O7y2y+OLY1KqB301fuLXwqyh1Xo8Yfa33rmwOLbXsoT67OKtcyraq9rPObXH
q/aemzG/joPq1R1pi+xYvGUwC5fAQOsAAMCMj48XrX7OtuieH+suK13u9HRz
39o7h5rvLq9vkelostk6ywKRb60beHXobGr982qzvayxO2sZhtYBAEBwKsOp
3F5Q19NV/7D+dPOprXdfaP/BSM9ULsBjt4Kfg74UP8lnrbv2z6+o3vxsbZfZ
+wODZ7KWYWgdAAAEpzJ81rLNVIaXrtv7/NoH1aebj66/660d36P3HXWPBtU6
ywL5rPW4c/98SUPnoaNDX3/9tdn7e/YfzvJ660nND5C1pwsBACAQbMvwny/d
xBFT1AwvW7Fg7fy72ld9Z7Dpux/u/QFPELqsoYv73rPfOssCea51V8zez+bM
sUyyWs/pmw8AACmgzjtqeJH0qXX286Wbs9w6yzTpR8oZgFl8B1oHAAAzhmg6
tcf18RXbZxY1LGroDzq/PpO+1s2jvTCLv0DrAADgim00Hc8lW1+9NFa5qLi0
7GeLNlCamfOqst/vmlEyqnWM6voOtA4AAK7o0XSlm/p2VM+41HkPzyX76YF7
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
6SSU7GQpC1rf0/fO//bv/w96rz/Kl59al5nTvI+tG3ytCtdjMkNKS2e70+5y
IRL6RQ18L8/V8ggyR4Wp8EFsH9FyEpmrZ82FYbI5yYLWaXe2OZ9F75Z3zUaO
aitN6JLrWnroXypnnj/+kb9/rWEAWofWk8pSprXee+qf7y38EV+m4Vx8K9I/
YzpZzZrW47fGZPW+bifEF7o6bbVuThZ307prJ7wKtS5Z7mo4mROUUqbJVTFM
COMkMtfZ58yFYbI54e22U9XJVaejda7sqcP60LpH+KrJ6dSCyMRfa+BA69B6
UlnKtNbZ6fzcOrQueB9eZ2VINJce/atGBXtMFnfrhC/QBij1sXU1ATVsuZPf
/Mged3Hbql8GRvUoOEMnvHkcmcffnaoiyeaEKzyWh6o4vWvEgpeN+rhwalrP
6NS1GUV+e07Y7sXfi3enB6h1+Xk4oX6tf/nzlTdf6RrojJ0fOvDWW29B6xat
p/BTyQRO+bTdHgGtS1ATOd21opVvWo/fevZK14TKcAJ+L1rRj6P2GHtM5iQg
qRhYwtr1xr7F4F4aFOb5UpxCDmxFxl52HcUocOgSSSEncscsO/JUNpY0ejYs
l6A/4Mb/VbXONTHvWufvLncLfw4qMGBJL5VJwrvTA9Q6z9NlgBKMj4+/98Gl
LVs2dtcVXj1y31eDhSM9U3eUP5DT36yKj1pPU16+VAzySusXL178dnKPlQ0e
/9byTesyD4ztMm3cBlS1Iq1IVStstxSS6Y+8CTLrC5WZ/Kl8m5xV2qg/4Kaf
wgKPZRt6J+T5bktVR+/95imPvEzmw/v6lRORCE/Uw7PKqIWt7MirqkmeeUf6
90YCnqlGag6cE77DnIbuMD9QzxdO1ys31vZhdoa/lHx4bj2u/Pnwv5n+a80C
N2/ePPPur0saOp+u2Ptc9XQSuqzZfb7tB3SNTz75ZNB59AG/5oT3Revp6y+E
Ws8QUmQl9eeWb1pnem/Na80rsbIsKhLo3pEpp0glvbfmf9NLeNdk6ixntguS
WuZzo+PIwjS9iYlbpVbAp+C57JyWSKP0IkQeztbrEurEd3I3+CMOJJOs8rk8
RhvyT1HuZJo5UZuHcvm2kXUFt0cayNSLovL4rcYCz7ETv/2vhp8clCmD+Cy0
Rc4uX4T+rUXm8S4zRbeWM+aqlKFUMRD0RfwNcvrOjkPFGw9Xd14ojW359MC9
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
pOpqdkop0+SqGKamcdK36+xzTlp3KnmkY99S3XLVumRe7WCH1rNJsv6F1n1H
pmYyJ4PWDbDN+55b2VI67cXaOy8fuJenh31519yrV696P875oQPUPNcD5ulo
mct8mMmO1r0Pr7MoZfRWj5TmGDkJYveSLO7WCV+ghczpY+tqAmpiy7Tqhmvh
znZb9UtUgB4FZ+iEN49Es6Ztte4UrMjnSkrrcictIwupad01CBDYAq0Hizgd
Wk8ZfbL3/ro7ebJ3ancPtMzyfqiBzpjeVOdX5vIfZrKj9fitZ6+oGDdMKTOc
gN9zO1ov9uk4at+1x2RO0pGKgSWsXW/sWwzuZSDbPOOKU8iBrda5huA6imHb
81CUwDY9fyneO+GlNNMnt3GaPNYJvvOIhE+NTGi9wAi0LshfLrSeMk6TvZPZ
ZXpY70d7+9XOL/qm6U6nCkPmLiHMZE3rMg+M7TJt9Cm1/lTBSXtWNSPbLYVk
+iNvgjxbTWbnT8lQ0pSmHWmj/oCbfgoLPABt6J3gJ7z0qg5rXW0Ls0y9TObD
+9pupKvTV14r0DocvCz1YjthndxGj48x8onw3Hpq6J41S9lcDZBjelSw+USu
4rbNf65onbvp+KEYaD1lDJO9pzCP3NjY2CvbZ+iPt7/53COZu4QwkzWtM/L0
tCwSyuuEErpHSGdcEyAxyfxvukldk6nrjdoujWqZz42OIwvT8MSt6gQsMped
7dNh8UQ7lP/2C26tP6vXJdSJ7+Ru8Ed0LlnSVM7lMdqQTW25k5xnyhIdx/JQ
uXoJXhZmpX/1+88Ls6rX0ptYn92cVcwylw62Wjf//fqrde8n0r1vm/9c0ToX
DlythdZTxjArbGrTw17++DyZnUfY+fF2+u9vPjybofyHHHPFW/979AUq83ly
dddHm+O3dCMzsaeQTI9Y03eX2dfZR/zwtXxKOaTDyilsTa0mtpzOVuvmXPHM
eF7ujwrPsKePesunMu+9flj16nRoR6ds2F6Lq9YxJ3w6pKB1L8fMhNZTu7rQ
al0tW6D1lHHVegrTw46Ojr79aueLu0qPtFcMv96Dld1AZOAn10K+OBoPc4Q8
k2EGWg8D0HrKGCZ7x/SwAOhQ89njxLaBwF0KWG89HbKvdUvHHbQeh9bTwGmy
94F1d2F6WABs4fHuoHNhA09gC6enSfa1ribLtNazjGHsyTyc5FHrFvzOfq6C
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
AAAAAOQz/z/9ZPAH
    "], {{0, 241.2}, {401.4, 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->120.],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 
    Automatic],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->270,
  ImageSizeRaw->{401.4, 241.2},
  PlotRange->{{0, 401.4}, {0, 241.2}}]], "Text",
 CellChangeTimes->{{3.8506493193477383`*^9, 3.8506493293254604`*^9}},
 CellLabel->
  "Out[288]=",ExpressionUUID->"6840635b-ec4b-4e50-8aa7-c2fb3d257112"]
}, Closed]],

Cell[CellGroupData[{

Cell["Comparing Methods", "Subsubsection",
 CellChangeTimes->{{3.849986532217826*^9, 
  3.8499865335687923`*^9}},ExpressionUUID->"f5b64eda-1f6a-4e09-918d-\
7179b2d2c0a4"],

Cell["Notes:", "Text",
 CellChangeTimes->{{3.8500008326732*^9, 
  3.8500008330868225`*^9}},ExpressionUUID->"14268612-6483-41e7-b3c7-\
d06e03129336"],

Cell["\<\
These methods increase roughly exponentially, with SDP \[TildeTilde]4x faster \
than cMDS (which cannot accommodate Missing or bounded values, nor can it \
handle outliers well)\
\>", "Item",
 CellChangeTimes->{{3.8500008372843*^9, 3.8500008429716825`*^9}, {
  3.8500008762495766`*^9, 3.8500009002994957`*^9}, {3.8502689356128173`*^9, 
  3.850268952736117*^9}},ExpressionUUID->"05c5494f-e0f8-40d4-8dd9-\
39d4f1380d42"],

Cell[CellGroupData[{

Cell["\<\
The error is small in all cases, with slightly aberrant behavior when there \
are a small number of entries (so perturbations to the distance matrix can \
matter a lot)\
\>", "Item",
 CellChangeTimes->{{3.8500008372843*^9, 3.8500008429716825`*^9}, {
  3.8500008762495766`*^9, 
  3.8500009642746615`*^9}},ExpressionUUID->"267b8f2b-a5b2-415f-a01a-\
34a76d952b5d"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\[Sigma]", "=", "0.1"}], ",", 
      RowBox[{"opts", "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Joined", "\[Rule]", "True"}], ",", 
         RowBox[{"PlotMarkers", "\[Rule]", 
          RowBox[{"plotMarker", "[", "]"}]}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "270"}], ",", 
         RowBox[{"PlotRange", "->", 
          RowBox[{"{", 
           RowBox[{"Automatic", ",", "All"}], "}"}]}]}], "}"}]}]}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"res", "=", 
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"method", "===", "localRigidEmbedding"}], "&&", 
            RowBox[{"size", "<=", "10"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
             RowBox[{
             "LRE", " ", "defaults", " ", "to", " ", "a", " ", "single", " ", 
              "MDS", " ", 
              RowBox[{"(", 
               RowBox[{"SearchMethod", "->", "Automatic"}], ")"}]}], ",", " ", 
             RowBox[{
             "which", " ", "is", " ", "a", " ", "different", " ", 
              "algorithm"}]}], " ", "*)"}], "\[IndentingNewLine]", "Nothing", 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"coords", ",", "distMatrix"}], "}"}], "=", 
             RowBox[{"exampleData", "[", 
              RowBox[{
               RowBox[{"size", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "1"}], "}"}]}], ",", "\[Sigma]"}], "]"}]}],
             ";", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"timing", ",", "coordsMDS"}], "}"}], "=", 
             RowBox[{"Timing", "@", 
              RowBox[{"method", "[", "distMatrix", "]"}]}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"size", ",", "timing", ",", 
              RowBox[{"errorMDS", "[", 
               RowBox[{"coordsMDS", ",", "distMatrix"}], "]"}]}], "}"}]}]}], 
          "\[IndentingNewLine]", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"method", ",", 
           RowBox[{"{", 
            RowBox[{
            "sdp", ",", "classicalMDS", ",", "metricMDS", ",", 
             "localRigidEmbedding"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"size", ",", "5", ",", "30", ",", "5"}], "}"}]}], "]"}]}], 
      ";"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"res", "=", 
      InterpretationBox[
       DynamicModuleBox[{Typeset`open = False}, 
        TemplateBox[{"List", "ListIcon", 
          GridBox[{{
             RowBox[{
               TagBox["\"Head: \"", "IconizedLabel"], "\[InvisibleSpace]", 
               TagBox["List", "IconizedItem"]}]}, {
             RowBox[{
               TagBox["\"Length: \"", "IconizedLabel"], "\[InvisibleSpace]", 
               TagBox["4", "IconizedItem"]}]}, {
             RowBox[{
               TagBox["\"Byte count: \"", "IconizedLabel"], 
               "\[InvisibleSpace]", 
               TagBox["2872", "IconizedItem"]}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
           "Column", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
          Dynamic[Typeset`open]},
         "IconizedObject"]],
       {{{5, 0.015625, 0.016096110355933623`}, {
         10, 0.0625, 0.019681840555023217`}, {
         15, 0.203125, 0.003993938638143956}, {
         20, 0.703125, 0.004243551746308}, {
         25, 1.96875, 0.005811209318986089}, {
         30, 5.21875, 0.005058519106327065}}, {{
         5, 0.0625, 0.0020750732643805276`}, {
         10, 0.234375, 0.006090856324464819}, {
         15, 0.828125, 0.003004040116702339}, {
         20, 1.859375, 0.0032456020112200607`}, {
         25, 4.09375, 0.003422909298990009}, {
         30, 8.09375, 0.003362011304389866}}, {{
         5, 0.453125, 0.0006491805616827357}, {
         10, 1.890625, 0.0019611044250222483`}, {
         15, 7.046875, 0.0020495409429558474`}, {
         20, 13.609375, 0.0025204735964569724`}, {
         25, 32.703125, 0.0025681517645686426`}, {
         30, 61.5, 0.002809746612106928}}, {{
         15, 3.421875, 0.002049540942955847}, {
         20, 5.125, 0.0025204735964569746`}, {
         25, 9.03125, 0.0025681517645687025`}, {
         30, 11.28125, 0.002809746612107085}}},
       SelectWithContents->True,
       Selectable->False]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Grid", "[", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"ListPlot", "[", 
          RowBox[{
           RowBox[{"res", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "All", ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "]"}], ",", 
           RowBox[{"AxesLabel", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
             "\"\<\[NumberSign] of Entries\>\"", ",", "\"\<Time (sec)\>\""}], 
             "}"}]}], ",", 
           RowBox[{"ScalingFunctions", "\[Rule]", "\"\<Log\>\""}], ",", 
           RowBox[{"Evaluate", "@", "opts"}]}], "]"}], ",", 
         RowBox[{"ListPlot", "[", 
          RowBox[{
           RowBox[{"res", "[", 
            RowBox[{"[", 
             RowBox[{"All", ",", "All", ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", "3"}], "}"}]}], "]"}], "]"}], ",", 
           RowBox[{"AxesLabel", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
             "\"\<\[NumberSign] of Entries\>\"", ",", "\"\<Error\>\""}], 
             "}"}]}], ",", 
           RowBox[{"PlotLegends", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
             "\"\<SDP\>\"", ",", "\"\<cMDS\>\"", ",", "\"\<mMDS\>\"", ",", 
              "\"\<LRE\>\""}], "}"}]}], ",", 
           RowBox[{"PlotRange", "->", 
            RowBox[{"{", 
             RowBox[{"Automatic", ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", 
                RowBox[{"\[Sigma]", "/", "2"}]}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Evaluate", "@", "opts"}]}], "]"}]}], "}"}], "}"}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}], "*)"}]], "Input",
 CellChangeTimes->{{3.8502687504520435`*^9, 3.8502688013529596`*^9}, {
  3.850268904655072*^9, 3.850268904798009*^9}},
 CellLabel->"In[84]:=",ExpressionUUID->"2239006e-0dac-441e-a500-6fe83658b3c7"]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
a/rcZeJ3AzABrR4AAADYJ7oQIn0tGu1NrVMksX4Rej7gSJo6inKrT17OXCad
8c8mv59SqqprThka6RO+yXe3jYft27zjEy/fJafDg+vq6qb/izig8bGxrvaR
+pqhsmwm6+ZA3Nm+i4E9J7d1B6zq2vZxx1dv8EJ9wMtPklwvmvfJJveXAQVb
/gO5CwEAAAAwyaK8Tw9mH2nEhT4PKF1n78OS+5dj8r4+FvuqRMYPiX89Nn9L
2cNr3f2Ncpc8HaZ/ZfuxbsNIw73h8hwmO3Yg/lzfpaCeb32MBzy6fBZ0rHM1
ldxNbSGvPlP9yVzRP5H9tv4u4MDQ6gEAAID9m0TeF314H3o+oESDQ901TbeT
iv3DkuZJDeVHv3g1a2XevdMtnWVylzytbLGy/ZixY0RXO1xxh8mJG7h1vu9y
cE/oduPBNV3bF3as/3v70v+xNNFLb6Rgson+KeFDzOeHyUOrBwAAAPYPeR+c
UEN7flbl0YsZn0tP1z+f+nF62YH7rZqRsSG5S5bB5Fa2H+vpGm2sG67MY3Jv
DSRc6FMf7j2103hwbdeOTzs2vNm+7HfWjfNk61j71y5vt+797j0nvPsiDw7E
nmEyY4ZKs0YeVo116pmB/hMbVwqH+Mme4ys/ns7/nuBg0OoBAACA/bPifH4u
W5ULMFntxtpC7YXo3HWHb74skfG/TXC9VbCtoiGmd6BV7pJlJr2yPXMnYeB2
ZP+VI72ndxkDv+ra+VnHxn8YvnzJ+nF+zeud33zUvW9lT4hXX8SBgZthg5ro
oZLMkQeVY52tj0ZHJvwiOp0uaMUnpGY6S4H8vD5vTsjaLyoKsHwiTB5aOgAA
ALB/WK8PHFjfYHuVLu524Y7Q229JZPzgG7+7nrPmbm24vrta7pLtyLV9PhIr
21srzhs8/tLp9UG3akXP8a19F/b3x5wezIgaKs4YuV8x1tEyPjI89S+i1+uD
d3yx4+P/7+C7T+x56z/2vfPEjnf/dc/G+VO5KwEArR4AAADYP4nn8fHG8Sd8
Hh9G9sEejI2PPGzLzqgIupC2UHq6fkT6p5qK4Hp97vj4mNxV25GxjlYm73Zf
RMCBv82Zeq43rH6tc+v73Xu/7Dm2pe/8vv4bpwbTrw8VpY9oy8cMzePDjK2/
DsMwp1QrNHuerA/9BXcrCnw6yGeRrT8dHBjaOwAAALB/onk/JCSE7CQ/uTsj
IyPJTnd3d9H3Qc8H5NXWVZlfe/Za9upDN34rkfFP3X77dtGual18P9Mhd8l2
ZERXO5h6tSd0e+eW99ioLr2y/fdxftWrnVvmd+9Z1nPUs/ecqj/628G0a0OF
aSN1paPtTeNDg3J/s0fZmmT1N7N5YZ9ulzc/IXd1oGBo9QAAAMD+ieZ9rVZL
ds6cOZMd4jcYDLNmzSI7yZ9E3wc9H7AWhmEyMlMCj3p7+S45FrYtKdnkA+B6
BprL66Pj735z8tYbEhn/yM0/3rizvkgbaeipm84vYtdGR4arCwZiw4yHNnSs
/aupm/RNrmz//txRvW6cGZD7a0xMfWKrcHCfbrUh4rOVAMyBVg8AAADsn6kl
9+loPon8Xo+RF+RXlUpl6n3Q8wGr0Ov1O1TL1/jN8Q2fs1891zvkeQ//2Zt3
fMLeaj08OqhtSU8r238u5SPp6fqXMhZnVx3TGe7K+43sx5ixc6gwre9ycPee
ZRM+9s6w/GX97i+Pub2u6JXtB5tz9nm8RHK9aN4nm9wFgoKh1QMAAAD7J/GI
vdjYWBcXF7pGH3lBfpV4H9y/D1PHMIx/4GqS8XnJnWT/Ddvev1MTqs5cLp3x
zyS9m1yy+15TEjNslPvb2IXRloeDmhu9Z/y7vN0mXgl//d97jmwauHVuuLaE
nq7T6Q65L+SubH9j/ot2vrL9iLG+typCn7S64ewLJNEHf/lvRYFPi4Z9sl/u
YkHB0OoBAACA80CfB6YuIzNlveoF0SDv4T/bVMY/Hvfnm3mbSx6ou/rq5f4G
dmFEWzaQcKHnqOd3z7ufKON3fvNhb5jvYEb0aPN90XdjGCYtIT5sqwcJ/uRn
VFiI0Wh311LGx4YHGlI7c/yar74pvEmfbKJ5P3r7s3IXDgqGVg8AAACcB3o+
MHXHwrYJB/fptl89l7dHnfllbs23zR0lclctv/GB3qHSrP7rx7v3rzKs+OOE
Gb/bf0nfpaChgpSxboPctU/JcGeNsex0262l9ad+aWrGfm3IrIMrnxUO8ZM9
R7zny/0NQMHQ6gEAAIDzwMxGmDov3yXCXM/dwlM+TC3dr21JGx5VwEpxNjXW
3szk3uo7v69r56fmPOPeGLSuP+b0cFX++MiQ3LVPydhQT//9+I5M76ZLr5nK
+GRrjHjZkLaprzZqdKBdp9MFerld3vwEyfgk/pOf6m9mH92+sLwkT+5vAwqG
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
63lJn2T/B21ZcpdmRxiGydYkhx3aGuSzSH1ia2pSnNFoZP9KYr7RnJjfqtSY
zwyNJuQ+8DqeIYz5HgGJ6uRqfWe/3DUCAFo9AAAAcBDI+1aRW/NtYPRvuEn/
aOyfCrURctdlX8pL8o54z4/e/mxR4NO1IbM0e56M8/nZnvX/KM1PNpadao35
2HTM/0vnnT1M6125v8Hk1bcYw+PKl/rHC5P+rtPZ6UU6uQsEgB+h1QMAAADH
YNF8/mmrSkFqGm+fSZ7PG9ZPLtkzMNQld2n2Ra/Xk7B/Z/9TvCxfceSZHR//
H/GYf1nxMZ/Iq2zZfyFPdOr+iaji6voOuQsEAD60dwAAAOAYML4/afru6ujc
dbykfzVrZVNHsdyl2aPrEcfifH4mmuuTfH/+05j/euedvUxrgdwlT0lP/1BM
Zt2mw6nCmL8+KCUqvbarl5G7RgAQh1YPAAAAHAPy/iSMjA5mlAfykn5owpsV
9dFyl2a/jvktrTjyjGjerw2ZRWN+F4n5bcqI+Xq9/tS5K1t2BW303qe+FkN+
Zf9Uq+s6daNUdEB/b3huTlmTjGUDgDnQ6gEAAIBjwHx+S5U9vHby1hu8sJ9Z
ETw6Nix3aXbt8JZ/SOR9pq1Q7gItUFBUsnyD39vuhz/yjFjgpSYv3JZtrqys
zCpp3H0mRxjzv/CNC7tZdr+pW+7CAcAsaPUAAADAMXh5eZHIX1wsNQUdfR6q
0VCgzvySl/Rj7mw0GGvlLs2uDejSW2M/Pb/hP3jz9tlNs+dJuWu0gNFo9PDc
88HGs9xET4L/H95dQ7I/L+l7Hk2Ly9b2D+JaEICSoNUDAAAA54GeTz9jSCr2
4yX98JQPapuT5C7Nrg0257YlLGPX5dv92b8UBT4tXK/v8JY35a7UAjdib7+3
Olg4iP+2++G/LfJjfz0QkV9Q3Sp3sQAwGWj1AAAAwHk4ec+noO7ckZt/4Cb9
Qzd+m3fvtNx12TVGX6xPWs2L9nf2P7Vr6X/F+fyMZPzakFkk+5PXJOyXl+TJ
Xa8F/AJO8Ab36bbQJ+qld1Z/uefW+VsVurYeucsEgMlz8lYPAAAAnIrT3sl4
vzXjQtonvGH9hMLtPQMtcpdmv4Y6qtpTNwgn7Xdkeo8Y6/V6fdyV0GN+SwO9
3E6pVlyPOMZd6U4RvljjQ6K96HJ88xZtHB4Zk7tAAJgqJ2zvAAAA7IGKw2Aw
SB+s0WjYg7VaLbufvFaZFhsbyz14wo8ICQmhJ5IX0nfBK5cT9ny6euvj7m7l
Jf2LGV/U63PlLs1+DXffN2i8hEnfkLZpuLNG7uqs4F5D56FLd1/5YNNHnhHC
sE92+uw5LHeNAGAFTtjqAQAA2IMZHJGRkdIHu7m5sQdz158nr2dMxNXVVWLJ
eoPBQAL+zJkzhSfOmjWL/MlqX9g+OFvPJ6cqhJf0j8e9Vnz/ktx12a+RvubO
7J3CpN+evGaovVTu6qxA29h1RF1Ic73rEtVbXx4UvX//wsWrclcKAFbgbK0e
AACAneAmaxLnJY4kkZx7sGjed3Fxcf0psmfCSwrknbmHsW9Ckj73coH1v7x8
nKfnU62LD0ucxwv7qaX7mGHcji1udLCj645KmPT1t5czLflyV2cFD1uMx68V
Ce/T5w3xk53LN/gp7t4EABDlPK0eAAA4EoZh7uRnngjb5x+42st3iV/AV2EX
AouKiuSuywK8wXSJKf0kqpMD2CF40bwvOoJP3jMkJET0RMrd3Z3+ycvLi1eA
Vqulj7MnHGmU3xnu32/tqozKWctL+teyV7d0lsldmp0aH+7rLghqCHuel/Tb
4hYNNpqcG6Mguraek1HFwnH8Y1eL0nOKF7p7z/MIITGfbO+tC31/mXdBUYnc
JQOAdTh2ewcAAA5J+6Dae/eiVT6/8Q553jd8zn713D0RvyavV+74xYZt79fV
1cldoFnYIXWJ8XeKTuZns7n5eZ8qLi5m5+eL1iAxu4AO9M+cOXPCFQaUwrF7
PkMj/WllB3hJ/9Tttysbbspdmr0aHzUWH9eF/4aX9Ftj3AbqHeEBhc3tvadu
lAqT/mF1QV1jl9zVAYDNOXarBwAADoZhmLiEq8s9f0fSPS/U0I3Ef/LX6Ljz
tquBBHOVSsXm69jYWHZxPO5hWq2WLn9nau07drY8jfOmps2T96FHkvefXN5/
9HhtQOFVBfZcXuW8L2vO+yuIA/d8Sh6oT8S/zvt/RFbl0fFxrLIurqcsrDHi
ZV7Sb4l6t1/rCJdH2jr7z8SWCZN+0MW7NfWdclcHANPEGWa1AQCAw0hOi1nl
85v96rmiYZ/dvvR6PipmghXwJo3OcqcBn7fM3axZs2i09/Ly4k3Xd3d3570P
m/fZIC+6ln5ISAgdgheN9mbmfXYFAO5QPjvuLzFdn67/T1I/xvfthF6vj1Af
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
F5aeazAYyIlarXaK74yezyT01lxpuvxX/vL7sZ8ONmbKXdokjY8/upVzf31Q
Ci/pL/WPv5RU1dXDyF0gAIB1oNVzDI363pWqBLa1Ik2Y3BUBAAD8iKR1FxeX
GRzk1+JiCx7L7ubmRs7SaDRTfGf0fCwyUJ/ccuNDXtJvvvqPPm2M3KVN0vDI
aExm3ZoDSbykv0KVcDW1pndgWO4CAQCsCa2ewyisaeM2WwXVrXJXBAAA8D1X
V1eSxFUqleEx8oIGczNPd3d3p1lemPctfWf0fMzEtBXqE77kJf3GiJd7Ks7J
Xdok9Q8OX0+7t1J1m5f0PQISb2jqmKFRuQsEALA+tHqO5Fbugx8vU+9N0LX1
yF0RAADAd5PtSQYnwZy7k0b4yMhI6XO1Wi1N9KJ5fxLvjJ7PhIa77xvSN/MX
5Tv9q+7C4PExRQ5/G/uYy8nVy3bf4iX9dYHJcdn/f3vn4RfVlf/9/Rfyep79
bcpm97frbrJJdpNNHhPTe2KKicYYiTHR2FBiiVERJQQbqNhQREWlWBAUrCBN
qlJEOkjvvQy9D/05w4knN7cMAwzce4fP+3Ve85q5c8v33PY9n1O+p7h/YFBu
AwEAYKIwf4DchgDjcD4oi3mxX05G9/SishoAAIDMUAHOG1mflpYmlOo8yCYP
PfQQWc3MzIx22ufp/THsGWUePQxom5vi9wjD7zfF7ejv1Mht3VhoaOnyCsn+
fmcgT+lbHo0MTSiV2zoAAJhw4PVMj4NeicydHfVJltscAAAAU51p06YRAS4M
tUeb7PVs6ODgQPQ+bamnrfw8vT+GPaPkI0Vr2onys8/xw+9H/NTblCe3aWOh
trHjbGCmcIq9rcdvRyaXy20dAABMEvB6pkdHV6/VsdvMr10MzZHbIgAAMCmI
5KSh4KVixUutL4WLi4twWDqFHEL/tlwMtGfykVLfVK03NDRIbZiWlsb+FdX7
Y9gzSj5C2nMvVl58i6f064K+766Ol9u0sVBR1+bmlyFU+ranYmLSK+W2DgAA
JhV4PZOkuKpliV0Qc3ARSWVyWwQAAKYDjQgnGjtO//r6eeihh4RzyZFDGLLt
qOyZfKRUuaiEl2JUel/PnlHy4dJZElJzfQ5P6ddcm91ZEiy3aWOhpLrF5Vqa
UOnvdIuLz6yW2zoAAJABeD1Thfg1rqfLLKqX2yIAADARxqz3pdrludPJ8SQ/
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
/aS2NnFoaFBue3/joFciKxU4+STLbQ4Q4Zp/yBerj/CKcCTNsjh64LhXbmlj
WW2rprmro6t3YFBBtxYAAEw0KPlQ2rt6uRX4NP2w79ateyVymwYAAMBoYBTb
5NPTkN2SeqzGbx5R9E4r/pTq+DdRsU+Wk39/W+L+VG3At81Jjl0VdwZ7O+TN
AhGJW47dZsWDi6E58tozlenS9pXXtaXm14UllJILcexyyk632HWHwt4ys+Y1
7tO00Pb6y5+t5i003xPyo2P41uO3d7rF7b+QQHbi7p/hfSvnxp0CUvCLTqtM
zq3NLmkoqW6pa+xs6+zp6x+YzDxqtdqo2zH2B46vs7JzcPIICQ1HFwUAwJhB
mYcQdLd45d4Qni/wCskmPkVu0wAAABgTeL1Jo7v6blP8nirfD3mD9EkS1fvX
rf/sueFRqab/mhtzm+LtO0uC+7vqZclOcVXLUrsgVkgITyqTxYypQ2uHtqiq
JSG7hhTSzgdlHb6Y9MvJaGFgJZaIqCfSXvSvFz9eKbWV4Wn57uC1B8OsjkVt
d411OH/vqE+yq1/GhZDsa1H5wfHFt1MrErNrMovqic01DR0t7dqevjGO+6BR
CL5Y7aQbjGB7/Yv1rrMsjn63aisCEQAAxsYUL/kQP/Kzyx3eK93JJ7kcAXkA
AMAUmeJeb6IZHOjtLAlpuLOlwnOG1CD9gyv+KmziJ0uObHitOtySVz8gmqov
f9QY/XNH/tW+1kkV3fcyq7mlhftF8tQ8mBgNLV15ZY2xGZV+0YXuN+/v90zY
cuw2Edej1eNvzLMkAlm4nCwkf41f748hLbUPWnMg1PJolO2pmL3n4o9cSjp1
Pd0zOOtKZF5gXHFUcvm9rOqMQk1hRXNVfXtTW7e2p1+j0RCxL+yosMDad+73
mzDdAABgDEzZkk9xVcsh70Te63Tb6ZjUvDq5TQMAADBRTFmvN6H0d9W35/lq
Qn8oc39KUqRfndWceEBbm1xRUeFobeaz+TGi8Yn8J5++Pz9xbNvCzPSEX/fW
UdtZFNAUt7Pm2uwRtX/lxbfqI39qy/bsaZyMPvb+0YWszLD2YFhdU+ckHNQE
6O0bqGnoyCyqj0opJ2r35PW03WfvbjwSuXhn4HgEtfmekK0n7hz0SjgTcN/u
yIVPVhwSrjPL4ujRU5755U1pBZq796sikspuxhb5RuSeC8x0uZbmeDFp95m7
NiejNzpF/rD/1pJd47Jn/Om9b7cTg0X/mr3G5cLFK3JfSQCA+piCJZ+2zh7y
kue9RVfvDw1NKJXbNAAAABPLFPR6E0dvS1FrhmttwEI9erz25jetGad7mwu4
G2q12siwQDeHlUT4k89rXselhicP9LR2lUc2Jx6ovbmgzO1J/dq/4vyLmlur
WtNPaWsnMKSem18GKzzsco+buANNJsIB42PbT2d3X3ltW2peXejw4Hrnyyk7
hgfXj1MFk0Ka7akYJ5/kCyHZwfElSTk1JdUt7Z09vCwsWWvLa+JfaHvdfIPd
qJrFtT39TW3dVfXthRXNGYWae1nVUSnlgXHFVyLzPIOzTl1PP3Ipae+5eNvT
MZZHo9YcCF1qHzTO3HHTq3PWL7D2Ff2L5IVcnbFdFwDAVGaqlXwC4orM9/CH
6nuH5nT3YKg+AACYPlPN600E2rqU5qRD1Vc/k5Tebv/ShFq0517q7zRm9+PB
gb7u6nstqcfrgpeVn/2vfu1f7vFMXeCiluQj3ZXRg31dRjSDsOdsPJNgm/ac
Hb9Mlhcihzfa7Ju1fC8bMD5zqcPKDTsqKiqkNmnp0BZVNidk1RAhTAfX2+gd
XG9gWu8Yvss97sSVVJ/w3PCksvQCTaWmvbvH0IHwhYWFCy1sZq9xIbmgGfly
uU1yarqRzpMkvX39Le3amoaO4qqWzOL6xOyaO6kVwfHF16LyvUKyXf0yjvom
7zt/b7trrNWxqHUHw/SMVtCv98lFmei8AABMj6lT8rmXVb31BH+ovrNvSqUG
Q/UBAGCqMHW8ntHpKo9qjN1WefFNyeZ1z5cablt1lgQP9msnwZ6e+oy2zDP1
4WsrvV4dsdt/zY15TfF7OktC+rsaxn/oprbunw5HEHVM1NkHi+wMl8kKRKvV
btl5mBjPKyCRTK2zsqtv6cota4xNr7xxp8DdP2O/Z4LVmAbXc9MSuyDLo1F7
z8W73kgnivhOWkV2SUNdU2f/wBSaJq+vf6Cts4fkuqS6hWQ/Obc2Oq3y1r0S
672us9e4iJ43co1OuHnJbTgAQH1MhZJPUWUzd+Zcmra7xqblY6g+AABMLaaC
1zMiAz1tHYU36iN+0tOeXuX7QVO8fXeVnD3be5sL23MvNdy2qvJ5f+Rwf1c+
aYz5paPgel9b+ZiPmFFQ88Y8SymZbMSsGQgRyz29/V3avvbOnpZ2bUNrF9GS
1Q0dFXVtpTWtpCCUX96UU9qYWVSfXqAh6jIhu+bu/aqY9Eon92uzVuwXFZgz
lzqMR9eb7w2x1g2uTzwTkHkzppAcrqCiqamte/JPjopobW2dv3yrMPDgAmvf
79fuVFdVEgBAIZj2TMTE5REvw3tnrj0YFp6IofoAADAVMVV/Z1z62ivbss7X
BS/V22L+ZUuKc09DltzG8unvqO4o8m+M21F97fORw/1dershamN7jldvU96o
jhJ1O0aPTCaaOiWvNjG7Jj6zmmjq26kVEUlloQmlwfHFAbFFftGF16LyL0fk
XQrNuRCSfS4o0+PmfVe/jJPX0o5fST3qm3z4YtJBr4R95+/tPhu/yz1uu2vs
L6eiiXa2Oha1ySnyp8MR6w6Grd4futIhZPnu4CV24wox9+7CbcJaC9aB3JA9
rD4Quu30r4PrQ3SD62tLq1vbu3pGPokTgEajuXnRyc1h5XG7ZUE3vNQY0J6I
+m9WbH7vq3VfzZ/39ZfvL/lu7ttzfyBifxIGJgAATBITLvncjCkSdjm7FJbT
0zvGGVEBAACoHRP2euOHiPeWVOeaG/P0COS64KVtWef62tTRzjigbekqC29O
2Ffr/3WZ6z9HCPfn+ZIm1KI1w1Vblzrinh2cPMYpkxWS6LT1JM1Zucdswdff
zPtw+dIFny3bKVxz/eFwO4+4E1d1g+sjhgfXV2natQYPrp8EMtMTnG3mBto+
nur4tyznv5Mvu9e+p7pp6zUajaPNwrMb/kYnsIje81efzY/t3TQHjfsAgLGh
9pIPeSu6nb+8ZefhjTb7fK/604rc+MzqLcdu8/zUscspVfXtctsLAABATky7
V9vY6K6+2xS/u8r3A8nYd2efq49Y31F4Y6BHPIq+Khgc6CU5bUl1rgteQnI0
Qri/M/+pC1rckuLUXRUrGo5gnZWdgTJZ4emNeZaz155c9PXH7ut/JzAXzXvn
sx+cox8Mrh9Q/OD61tbWY9sW3tv/v9zrSHJ0YOOHUrM/KBCtVuvmsJJcAt4N
STJy2HYR+VduAwEA6kPVZZ7k1HTzDXazLI7Ot/JaYO1LvsxZtHHTvks8X7bT
LTajUH0dugAAABgdVXs9IzLY39NZEtxwx6rCc4ZkX3fvNxtjt3WVR8pt7ITQ
o0lvu++uCVtdceHlkcP9+c1vvre3qzR0oLuJbm5/4LgemaxfYn+/K3CZfZD5
3hCLfbfWHAxb7xi+8UjkZueorcdv25yM3nY6Zqd7nP2Zu3vP3dt/IcHRO9HJ
J/nY5RSXq2mnb6S7+2ecDcz0DM7yDs3xDc+9Gpl/407BzZjCoLvFt+6VhCeV
RaWUR6dVxt2vSsiqTs6tTcuvu19YTzR7XllTYWVzSXVLeV1bVX17XWNnQ0tX
c5vW99rNBXNeFxWY82e9Ku81+pXBgcGB3sG+7oHejoGeVnIJ+rvq+ztq+9qr
+trK+1pKepsLe5vybvkeuWEr0oUj0PZx/3O7tXUp2rpUrSaNXPee+oye+vs9
DZk9DVk9jdk9jTm9jblkD71N+b3NBbq9tRT3tpT0tZb2tZbpDtFW0ddeqTtc
R3V/R01/Z21/Z11/p0ZnRlfDQHcjMWlA2zygbdGZ19M20Ns+2Nsx2Nc52Nc1
2N9NnjWd/QN9QwP9JC9Dg/pqTuKiw31/fiLL+e/7Fj9s8d6flr36P1s/e2zH
gj+RjJC7K+gG4vUBAEaNeks+ra2ta6z2zNt4lutDifB/+bPVbCqTdYfCIpLK
5LYUAACAUlCv1zMKRKG05/poQi3K3P8lGc7u6qzmxINEH8lt7ORBhF57zsWG
KMuqS++OHO7v6qzG2G1X3HdKyeSvZr1aXqvT1LWNnfUtXU1t3W2dPZ3dvdqe
/r7+Ab1qz7gMDsvkLp0CJRq5U9PXXk3Ua29LEdG2OqmrSdfWJodecbqwiZ8L
mojAbM/xass635Z5pvW+W2v6qda0Ey0pzi3JR5qTDjUn7G+6t7cp3r4pbic5
IY0xNg13tjbc3twQubE+Yn19+FpN6A+aWyvrQpbXBS2pC1xUG7Cw1v/rGr+v
am7Mrbk2m5zG6ssfV/l+WOXzXuXFtyu936j0erXCc0bF+enl554vP/Nsuccz
w3fpCKMwWHKxePje/v+N2PWXX+Y+8uN7j1i8+bD1l38iPwtcpu3+7o8G7mQS
0z/L3J4oc3tSl0f3p8o8nib5Lff4t/uPj3tueJQY7/XxE7nfPF+1eHriV8/6
ffIv89cevrr1z4dtF03a3QMAMBnUW/LxC7j1xWonYbX5LIujHyyyI198wnN7
+wbkNhMAAICCUK/XGw+9zYWtGadrb36jR4AQOUbWIWvKbazM9LVXdhT6EQFL
BKme03XZ6jHPjY9LyeSexpye+vu6BuWaxO7qu92V0V3lkZ2loZ3FgWTnHflX
2/N8hqX0ubb77kRHt6Qeb0l2GhbR+4YV9I7GmF908jnKsj7yp2HtbKEJWUGE
c23Ad7U3F9T4zau5PmdYMn9U5fP+sF5+veLCyzqxfPa/RDbqhKRhwtN93SPR
e/4q2qBMlLLcongUiYj6kz88uv6tRyNmP0OUcvF3L5Avq2Y87Lbuke1f/1/Z
zTMw2X79f3587xGi8euXvshNJEfk0mxfN1vu5wMAoD7UW/KxO3CS17hP00Lb
658u3FTT0CG3gQAAABSHer3eGNDWpTQnHtSnW93/RYRke65Pf1e93MYqkYHu
pq7S0OZ7DjV+80VlsuhZVZ1MDtnxuGiDsr+NeIWGMtOuhX9c/cbDGWbP8WTy
2lcfJX/Jbp6B6ft3H7o860me2KeJXJRFn70o9zMBAFAf6i350FA5oiPjlq21
kds6AAAASkS9Xo+i1WrjosM9jmw9bLvI9+TWyLBA4Tpd5ZGNsbaV3m9IaYoK
zxkNd7Z0lgQP9sszaZoaGezXdlfFtqQ41QV9X37mP0QmE10v2iyurrRv8R/X
viPeoLzklf8RrP9EmftT5R7/Lj/7XPm5FyrOv1hx4eVKr9cqvd+suvROlc/7
Vb4zq698Un31s5prc2pufFnjN7/25oLagG/rAhfXBS/VhKzQ3FqlCVtdH76u
PuKnhqhNDbetGqKtG2N+aYzd3nR3V1P87uZ7Ds2JB5qTHFuSnVpSj7WmubSm
n269796WebYt27M9x7s916cj/0pHwbWOQv/O4gByG3eVhnaVR6xf/IH/7KeE
Mjli9jPLv3xdW5PQXR2v62tRFddZFtleFNKa79+cfaUhw1uTeq420bUm3qUq
1qnqzqGKCIeyULvS4O0lATZFflaF1zYWXF5f4LMm39siz3NF7rmluR6Lc9y+
zTm1IMdlfvaxedlHv8g+PDvb8bPsA59m7/s4e+/M7N0f5Ni9l7Pz3Zztb+fa
vpVn82a+9ev5W14r2PxqoeUrRRtfKf7p5ZL1M0rXzShb81LF6pcqLV6qWvVS
jfmLdSteXP/mY8JrQVPV4umL3vin3M8BAEB9qLfkY3/g+HwrL6HYJwtt9xyV
2zoAAABKRL1eb2h4SprjdssubP4HN0Cco7VZRUXFQE9bR+GN+oj1eiLPV/l+
QPRUd9VdufOhq7W4ExPheMzGetfS4x6/hIUHqSiCOsV1z/JrW/4s2ix+YcOj
o9bdbk/qhm+ffa7i/P8bVtCvV158m8jn6ssfVV+dVXOdaOd5tf5f64Rz0Pd1
Ics1oavqw9cMS2bLhjtbdXo5bkdTvP2wWD7YknxEp5TTT7bed2vJcGtMdtHc
O1Ybd7jyzv7yiN2lITuKiZK9blVweUO+95ofPv+Pngbl3P1zcvf9lvIcZuc6
zM7b+7ku7flMl3bP0iX7T3XJ7pPh9HHero/zdn6Uv/OjvB0z82na/qEubftA
l2zfp6ngl/d0yeZdXfqZpHcKrHWpcOvbw+mtwi3DyYqkN4tI2kzSG0WWulRs
+XrxpuG0kaTXSPrprcd5jftMJi+Z/nDNypdqV7yoWS6STUWlZdMfJgZL/bv0
zSflvvEBAOpDvSWfkNDwT1YcEh2/f+HiFbmtAwAAoETU6/X0TNS11/xpPVqS
SMWWVOeehiy5c/AraemJVrvMLA89v+vcs/t9n7dxeWaT41Nrt8xW1zzpAX6X
V735sGiz+Hcz/qer4nZ3VWx39T1tbbIuIHxDli78e0tRX1tZX3tVf6dGF9G9
p00Xv32g97eA7YMDPV3NnY1lrVWZTUVxmuzQmpSrlfGe5bddSm85FvvbF16x
KfDamHdmdd7p5bnHvss9bJa7/wsit4mgJsKZCGSigkt+erV87cuVP8yoMX9J
s2xkgWn9zl/0NCjLrn8NT8ullfKSF/4ku3kGptUzHiW3kOhfZPlPX74u610P
AFAlqi75LFlry2viX2h73XyDnUaD2fcAAAYRGxtrb2+fmppKf4aGhnJ/jnPP
FP3/SlFQUDDaI9bXjzAEm+xzbHs2JdTr9ehEXaKK3mfzY8KFdcFL27LO97VX
ym347yAOmoj97W7/cbz+Ajft8XpuxYZ35HDfg4ODAwODff0DvX0DPX393b19
XT19Hdredm1vW3dPS1dPc6e2sVPb0NFd395d19ZV29ZV3dpZ5bjfRk+zeEnQ
vqLrOwp8tuR7rs9zX5XrsiT36De5h+bpGsftPsnf9kHBz+8UWb1ZvPG10h9f
qVg9o2qVrvVZaTJZXUlKKZOF6155bIIOqln+Irlw1StfqrJ4qfKHGeVrXi5b
93Lp+ldKNrxavOn1os1vFG55q8D67QKbd3VdGnbM1PV8sP9U1zti/5zcg1/m
Hp6f6/SNrurG5fu808vJrfLLt6+Q+0f0WP6zn7b/ef2kPyAAANWj3pIPobCw
cKGFzew1LkTmk/TFetcvl9skp6bLbRcAQDWcP3+evAaZUnZ1deX+HBupqamW
lpbmDxBdx3wkiGGGH5EYfODAgRE3oZkd1Z5ND/V6Pd+TW0cMEFd+9r/1ET91
FN4Y6GmT214RiHY+eXbXJseneGKfpi1Hn7bc+55vzHKf6GWXopdevPO9953F
3re/87r97YWohZ6RCzwjvz4fMf9cxFdnw+edDZ97JuwLj7DZ7qGfu4d+5nbr
U9dbn5wO+fh0yMxTwR+eDHrfJei9E4Hvngh8+3jAW8cC3nC++brzzdeO+r/i
5P/yEb+Xjvi9ePjGdMcbImYYmH6Y87hpNIvrb1Am0rV0/asklfz0IG14jSTa
hV7Xl364Uz3tY69Lm9/Q9bq3erOQpC0POuTT/vlE9lq/o+u0r0vDffhtdP35
80l60MP/1w7/tPP/8ECAvJ0f6dKuj3RK2e7jX4cMEMm8+9NfhxLQYQV7P/9l
9jPBnz0tzEXE7GfWffJM3smlea7meR4/5J9bV3BhQ8HFzYWXfy66tq3Ib1dx
wN6SkIOlYUfLIl0qot0q485VJ1ysSblal3FTk3WrIT+qqSiuuTy5tSqzXVPQ
1VSubavt7WoZ6O2eiGektbV17acvCK8IWbLhw6dVN+wFAKAE1FvyAQCA8WNv
b0+0udTPsUGkN3m1Ojs762nfZ6JeCqkNRTFQyPv7+5MMks9RZMbk0F8Po2QO
2y7SE/i9MXZbV3mU3DYOaXtbG9qKyjTx2eX+CfkekRn7biZYXrqzxO3WLCf/
GUQmL1j71z1ez4kq6P2+z39l8ZcxC/BJTt+8IVuzuGbZizXmuiBv5WtfJkqc
yG1dI7LNe3lEHRMVvG+OrtX42Ld5p5blnVmd77VRJ2z97IikLYs8QcRsTfIV
TVZIU1Fsa1VGZ2PJwd0/62lQlvuGGgVEC69550meUibXiMjknJwcua0bBQkJ
CRbvPaMLnjAcF4J8Xp71r/UfPXv90jm5TQMAqBI1lnkAAMBYrF27lshz9pO8
Erk/xwbR1CN2EjCu5ETDveGo1+t5HNma6vg3UbFPlk+aGT19HU3tJeX1iTkV
gUkFZ2/fPxiQuMUneplH6OyjN18dUSabjN5fMPMRPc3i3J91y3X9vStWzyhb
90rJhteKNr9RYP1Ovu37ebs+zt37ua5Tt9OCvBPf57mt1DU9X9xcdG1bccDe
0jCn8mjXqgTv2nT/+tyI5tLE9trc7pbq/p52415Q/Q3Kxj3WRBMREbH+7X/E
zv03kck0gqLtO9Mgk6XgViwThzXaemYAgFpQb8kHAADGSUFBAVcm837qR3SU
PR0gb2NjQ/ZDV5BS/YbrfbITFk9A9KDkX2dnZ9ajgP5LFtKSG3fMvtT4fWKk
nq4I3BVMYOy/er1eZFigz+bHClymXf758R0Wj65f+sjejY97Wf2Z6P0b24wZ
tbuvv7u5o7yyISWvMiS50PNO5uGgpJ8vx5ifCZ97LOCNccrkVdv/seXo06J/
2bg8Y7n3nWt311y/u+56/I834tf73dvgf2+jf4LlzcTNAYlWgUlbA5Osg5Jt
gpN/CUmxvZWy/VbqjtDUXWFpduFp9uHpeyIy9kZm7Iu6vz/q/oHbmYfuZDpG
Zx2JznKKyT4am30sLuf43RyXu7kn4/NO38tzTch3S8j3SCw4k1RwLrnwPMlp
SpFXapF3WvGl9GKf9BLfjNIr90uvZpZdzyy7kVXul11+M6ciIKciKLcymJwZ
W9uleprFWyrSO+uLezoaBvv7jHhpJghTalDOycmxXDKbZMf8g2c3rTCLiIiQ
2yKFQt7n5GXIunvxfo4Z4kDXrl1LHZyoT6H14XogK4w2I8T3jbjOGPYMgMmg
3pIPF9PIxZCpZAS5UBSmkRHj5oK2hutHj/jllmcIlpaWoaGhUnvW35/fEGtp
KYUUw7gHJUtYTQKv+ETrK+hCshVbTqS6sBtAamoqd3NyCF51BzkKb//c/KoR
9T4RWq1239aFPy59ZM32f7DI9mvsn1i1+GG7Hz8e1a76B3pbO6uqGtPyq8KI
wo3JcgpOtr0SZ3EuYt7xwLeN2Ah+Muh9z8ivr91dG5q6k8htIqLT8gPNN71O
7OetucfruY3bZ1dUVEzQ2TM6ptQsDqYgvr6+5GXIKpOpdxhnrFrqcagfIYjW
D1OHYmNjYy+Bq6ur4UckBhsi5KH3wRRHvSUfLqaRiyFTyQhyoShMIyPGzQUd
xk6H6tMygPCnVLGHtqSTsgrZCSlCMO1Pm0Umon2fFp/MHzTfE61N98+KLqLt
+0yk0y6apGg3JOj2Tzakez5w4ADdM92K21ZCj0UKYDQ7rEJDvQ396n0iiN7/
2X4J0fg8pUy085pNc3grDw72t3XV1jTdL6yOSCv2ic0+ditl+7W7a85HmrkE
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
    "], {{0, 198.}, {816., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->120.],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->{553.7076923076927, Automatic},
  ImageSizeRaw->{816., 198.},
  PlotRange->{{0, 816.}, {0, 198.}}]], "Text",
 CellChangeTimes->{{3.8505625123092394`*^9, 3.8505625182307453`*^9}},
 CellLabel->
  "Out[473]=",ExpressionUUID->"5bdc870e-19c4-4e47-b513-ad48f5e73d40"]
}, Closed]]
}, Open  ]]
},
WindowSize->{960, 478},
WindowMargins->{{-6.600000000000023, Automatic}, {-53.399999999999864`, 
   Automatic}},
FrontEndVersion->"13.0 for Microsoft Windows (64-bit) (December 2, 2021)",
StyleDefinitions->FrontEnd`FileName[{$RootDirectory, "C:", "Program Files", 
   "Wolfram Research", "Mathematica", "13.0", "SystemFiles", "FrontEnd", 
   "StyleSheets"}, "TalStyle.nb", CharacterEncoding -> "UTF-8"],
ExpressionUUID->"e40fd313-34b0-47b1-bbd1-087dcf190456"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "secClassicalMDS"->{
  Cell[227376, 4649, 273, 4, 41, "Subsubsection",ExpressionUUID->"1d4f0a1c-2d2d-48cc-87d1-e4f3094414ee",
   CellTags->"secClassicalMDS"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"secClassicalMDS", 729251, 14911}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 237, 5, 41, "Text",ExpressionUUID->"ea6db855-6843-4b14-84d4-670c75f05f22"],
Cell[798, 27, 250, 6, 33, "Item",ExpressionUUID->"2428756b-edda-4233-9573-6b3c231c04a1"],
Cell[1051, 35, 270, 6, 33, "Item",ExpressionUUID->"f2bdb3bb-98b0-448e-a9fe-827dfe123519"],
Cell[CellGroupData[{
Cell[1346, 45, 165, 3, 33, "Item",ExpressionUUID->"30c0ca14-cd72-49dc-9fa5-10f5ea6066cb"],
Cell[1514, 50, 183, 3, 28, "Subitem",ExpressionUUID->"0db72d9c-45c2-43b0-b990-2e2b8d51c67e"],
Cell[1700, 55, 174, 3, 28, "Subitem",ExpressionUUID->"b95d726b-312b-41af-9c8e-ba6c69e1326b"]
}, Open  ]],
Cell[1889, 61, 274, 6, 33, "Item",ExpressionUUID->"fd6505f1-2120-4b2f-9cea-1230929e7f88"],
Cell[CellGroupData[{
Cell[2188, 71, 218, 4, 81, "Section",ExpressionUUID->"aeba1354-1f62-4e15-a053-6d48ea0fd084"],
Cell[CellGroupData[{
Cell[2431, 79, 165, 3, 52, "Subsubsection",ExpressionUUID->"10ef3d19-5a26-45f3-866f-904f9c2b4df5"],
Cell[2599, 84, 577, 13, 60, "Text",ExpressionUUID->"dbfa161b-8527-4298-b2f5-afd71e02a9d9"],
Cell[3179, 99, 1989, 55, 87, "Item",ExpressionUUID->"49760aba-4d0f-41b7-9a4a-c74976642cd8"],
Cell[5171, 156, 2449, 69, 84, "Item",ExpressionUUID->"2f2a3f29-3942-4e70-92a7-316f139f9128"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7657, 230, 167, 3, 52, "Subsubsection",ExpressionUUID->"d4734519-17b7-4f7e-b2f7-5867a330c321"],
Cell[7827, 235, 646, 15, 38, "Text",ExpressionUUID->"c0a2c07a-be1a-4c98-afe9-46d367c32bfd"],
Cell[8476, 252, 652, 14, 60, "Text",ExpressionUUID->"44473321-dd76-4f99-8981-4c74c92c3f79"],
Cell[9131, 268, 10655, 237, 1061, "Input",ExpressionUUID->"f74d2172-ab49-4111-94f1-9977fb73d275"],
Cell[19789, 507, 6568, 130, 675, "Input",ExpressionUUID->"a4954af9-9a2f-408a-b7a0-95fcf4145def"]
}, Closed]],
Cell[CellGroupData[{
Cell[26394, 642, 169, 3, 41, "Subsubsection",ExpressionUUID->"87e46296-6fd6-42ab-9a8e-3b9485061632"],
Cell[26566, 647, 561, 14, 77, "Input",ExpressionUUID->"8bf5dcbb-643d-4b9a-898a-7ee036406018"],
Cell[27130, 663, 26740, 568, 3239, "Input",ExpressionUUID->"a265cdc0-52f3-43ae-ba8a-62a365d46732"],
Cell[53873, 1233, 26942, 566, 3993, "Input",ExpressionUUID->"33af6ae7-85c5-4966-91ba-f57f19c3f45a"],
Cell[80818, 1801, 303, 4, 37, "Text",ExpressionUUID->"49b878e4-35f2-40da-b617-a18fdae673e4"],
Cell[81124, 1807, 275, 6, 53, "Item",ExpressionUUID->"645f6879-a25e-44c3-8383-83f4efd739e7"],
Cell[81402, 1815, 266, 6, 33, "Item",ExpressionUUID->"24ef79e1-48b9-4c17-b590-b969f8bd694a"],
Cell[CellGroupData[{
Cell[81693, 1825, 354, 7, 53, "Item",ExpressionUUID->"f120bda8-b796-4175-aee8-7968fcf7c377"],
Cell[82050, 1834, 21829, 510, 3793, "Input",ExpressionUUID->"a3a51d0a-29c2-494f-b8ee-83207f3f6730"],
Cell[103882, 2346, 760, 20, 103, "Input",ExpressionUUID->"7b12046f-6561-47ed-a106-9d2365fa6fc0"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[104691, 2372, 344, 5, 41, "Subsubsection",ExpressionUUID->"fe5a359c-15c6-4074-8c5b-1c8f559e37ba"],
Cell[105038, 2379, 3607, 80, 378, "Input",ExpressionUUID->"cfe75671-9fad-4480-83aa-bd685d33826e",
 CellID->771793147],
Cell[108648, 2461, 1564, 41, 127, "Text",ExpressionUUID->"53936edd-cf46-46df-8d7b-ac557fe7dabe"],
Cell[110215, 2504, 530, 12, 33, "Item",ExpressionUUID->"3aafc204-1fde-4899-8d0e-b997aa98dcd6"],
Cell[CellGroupData[{
Cell[110770, 2520, 813, 17, 53, "Item",ExpressionUUID->"3196342b-bf9e-448e-b54e-4c28a5ec7b14"],
Cell[111586, 2539, 682, 14, 28, "Subitem",ExpressionUUID->"f70466c2-3ddb-4bd8-ad3e-408eccf025c0"],
Cell[112271, 2555, 1017, 21, 61, "Subitem",ExpressionUUID->"4c959860-5942-45fa-a1cb-2efdb4e39099"],
Cell[113291, 2578, 1097, 24, 61, "Subitem",ExpressionUUID->"e596f961-4443-4b70-812f-a5bf3f17e894"]
}, Open  ]],
Cell[CellGroupData[{
Cell[114425, 2607, 911, 17, 73, "Item",ExpressionUUID->"f4852339-2a84-4bca-8d83-029073f6f5e1"],
Cell[115339, 2626, 4774, 91, 469, "Input",ExpressionUUID->"88de1e2d-4221-41ea-a496-ae044711107d",
 CellID->778694050],
Cell[120116, 2719, 1736, 35, 126, "Input",ExpressionUUID->"b05f7275-2eed-4e20-b81b-f1aa6b0da968"]
}, Open  ]],
Cell[121867, 2757, 17288, 290, 233, "Text",ExpressionUUID->"b5989b40-bd8b-4753-8a33-fc9814df36a5"],
Cell[139158, 3049, 5245, 122, 652, "Input",ExpressionUUID->"d8d3637d-b046-4050-807e-6cc05fb6b564"],
Cell[144406, 3173, 21142, 354, 233, "Text",ExpressionUUID->"754fdcc8-0b2f-4ff5-a3c6-62c01c85710f"],
Cell[165551, 3529, 1762, 45, 127, "Text",ExpressionUUID->"ddd1cf63-b1f2-4be9-9956-acc7eab7d419"],
Cell[CellGroupData[{
Cell[167338, 3578, 494, 9, 53, "Item",ExpressionUUID->"2c4b5506-da10-4f83-a292-4c00e525e6d2"],
Cell[167835, 3589, 5321, 107, 606, "Input",ExpressionUUID->"0a366518-6c76-48bd-8090-cc076356daa6",
 CellID->130945232],
Cell[173159, 3698, 1703, 35, 126, "Input",ExpressionUUID->"2e99f0be-ca47-4d24-a263-28348f835ea1"]
}, Open  ]],
Cell[174877, 3736, 22501, 376, 212, "Text",ExpressionUUID->"f4f219e7-fdf3-4d7f-b3c1-614b1d63a557"],
Cell[197381, 4114, 4900, 110, 607, "Input",ExpressionUUID->"c024c525-ffa3-47b3-a83a-bbca40b4c74d"],
Cell[202284, 4226, 25055, 418, 212, "Text",ExpressionUUID->"7d0da237-f00d-415c-8086-58c31e60d8a6"]
}, Closed]],
Cell[CellGroupData[{
Cell[227376, 4649, 273, 4, 41, "Subsubsection",ExpressionUUID->"1d4f0a1c-2d2d-48cc-87d1-e4f3094414ee",
 CellTags->"secClassicalMDS"],
Cell[227652, 4655, 328, 7, 59, "Text",ExpressionUUID->"31e70c51-0b6f-498d-b918-945ca4a1fe90"],
Cell[227983, 4664, 4743, 100, 446, "Input",ExpressionUUID->"ce0c9886-d418-4ed1-84a1-702e9af64940",
 CellID->850978045],
Cell[232729, 4766, 1831, 47, 128, "Text",ExpressionUUID->"ce06eb05-7094-461c-8606-f1f6ab5bb099"],
Cell[234563, 4815, 2418, 78, 108, "Item",ExpressionUUID->"27035cf1-d461-4042-a48a-ca1d65655583"],
Cell[236984, 4895, 2296, 71, 95, "Item",ExpressionUUID->"9a6a5636-dbd6-4242-b474-209fd108eceb",
 InitializationCell->True],
Cell[239283, 4968, 695, 13, 73, "Item",ExpressionUUID->"7832ea9d-38ae-408a-a957-9c104a3acf47",
 InitializationCell->True],
Cell[239981, 4983, 150, 3, 37, "Text",ExpressionUUID->"30e108c8-921f-46e2-813c-c196ec6cf3b4"],
Cell[240134, 4988, 817, 19, 73, "Item",ExpressionUUID->"134d8830-4afc-48f1-8dd4-316d051ed838"],
Cell[CellGroupData[{
Cell[240976, 5011, 412, 8, 73, "Item",ExpressionUUID->"52430d42-dc07-4b03-a487-b0eac1c9885f"],
Cell[241391, 5021, 21262, 493, 2178, "Input",ExpressionUUID->"d2687e7c-81fe-4360-84e6-f5e5e552919a",
 CellID->192279514],
Cell[262656, 5516, 1410, 30, 126, "Input",ExpressionUUID->"a98e7731-2ba6-488a-9d6d-f28a1df3e4e1"]
}, Open  ]],
Cell[264081, 5549, 20642, 347, 233, "Text",ExpressionUUID->"f7492473-7439-4fa2-972a-c28eae4fb7be"],
Cell[284726, 5898, 2096, 55, 172, "Text",ExpressionUUID->"5a9554b4-aae9-40fa-80ee-2e6c2ff61008"],
Cell[286825, 5955, 4188, 135, 150, "Item",ExpressionUUID->"7bb58977-db22-4aa9-b571-f4d2266ec0fc"],
Cell[291016, 6092, 2593, 78, 115, "Item",ExpressionUUID->"0511a046-3b8b-4277-8157-22a9dcc0d128"],
Cell[293612, 6172, 4610, 155, 182, "Item",ExpressionUUID->"c044013b-ffea-4c9a-a99d-bcdc82330dd3"],
Cell[298225, 6329, 3589, 101, 180, "Item",ExpressionUUID->"cd3b5a1f-f030-4891-978f-f709608af7b1"],
Cell[301817, 6432, 150, 3, 37, "Text",ExpressionUUID->"88df86af-c7a1-49e8-880e-8c3f3809f045"],
Cell[301970, 6437, 1283, 34, 94, "Item",ExpressionUUID->"98121d9d-ae27-419c-b6ae-e9ac21bd114f"],
Cell[303256, 6473, 1360, 32, 81, "Item",ExpressionUUID->"26b8018e-935f-4d04-8782-a6e7bdc8fe78"],
Cell[304619, 6507, 1109, 28, 27, "TextNumbered",ExpressionUUID->"a37194e9-9d05-4d6d-af6a-70f81edb6459"],
Cell[305731, 6537, 2200, 62, 56, "Subitem",ExpressionUUID->"77e862c0-eddc-4992-9f5b-97db8cf7e624"],
Cell[307934, 6601, 1612, 45, 68, "Subitem",ExpressionUUID->"0d56db17-cf21-4525-9c35-edd977bf2f29"],
Cell[309549, 6648, 1406, 40, 70, "Subitem",ExpressionUUID->"99aa19e1-98c0-48a6-9004-53edc20a0f9d"],
Cell[CellGroupData[{
Cell[310980, 6692, 3248, 90, 82, "Subitem",ExpressionUUID->"e986fab8-962b-4d6d-9860-e3c06b1c7560"],
Cell[314231, 6784, 2547, 77, 71, "Subsubitem",ExpressionUUID->"bff8161e-7845-49dc-8042-890cb4115ea2"]
}, Open  ]],
Cell[316793, 6864, 2176, 63, 51, "TextNumbered",ExpressionUUID->"b8d36889-4b5a-4bec-b8aa-86546c4bbbcd"],
Cell[318972, 6929, 41504, 950, 2832, "Input",ExpressionUUID->"c4ff1f2e-08f7-4652-9446-ce27829e0f1a"],
Cell[360479, 7881, 1853, 39, 126, "Input",ExpressionUUID->"41184bcc-bbd3-4526-ad2a-474ae257cd64"],
Cell[362335, 7922, 22592, 379, 212, "Text",ExpressionUUID->"913342a2-3fce-45ae-9b07-e6cc1a76b633"],
Cell[384930, 8303, 5050, 120, 286, "Input",ExpressionUUID->"8576e396-2198-440e-b38c-a5192b1099d9"],
Cell[389983, 8425, 19247, 322, 142, "Text",ExpressionUUID->"20015d20-a849-4ccd-8e10-35e7be884bfe"]
}, Closed]],
Cell[CellGroupData[{
Cell[409267, 8752, 366, 5, 41, "Subsubsection",ExpressionUUID->"8b8b0b4f-7054-46db-9897-34517cf8c0cf"],
Cell[409636, 8759, 5074, 103, 446, "Input",ExpressionUUID->"499f8f77-5ef1-4e19-8baf-ced8812e9e86",
 CellID->108308183],
Cell[414713, 8864, 1839, 47, 128, "Text",ExpressionUUID->"c867496c-7704-497c-ad3a-67c9be08fc00"],
Cell[CellGroupData[{
Cell[416577, 8915, 2838, 80, 100, "Item",ExpressionUUID->"aaf1cbfc-c60e-4fe5-8a27-07b98dad0298"],
Cell[419418, 8997, 1657, 41, 73, "Subitem",ExpressionUUID->"6d4ae44e-7084-4449-9def-8a1ff7872f40"],
Cell[421078, 9040, 1149, 20, 129, "Subitem",ExpressionUUID->"252bae0a-d23e-4fad-81e5-297cc18d5e27"],
Cell[CellGroupData[{
Cell[422252, 9064, 1763, 43, 114, "Subitem",ExpressionUUID->"1bf0cead-0271-400e-8962-478ffbd304ca"],
Cell[424018, 9109, 18483, 389, 1417, "Input",ExpressionUUID->"5e248845-9ea5-4c3b-bb53-f615075a8759"],
Cell[442504, 9500, 1455, 30, 103, "Input",ExpressionUUID->"9f93b218-6c39-4080-a17d-d8320c052df9"]
}, Open  ]]
}, Open  ]],
Cell[443986, 9534, 21205, 355, 233, "Text",ExpressionUUID->"3176638b-8a4d-47f8-ab47-9ae4137ece65"],
Cell[465194, 9891, 1829, 44, 149, "Input",ExpressionUUID->"062bdcfd-bd6c-4a3f-863d-0f747ad9b33a"],
Cell[467026, 9937, 1827, 46, 104, "Text",ExpressionUUID->"2707da18-9b38-400d-8c68-07082da6ab0c"],
Cell[CellGroupData[{
Cell[468878, 9987, 6051, 192, 151, "Item",ExpressionUUID->"45017ef8-b964-4694-b391-fa6fdb572b9a"],
Cell[474932, 10181, 2241, 60, 56, "Subitem",ExpressionUUID->"b0c8775a-b8e2-434e-8046-b19bd8d2875e"],
Cell[477176, 10243, 1358, 26, 92, "Subitem",ExpressionUUID->"e5d429aa-8241-43f8-9304-e938ec8a4d2c"],
Cell[CellGroupData[{
Cell[478559, 10273, 2050, 54, 73, "Subitem",ExpressionUUID->"1d240c9d-fc9d-4fea-9749-6b9ce4ea36ae"],
Cell[480612, 10329, 21460, 467, 1658, "Input",ExpressionUUID->"d141bb56-4d59-4a78-84d0-33594d913db6"],
Cell[502075, 10798, 1239, 28, 80, "Input",ExpressionUUID->"dc5f9f2e-9968-406d-b150-9aeefe3c676c"]
}, Open  ]]
}, Open  ]],
Cell[503341, 10830, 24146, 403, 212, "Text",ExpressionUUID->"cdb0cc07-c1ca-44ba-9cc9-9abac9966964"],
Cell[527490, 11235, 2039, 49, 126, "Input",ExpressionUUID->"d54f72f0-2011-495f-86f2-f76e9aebc188"],
Cell[529532, 11286, 26072, 434, 212, "Text",ExpressionUUID->"66c43fc9-2fb5-49fe-a7ac-af87b0d3138a"],
Cell[555607, 11722, 2334, 57, 218, "Input",ExpressionUUID->"705df25b-cf98-45e9-b74f-56a9cd70f507"],
Cell[557944, 11781, 628, 14, 59, "Text",ExpressionUUID->"aecf9a51-3b3a-47d3-ab95-6fdbaf64533a"],
Cell[558575, 11797, 36896, 612, 209, "Text",ExpressionUUID->"eae05f48-7a50-4fb3-b068-1e487f4b2a90"],
Cell[595474, 12411, 43304, 920, 200, "Input",ExpressionUUID->"2941d878-e553-4777-8fd5-8e79fea93b14"],
Cell[638781, 13333, 501, 10, 37, "Text",ExpressionUUID->"7e3cdc2c-fb8d-458f-8dff-ea95c9fb0bc1"],
Cell[639285, 13345, 29518, 491, 212, "Text",ExpressionUUID->"6840635b-ec4b-4e50-8aa7-c2fb3d257112"]
}, Closed]],
Cell[CellGroupData[{
Cell[668840, 13841, 170, 3, 41, "Subsubsection",ExpressionUUID->"f5b64eda-1f6a-4e09-918d-7179b2d2c0a4"],
Cell[669013, 13846, 148, 3, 37, "Text",ExpressionUUID->"14268612-6483-41e7-b3c7-d06e03129336"],
Cell[669164, 13851, 428, 8, 53, "Item",ExpressionUUID->"05c5494f-e0f8-40d4-8dd9-39d4f1380d42"],
Cell[CellGroupData[{
Cell[669617, 13863, 371, 8, 53, "Item",ExpressionUUID->"267b8f2b-a5b2-415f-a01a-34a76d952b5d"],
Cell[669991, 13873, 6647, 160, 458, "Input",ExpressionUUID->"2239006e-0dac-441e-a500-6fe83658b3c7"]
}, Open  ]],
Cell[676653, 14036, 51990, 857, 179, "Text",ExpressionUUID->"5bdc870e-19c4-4e47-b513-ad48f5e73d40"]
}, Closed]]
}, Open  ]]
}
]
*)

